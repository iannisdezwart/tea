// enum decls:
i32 $I_P_ALL = 0;
i32 $I_P_PID = 1;
i32 $I_P_PGID = 2;
i32 $I_need_more = 0;
i32 $I_block_done = 1;
i32 $I_finish_started = 2;
i32 $I_finish_done = 3;
i32 $I_CODES = 0;
i32 $I_LENS = 1;
i32 $I_DISTS = 2;
i32 $I_HEAD = 0;
i32 $I_FLAGS = 1;
i32 $I_TIME = 2;
i32 $I_OS = 3;
i32 $I_EXLEN = 4;
i32 $I_EXTRA = 5;
i32 $I_NAME = 6;
i32 $I_COMMENT = 7;
i32 $I_HCRC = 8;
i32 $I_DICTID = 9;
i32 $I_DICT = 10;
i32 $I_TYPE = 11;
i32 $I_TYPEDO = 12;
i32 $I_STORED = 13;
i32 $I_COPY_ = 14;
i32 $I_COPYlmao = 15;
i32 $I_TABLE = 16;
i32 $I_LENLENS = 17;
i32 $I_CODELENS = 18;
i32 $I_LEN_ = 19;
i32 $I_LEN = 20;
i32 $I_LENEXT = 21;
i32 $I_DIST = 22;
i32 $I_DISTEXT = 23;
i32 $I_MATCH = 24;
i32 $I_LIT = 25;
i32 $I_CHECK = 26;
i32 $I_LENGTH = 27;
i32 $I_DONE = 28;
i32 $I_BAD = 29;
i32 $I_MEM = 30;
i32 $I_SYNC = 31;
// hoisted nested struct decls:
class $T_anon_L4kMmp {
u32 $I_w_Termsig;
u32 $I_w_Coredump;
u32 $I_w_Retcode;
u32 $I_w_Filler;
};
class $T_anon_MHa7pG {
u32 $I_w_Stopval;
u32 $I_w_Stopsig;
u32 $I_w_Filler;
};
class $T_anon_25SG6p {
u16  $I_freq;
u16  $I_code;
};
class $T_anon_eX2uTs {
u16  $I_dad;
u16  $I_len;
};

// hoisted empty struct decls:
class $T_fssearchblock {};
class $T_searchstate {};
class $T___sFILEX {};

// non-empty struct decls:
class $T_anon_Yl5btd {
} ;
class $T_anon_Fuq93X {
i8 [128]$I___mbstate8;
i64 $I__mbstateL;
} ;
class $T___darwin_pthread_handler_rec {
v0 *$I___arg;
$T___darwin_pthread_handler_rec *$I___next;
} ;
class $T__opaque_pthread_attr_t {
i32 $I___sig;
i8 [56]$I___opaque;
} ;
class $T__opaque_pthread_cond_t {
i32 $I___sig;
i8 [40]$I___opaque;
} ;
class $T__opaque_pthread_condattr_t {
i32 $I___sig;
i8 [8]$I___opaque;
} ;
class $T__opaque_pthread_mutex_t {
i32 $I___sig;
i8 [56]$I___opaque;
} ;
class $T__opaque_pthread_mutexattr_t {
i32 $I___sig;
i8 [8]$I___opaque;
} ;
class $T__opaque_pthread_once_t {
i32 $I___sig;
i8 [8]$I___opaque;
} ;
class $T__opaque_pthread_rwlock_t {
i32 $I___sig;
i8 [192]$I___opaque;
} ;
class $T__opaque_pthread_rwlockattr_t {
i32 $I___sig;
i8 [16]$I___opaque;
} ;
class $T__opaque_pthread_t {
i32 $I___sig;
$T___darwin_pthread_handler_rec *$I___cleanup_stack;
i8 [8176]$I___opaque;
} ;
class $T__OSUnalignedU16 {
 u16  $I___val;
}  ;
class $T__OSUnalignedU32 {
 u32  $I___val;
}  ;
class $T__OSUnalignedU64 {
 u64  $I___val;
}  ;
class $T_fd_set {
i32  [1024]$I_fds_bits;
} ;
class $T_accessx_descriptor {
u32 $I_ad_name_offset;
i32 $I_ad_flags;
i32 [2]$I_ad_pad;
} ;
class $T_timespec {
i32  $I_tv_sec;
i32 $I_tv_nsec;
} ;
class $T_timeval {
i32  $I_tv_sec;
i32   $I_tv_usec;
} ;
class $T_z_stream_s {
u8   *$I_next_in;
u32  $I_avail_in;
u32  $I_total_in;
u8   *$I_next_out;
u32  $I_avail_out;
u32  $I_total_out;
i8 *$I_msg;
$T_internal_state *$I_state;
v0  $I_zalloc;
v0  $I_zfree;
v0  $I_opaque;
i32 $I_data_type;
u32  $I_adler;
u32  $I_reserved;
} ;
class $T_gz_header_s {
i32 $I_text;
u32  $I_time;
i32 $I_xflags;
i32 $I_os;
u8   *$I_extra;
u32  $I_extra_len;
u32  $I_extra_max;
u8   *$I_name;
u32  $I_name_max;
u8   *$I_comment;
u32  $I_comm_max;
i32 $I_hcrc;
i32 $I_done;
} ;
class $T_gzFile_s {
u32 $I_have;
u8 *$I_next;
i64    $I_pos;
} ;
class $T___darwin_arm_exception_state {
u32  $I___exception;
u32  $I___fsr;
u32  $I___far;
} ;
class $T___darwin_arm_exception_state64 {
u64  $I___far;
u32  $I___esr;
u32  $I___exception;
} ;
class $T___darwin_arm_thread_state {
u32  [13]$I___r;
u32  $I___sp;
u32  $I___lr;
u32  $I___pc;
u32  $I___cpsr;
} ;
class $T___darwin_arm_thread_state64 {
u64  [29]$I___x;
u64  $I___fp;
u64  $I___lr;
u64  $I___sp;
u64  $I___pc;
u32  $I___cpsr;
u32  $I___pad;
} ;
class $T___darwin_arm_vfp_state {
u32  [64]$I___r;
u32  $I___fpscr;
} ;
class $T___darwin_arm_neon_state64 {
u64  [32]$I___v;
u32  $I___fpsr;
u32  $I___fpcr;
} ;
class $T___darwin_arm_neon_state {
u64  [16]$I___v;
u32  $I___fpsr;
u32  $I___fpcr;
} ;
class $T___arm_pagein_state {
i32 $I___pagein_error;
} ;
class $T___arm_legacy_debug_state {
u32  [16]$I___bvr;
u32  [16]$I___bcr;
u32  [16]$I___wvr;
u32  [16]$I___wcr;
} ;
class $T___darwin_arm_debug_state32 {
u32  [16]$I___bvr;
u32  [16]$I___bcr;
u32  [16]$I___wvr;
u32  [16]$I___wcr;
u64  $I___mdscr_el1;
} ;
class $T___darwin_arm_debug_state64 {
u64  [16]$I___bvr;
u64  [16]$I___bcr;
u64  [16]$I___wvr;
u64  [16]$I___wcr;
u64  $I___mdscr_el1;
} ;
class $T___darwin_arm_cpmu_state64 {
u64  [16]$I___ctrs;
} ;
class $T___darwin_mcontext32 {
$T___darwin_arm_exception_state $I___es;
$T___darwin_arm_thread_state $I___ss;
$T___darwin_arm_vfp_state $I___fs;
} ;
class $T___darwin_mcontext64 {
$T___darwin_arm_exception_state64 $I___es;
$T___darwin_arm_thread_state64 $I___ss;
$T___darwin_arm_neon_state64 $I___ns;
} ;
class $T___darwin_sigaltstack {
v0 *$I_ss_sp;
u32  $I_ss_size;
i32 $I_ss_flags;
} ;
class $T___darwin_ucontext {
i32 $I_uc_onstack;
u32   $I_uc_sigmask;
$T___darwin_sigaltstack $I_uc_stack;
$T___darwin_ucontext *$I_uc_link;
u32  $I_uc_mcsize;
$T___darwin_mcontext64 *$I_uc_mcontext;
} ;
class $T_sigval {
i32 $I_sival_int;
v0 *$I_sival_ptr;
} ;
class $T_sigevent {
i32 $I_sigev_notify;
i32 $I_sigev_signo;
$T_sigval $I_sigev_value;
$T__opaque_pthread_attr_t  *$I_sigev_notify_attributes;
} ;
class $T___siginfo {
i32 $I_si_signo;
i32 $I_si_errno;
i32 $I_si_code;
i32    $I_si_pid;
u32    $I_si_uid;
i32 $I_si_status;
v0 *$I_si_addr;
$T_sigval $I_si_value;
i32 $I_si_band;
u32 [7]$I___pad;
} ;
class $T___sigaction_u {
} ;
class $T___sigaction {
$T___sigaction_u $I___sigaction_u;
u32    $I_sa_mask;
i32 $I_sa_flags;
} ;
class $T_sigaction {
$T___sigaction_u $I___sigaction_u;
u32    $I_sa_mask;
i32 $I_sa_flags;
} ;
class $T_sigvec {
i32 $I_sv_mask;
i32 $I_sv_flags;
} ;
class $T_sigstack {
i8 *$I_ss_sp;
i32 $I_ss_onstack;
} ;
class $T_rusage {
$T_timeval $I_ru_utime;
$T_timeval $I_ru_stime;
i32 $I_ru_maxrss;
i32 $I_ru_ixrss;
i32 $I_ru_idrss;
i32 $I_ru_isrss;
i32 $I_ru_minflt;
i32 $I_ru_majflt;
i32 $I_ru_nswap;
i32 $I_ru_inblock;
i32 $I_ru_oublock;
i32 $I_ru_msgsnd;
i32 $I_ru_msgrcv;
i32 $I_ru_nsignals;
i32 $I_ru_nvcsw;
i32 $I_ru_nivcsw;
} ;
class $T_rusage_info_v0 {
u8  [16]$I_ri_uuid;
u64  $I_ri_user_time;
u64  $I_ri_system_time;
u64  $I_ri_pkg_idle_wkups;
u64  $I_ri_interrupt_wkups;
u64  $I_ri_pageins;
u64  $I_ri_wired_size;
u64  $I_ri_resident_size;
u64  $I_ri_phys_footprint;
u64  $I_ri_proc_start_abstime;
u64  $I_ri_proc_exit_abstime;
} ;
class $T_rusage_info_v1 {
u8  [16]$I_ri_uuid;
u64  $I_ri_user_time;
u64  $I_ri_system_time;
u64  $I_ri_pkg_idle_wkups;
u64  $I_ri_interrupt_wkups;
u64  $I_ri_pageins;
u64  $I_ri_wired_size;
u64  $I_ri_resident_size;
u64  $I_ri_phys_footprint;
u64  $I_ri_proc_start_abstime;
u64  $I_ri_proc_exit_abstime;
u64  $I_ri_child_user_time;
u64  $I_ri_child_system_time;
u64  $I_ri_child_pkg_idle_wkups;
u64  $I_ri_child_interrupt_wkups;
u64  $I_ri_child_pageins;
u64  $I_ri_child_elapsed_abstime;
} ;
class $T_rusage_info_v2 {
u8  [16]$I_ri_uuid;
u64  $I_ri_user_time;
u64  $I_ri_system_time;
u64  $I_ri_pkg_idle_wkups;
u64  $I_ri_interrupt_wkups;
u64  $I_ri_pageins;
u64  $I_ri_wired_size;
u64  $I_ri_resident_size;
u64  $I_ri_phys_footprint;
u64  $I_ri_proc_start_abstime;
u64  $I_ri_proc_exit_abstime;
u64  $I_ri_child_user_time;
u64  $I_ri_child_system_time;
u64  $I_ri_child_pkg_idle_wkups;
u64  $I_ri_child_interrupt_wkups;
u64  $I_ri_child_pageins;
u64  $I_ri_child_elapsed_abstime;
u64  $I_ri_diskio_bytesread;
u64  $I_ri_diskio_byteswritten;
} ;
class $T_rusage_info_v3 {
u8  [16]$I_ri_uuid;
u64  $I_ri_user_time;
u64  $I_ri_system_time;
u64  $I_ri_pkg_idle_wkups;
u64  $I_ri_interrupt_wkups;
u64  $I_ri_pageins;
u64  $I_ri_wired_size;
u64  $I_ri_resident_size;
u64  $I_ri_phys_footprint;
u64  $I_ri_proc_start_abstime;
u64  $I_ri_proc_exit_abstime;
u64  $I_ri_child_user_time;
u64  $I_ri_child_system_time;
u64  $I_ri_child_pkg_idle_wkups;
u64  $I_ri_child_interrupt_wkups;
u64  $I_ri_child_pageins;
u64  $I_ri_child_elapsed_abstime;
u64  $I_ri_diskio_bytesread;
u64  $I_ri_diskio_byteswritten;
u64  $I_ri_cpu_time_qos_default;
u64  $I_ri_cpu_time_qos_maintenance;
u64  $I_ri_cpu_time_qos_background;
u64  $I_ri_cpu_time_qos_utility;
u64  $I_ri_cpu_time_qos_legacy;
u64  $I_ri_cpu_time_qos_user_initiated;
u64  $I_ri_cpu_time_qos_user_interactive;
u64  $I_ri_billed_system_time;
u64  $I_ri_serviced_system_time;
} ;
class $T_rusage_info_v4 {
u8  [16]$I_ri_uuid;
u64  $I_ri_user_time;
u64  $I_ri_system_time;
u64  $I_ri_pkg_idle_wkups;
u64  $I_ri_interrupt_wkups;
u64  $I_ri_pageins;
u64  $I_ri_wired_size;
u64  $I_ri_resident_size;
u64  $I_ri_phys_footprint;
u64  $I_ri_proc_start_abstime;
u64  $I_ri_proc_exit_abstime;
u64  $I_ri_child_user_time;
u64  $I_ri_child_system_time;
u64  $I_ri_child_pkg_idle_wkups;
u64  $I_ri_child_interrupt_wkups;
u64  $I_ri_child_pageins;
u64  $I_ri_child_elapsed_abstime;
u64  $I_ri_diskio_bytesread;
u64  $I_ri_diskio_byteswritten;
u64  $I_ri_cpu_time_qos_default;
u64  $I_ri_cpu_time_qos_maintenance;
u64  $I_ri_cpu_time_qos_background;
u64  $I_ri_cpu_time_qos_utility;
u64  $I_ri_cpu_time_qos_legacy;
u64  $I_ri_cpu_time_qos_user_initiated;
u64  $I_ri_cpu_time_qos_user_interactive;
u64  $I_ri_billed_system_time;
u64  $I_ri_serviced_system_time;
u64  $I_ri_logical_writes;
u64  $I_ri_lifetime_max_phys_footprint;
u64  $I_ri_instructions;
u64  $I_ri_cycles;
u64  $I_ri_billed_energy;
u64  $I_ri_serviced_energy;
u64  $I_ri_interval_max_phys_footprint;
u64  $I_ri_runnable_time;
} ;
class $T_rusage_info_v5 {
u8  [16]$I_ri_uuid;
u64  $I_ri_user_time;
u64  $I_ri_system_time;
u64  $I_ri_pkg_idle_wkups;
u64  $I_ri_interrupt_wkups;
u64  $I_ri_pageins;
u64  $I_ri_wired_size;
u64  $I_ri_resident_size;
u64  $I_ri_phys_footprint;
u64  $I_ri_proc_start_abstime;
u64  $I_ri_proc_exit_abstime;
u64  $I_ri_child_user_time;
u64  $I_ri_child_system_time;
u64  $I_ri_child_pkg_idle_wkups;
u64  $I_ri_child_interrupt_wkups;
u64  $I_ri_child_pageins;
u64  $I_ri_child_elapsed_abstime;
u64  $I_ri_diskio_bytesread;
u64  $I_ri_diskio_byteswritten;
u64  $I_ri_cpu_time_qos_default;
u64  $I_ri_cpu_time_qos_maintenance;
u64  $I_ri_cpu_time_qos_background;
u64  $I_ri_cpu_time_qos_utility;
u64  $I_ri_cpu_time_qos_legacy;
u64  $I_ri_cpu_time_qos_user_initiated;
u64  $I_ri_cpu_time_qos_user_interactive;
u64  $I_ri_billed_system_time;
u64  $I_ri_serviced_system_time;
u64  $I_ri_logical_writes;
u64  $I_ri_lifetime_max_phys_footprint;
u64  $I_ri_instructions;
u64  $I_ri_cycles;
u64  $I_ri_billed_energy;
u64  $I_ri_serviced_energy;
u64  $I_ri_interval_max_phys_footprint;
u64  $I_ri_runnable_time;
u64  $I_ri_flags;
} ;
class $T_rusage_info_v6 {
u8  [16]$I_ri_uuid;
u64  $I_ri_user_time;
u64  $I_ri_system_time;
u64  $I_ri_pkg_idle_wkups;
u64  $I_ri_interrupt_wkups;
u64  $I_ri_pageins;
u64  $I_ri_wired_size;
u64  $I_ri_resident_size;
u64  $I_ri_phys_footprint;
u64  $I_ri_proc_start_abstime;
u64  $I_ri_proc_exit_abstime;
u64  $I_ri_child_user_time;
u64  $I_ri_child_system_time;
u64  $I_ri_child_pkg_idle_wkups;
u64  $I_ri_child_interrupt_wkups;
u64  $I_ri_child_pageins;
u64  $I_ri_child_elapsed_abstime;
u64  $I_ri_diskio_bytesread;
u64  $I_ri_diskio_byteswritten;
u64  $I_ri_cpu_time_qos_default;
u64  $I_ri_cpu_time_qos_maintenance;
u64  $I_ri_cpu_time_qos_background;
u64  $I_ri_cpu_time_qos_utility;
u64  $I_ri_cpu_time_qos_legacy;
u64  $I_ri_cpu_time_qos_user_initiated;
u64  $I_ri_cpu_time_qos_user_interactive;
u64  $I_ri_billed_system_time;
u64  $I_ri_serviced_system_time;
u64  $I_ri_logical_writes;
u64  $I_ri_lifetime_max_phys_footprint;
u64  $I_ri_instructions;
u64  $I_ri_cycles;
u64  $I_ri_billed_energy;
u64  $I_ri_serviced_energy;
u64  $I_ri_interval_max_phys_footprint;
u64  $I_ri_runnable_time;
u64  $I_ri_flags;
u64  $I_ri_user_ptime;
u64  $I_ri_system_ptime;
u64  $I_ri_pinstructions;
u64  $I_ri_pcycles;
u64  $I_ri_energy_nj;
u64  $I_ri_penergy_nj;
u64  [14]$I_ri_reserved;
} ;
class $T_rlimit {
u64   $I_rlim_cur;
u64   $I_rlim_max;
} ;
class $T_proc_rlimit_control_wakeupmon {
u32  $I_wm_flags;
i32  $I_wm_rate;
} ;
class $T_wait {
i32 $I_w_status;
$T_anon_L4kMmp $I_w_T;
$T_anon_MHa7pG $I_w_S;
} ;
class $T_anon_CKEc5Y {
i32 $I_quot;
i32 $I_rem;
} ;
class $T_anon_o7pa9c {
i32 $I_quot;
i32 $I_rem;
} ;
class $T_anon_SlTB5a {
i64 $I_quot;
i64 $I_rem;
} ;
class $T_ct_data_s {
$T_anon_25SG6p $I_fc;
$T_anon_eX2uTs $I_dl;
} ;
class $T_tree_desc_s {
$T_ct_data_s *$I_dyn_tree;
i32 $I_max_code;
 $T_static_tree_desc_s *$I_stat_desc;
} ;
class $T_internal_state {
$T_z_stream_s  *$I_strm;
i32 $I_status;
u8   *$I_pending_buf;
u32  $I_pending_buf_size;
u8   *$I_pending_out;
u32  $I_pending;
i32 $I_wrap;
$T_gz_header_s  *$I_gzhead;
u32  $I_gzindex;
u8  $I_method;
i32 $I_last_flush;
u32  $I_w_size;
u32  $I_w_bits;
u32  $I_w_mask;
u8   *$I_window;
u32  $I_window_size;
u16    *$I_prev;
u16    *$I_head;
u32  $I_ins_h;
u32  $I_hash_size;
u32  $I_hash_bits;
u32  $I_hash_mask;
u32  $I_hash_shift;
i32 $I_block_start;
u32  $I_match_length;
u32  $I_prev_match;
i32 $I_match_available;
u32  $I_strstart;
u32  $I_match_start;
u32  $I_lookahead;
u32  $I_prev_length;
u32  $I_max_chain_length;
u32  $I_max_lazy_match;
i32 $I_level;
i32 $I_strategy;
u32  $I_good_match;
i32 $I_nice_match;
$T_ct_data_s [0]$I_dyn_ltree;
$T_ct_data_s [0]$I_dyn_dtree;
$T_ct_data_s [0]$I_bl_tree;
$T_tree_desc_s $I_l_desc;
$T_tree_desc_s $I_d_desc;
$T_tree_desc_s $I_bl_desc;
u16  [0]$I_bl_count;
i32 [0]$I_heap;
i32 $I_heap_len;
i32 $I_heap_max;
u8  [0]$I_depth;
u8   *$I_sym_buf;
u32  $I_lit_bufsize;
u32  $I_sym_next;
u32  $I_sym_end;
u32  $I_opt_len;
u32  $I_static_len;
u32  $I_matches;
u32  $I_insert;
u16  $I_bi_buf;
i32 $I_bi_valid;
u32  $I_high_water;
} ;
class $T_config_s {
u16  $I_good_length;
u16  $I_max_lazy;
u16  $I_nice_length;
u16  $I_max_chain;
v0  $I_func;
} ;
class $T___sbuf {
u8 *$I__base;
i32 $I__size;
} ;
class $T___sFILE {
u8 *$I__p;
i32 $I__r;
i32 $I__w;
i16 $I__flags;
i16 $I__file;
$T___sbuf $I__bf;
i32 $I__lbfsize;
v0 *$I__cookie;
$T___sbuf $I__ub;
$T___sFILEX *$I__extra;
i32 $I__ur;
u8 [3]$I__ubuf;
u8 [1]$I__nbuf;
$T___sbuf $I__lb;
i32 $I__blksize;
i64    $I__offset;
} ;
class $T_flock {
i64    $I_l_start;
i64    $I_l_len;
i32    $I_l_pid;
i16 $I_l_type;
i16 $I_l_whence;
} ;
class $T_flocktimeout {
$T_flock $I_fl;
$T_timespec $I_timeout;
} ;
class $T_anon_zFAtAH {
$T_gzFile_s $I_x;
i32 $I_mode;
i32 $I_fd;
i8 *$I_path;
u32 $I_size;
u32 $I_want;
u8 *$I_in;
u8 *$I_out;
i32 $I_direct;
i32 $I_how;
i64    $I_start;
i32 $I_eof;
i32 $I_past;
i32 $I_level;
i32 $I_strategy;
i32 $I_reset;
i64    $I_skip;
i32 $I_seek;
i32 $I_err;
i8 *$I_msg;
$T_z_stream_s  $I_strm;
} ;
class $T_anon_WzN6Vy {
u8 $I_op;
u8 $I_bits;
u16 $I_val;
} ;
class $T_inflate_state {
$T_z_stream_s  *$I_strm;
i32 $I_mode;
i32 $I_last;
i32 $I_wrap;
i32 $I_havedict;
i32 $I_flags;
u32 $I_dmax;
u32 $I_check;
u32 $I_total;
$T_gz_header_s  *$I_head;
u32 $I_wbits;
u32 $I_wsize;
u32 $I_whave;
u32 $I_wnext;
u8 *$I_window;
u32 $I_hold;
u32 $I_bits;
u32 $I_length;
u32 $I_offset;
u32 $I_extra;
$T_anon_WzN6Vy  *$I_lencode;
$T_anon_WzN6Vy  *$I_distcode;
u32 $I_lenbits;
u32 $I_distbits;
u32 $I_ncode;
u32 $I_nlen;
u32 $I_ndist;
u32 $I_have;
$T_anon_WzN6Vy *$I_next;
u16 [320]$I_lens;
u16 [288]$I_work;
$T_anon_WzN6Vy [0]$I_codes;
i32 $I_sane;
i32 $I_back;
u32 $I_was;
} ;
class $T_static_tree_desc_s {
 $T_ct_data_s *$I_static_tree;
 i32  *$I_extra_bits;
i32 $I_extra_base;
i32 $I_elems;
i32 $I_max_length;
} ;

// top-level fn decls:
i32  $I_sscanf( i8 *$A_0,  i8 *$A_1){}
u32   $I_fwrite( v0 *$I___ptr, u32  $I___size, u32  $I___nitems, $T___sFILE *$I___stream){}
u32   $I_strnlen( i8 *$I___s1, u32  $I___n){}
i32  $I_fgetpos($T___sFILE *$A_0, i64    *$A_1){}
u32   $I_confstr(i32 $A_0, i8 *$A_1, u32  $A_2){}
v0  $I_sranddev(v0 $A_0){}
v0  $I_setprogname( i8 *$A_0){}
i32  $I_getsubopt(i8 **$A_0, i8 **$A_1, i8 **$A_2){}
i32  $I_mblen( i8 *$I___s, u32  $I___n){}
i32  $I_getgroups(i32 $A_0, u32    *$A_1){}
i32  $I_renameatx_np(i32 $A_0,  i8 *$A_1, i32 $A_2,  i8 *$A_3, u32 $A_4){}
i8  *$I_strncat(i8 *$I___s1,  i8 *$I___s2, u32  $I___n){}
i32  $I_openat(i32 $A_0,  i8 *$A_1, i32 $A_2){}
i32  $I_getattrlistbulk(i32 $A_0, v0 *$A_1, v0 *$A_2, u32  $A_3, u64  $A_4){}
i32  $I_getc_unlocked($T___sFILE *$A_0){}
i32  $I_cgetclose(v0 $A_0){}
i32  $I_fclose($T___sFILE *$A_0){}
i32  $I_linkat(i32 $A_0,  i8 *$A_1, i32 $A_2,  i8 *$A_3, i32 $A_4){}
f32  $I_strtof( i8 *$A_0, i8 **$A_1){}
i32  $I_getwgroups_np(i32 *$A_0, u8   $A_1){}
i32  $I_access( i8 *$A_0, i32 $A_1){}
u32     $I_ualarm(u32    $A_0, u32    $A_1){}
u32   $I_strspn( i8 *$I___s,  i8 *$I___charset){}
i32  $I_setiopolicy_np(i32 $A_0, i32 $A_1, i32 $A_2){}
v0  $I_perror( i8 *$A_0){}
i32  $I_flsll(i64 $A_0){}
v0  $I___builtin_va_end(){}
 i8  *$I_fmtcheck( i8 *$A_0,  i8 *$A_1){}
u64  $I_strtouq( i8 *$I___str, i8 **$I___endptr, i32 $I___base){}
i8  *$I_mkdtemp(i8 *$A_0){}
v0  *$I_reallocf(v0 *$I___ptr, u32  $I___size){}
i32  $I___vsprintf_chk(i8 *$A_0, i32 $A_1, u32  $A_2,  i8 *$A_3, $T_anon_Yl5btd   $A_4){}
i8  *$I_initstate(u32 $A_0, i8 *$A_1, u32  $A_2){}
v0  $I_setbuffer($T___sFILE *$A_0, i8 *$A_1, i32 $A_2){}
v0  $I_swab( v0 *$A_0, v0 *$A_1, i32   $A_2){}
i32     $I_getppid(v0 $A_0){}
i32  $I_ttyname_r(i32 $A_0, i8 *$A_1, u32  $A_2){}
i32  $I_printf( i8 *$A_0){}
i8  *$I_getbsize(i32 *$A_0, i32 *$A_1){}
i32  $I_a64l( i8 *$A_0){}
i8  *$I_strcasestr( i8 *$I___big,  i8 *$I___little){}
i32    $I_pwrite(i32 $I___fd,  v0 *$I___buf, u32  $I___nbyte, i64    $I___offset){}
 i8  *$I_mktemp(i8 *$A_0){}
   v0  *$I_brk( v0 *$A_0){}
i32  $I_fputs( i8 *$A_0, $T___sFILE *$A_1){}
i32  $I_ferror($T___sFILE *$A_0){}
i32  $I_creat( i8 *$A_0, u16    $A_1){}
u32     $I_geteuid(v0 $A_0){}
i32  $I_remove( i8 *$A_0){}
i32  $I_scanf( i8 *$A_0){}
i8  *$I_ctermid(i8 *$A_0){}
i32  $I_getdirentriesattr(i32 $A_0, v0 *$A_1, v0 *$A_2, u32  $A_3, u32 *$A_4, u32 *$A_5, u32 *$A_6, u32 $A_7){}
i32    $I_readlink( i8 *$A_0, i8 *$A_1, u32  $A_2){}
v0  $I_srand(u32 $A_0){}
i32  $I_vfscanf($T___sFILE *$I___stream,  i8 *$I___format, $T_anon_Yl5btd   $A_2){}
i32  $I_getlogin_r(i8 *$A_0, u32  $A_1){}
i32  $I_mkpath_np( i8 *$I_path, u16    $I_omode){}
i32  $I_sradixsort( u8 **$I___base, i32 $I___nel,  u8 *$I___table, u32 $I___endbyte){}
i32  $I_getdtablesize(v0 $A_0){}
i32  $I_sysconf(i32 $A_0){}
v0  $I_memset_pattern16(v0 *$I___b,  v0 *$I___pattern16, u32  $I___len){}
i32     $I_getpid(v0 $A_0){}
i32  $I_chown( i8 *$A_0, u32    $A_1, u32    $A_2){}
i32  $I_setenv( i8 *$I___name,  i8 *$I___value, i32 $I___overwrite){}
v0  $I_srand48(i32 $A_0){}
i8  *$I_strndup( i8 *$I___s1, u32  $I___n){}
    i32  $I_timingsafe_bcmp( v0 *$I___b1,  v0 *$I___b2, u32  $I___len){}
i32  $I_ftell($T___sFILE *$A_0){}
i32  $I_cgetstr(i8 *$A_0,  i8 *$A_1, i8 **$A_2){}
i32  $I_putchar_unlocked(i32 $A_0){}
i32  $I_fputc(i32 $A_0, $T___sFILE *$A_1){}
i32  $I_getrlimit(i32 $A_0, $T_rlimit *$A_1){}
     i32  $I_system( i8 *$A_0){}
i32  $I_getgrouplist( i8 *$A_0, i32 $A_1, i32 *$A_2, i32 *$A_3){}
i32     $I_getpgrp(v0 $A_0){}
i32  $I_unlockpt(i32 $A_0){}
i32  $I_vprintf( i8 *$A_0, $T_anon_Yl5btd   $A_1){}
i32  $I_setgid(u32    $A_0){}
i32     $I_wait3(i32 *$A_0, i32 $A_1, $T_rusage *$A_2){}
v0  $I_clearerr($T___sFILE *$A_0){}
i32  $I_puts( i8 *$A_0){}
i32  $I_initgroups( i8 *$A_0, i32 $A_1){}
i32  $I_setlinebuf($T___sFILE *$A_0){}
i32  $I_fchownat(i32 $A_0,  i8 *$A_1, u32    $A_2, u32    $A_3, i32 $A_4){}
i32  $I_fpurge($T___sFILE *$A_0){}
v0  $I___builtin_object_size(){}
f64  $I_strtold( i8 *$A_0, i8 **$A_1){}
  i32  $I_sprintf(i8 *$A_0,  i8 *$A_1){}
 i32  $I_iruserok(u32 $A_0, i32 $A_1,  i8 *$A_2,  i8 *$A_3){}
i32     $I_getpgid(i32    $A_0){}
i8  *$I_strerror(i32 $I___errnum){}
i32     $I_setpgrp(v0 $A_0){}
v0  *$I_valloc(u32  $A_0){}
i32  $I_fpathconf(i32 $A_0, i32 $A_1){}
i64  $I_strtoll( i8 *$I___str, i8 **$I___endptr, i32 $I___base){}
$T_anon_SlTB5a  $I_lldiv(i64 $A_0, i64 $A_1){}
i32  $I_chdir( i8 *$A_0){}
i8  *$I_strncpy(i8 *$I___dst,  i8 *$I___src, u32  $I___n){}
i32    $I_read(i32 $A_0, v0 *$A_1, u32  $A_2){}
i32  $I_wctomb(i8 *$A_0, i32  $A_1){}
i32  $I_fseeko($T___sFILE *$I___stream, i64    $I___offset, i32 $I___whence){}
i32  $I_unlinkat(i32 $A_0,  i8 *$A_1, i32 $A_2){}
i32  $I___darwin_check_fd_set_overflow(i32 $A_0,  v0 *$A_1, i32 $A_2){}
i32  $I_cgetustr(i8 *$A_0,  i8 *$A_1, i8 **$A_2){}
i32  $I_tcsetpgrp(i32 $A_0, i32    $A_1){}
i32  $I_strtofflags(i8 **$A_0, u32 *$A_1, u32 *$A_2){}
v0  $I_lcong48(u16 [7]$A_0){}
v0  $I_strmode(i32 $I___mode, i8 *$I___bp){}
i32  $I_fsetpos($T___sFILE *$A_0,  i64    *$A_1){}
i32  $I_bcmp( v0 *$A_0,  v0 *$A_1, u32  $A_2){}
i8  *$I_stpcpy(i8 *$I___dst,  i8 *$I___src){}
i8  *$I_ptsname(i32 $A_0){}
f64  $I_erand48(u16 [3]$A_0){}
i32  $I_vdprintf(i32 $A_0,  i8 *$A_1, $T_anon_Yl5btd   $A_2){}
v0  *$I_memmove(v0 *$I___dst,  v0 *$I___src, u32  $I___len){}
i32  $I_cgetent(i8 **$A_0, i8 **$A_1,  i8 *$A_2){}
v0  *$I_realloc(v0 *$I___ptr, u32  $I___size){}
i32   $I_memset_s(v0 *$I___s, u32   $I___smax, i32 $I___c, u32   $I___n){}
i32     $I_tcgetpgrp(i32 $A_0){}
i32  $I_reboot(i32 $A_0){}
v0  $I_setbuf($T___sFILE *$A_0, i8 *$A_1){}
v0  $I_memset_pattern4(v0 *$I___b,  v0 *$I___pattern4, u32  $I___len){}
i8  *$I_stpncpy(i8 *$I___dst,  i8 *$I___src, u32  $I___n){}
i64  $I_strtonum( i8 *$I___numstr, i64 $I___minval, i64 $I___maxval,  i8 **$I___errstrp){}
i32  $I_truncate( i8 *$A_0, i64    $A_1){}
i32  $I_acct( i8 *$A_0){}
u32   $I_strxfrm(i8 *$I___s1,  i8 *$I___s2, u32  $I___n){}
i32  $I_lockf(i32 $A_0, i32 $A_1, i64    $A_2){}
i32  $I_nice(i32 $A_0){}
i32  $I_setruid(u32    $A_0){}
i32  $I_mbtowc(i32  *$A_0,  i8 *$A_1, u32  $A_2){}
$T___sFILE  *$I_freopen( i8 *$A_0,  i8 *$A_1, $T___sFILE *$A_2){}
v0  *$I_memchr( v0 *$I___s, i32 $I___c, u32  $I___n){}
i32  $I_faccessat(i32 $A_0,  i8 *$A_1, i32 $A_2, i32 $A_3){}
i32  $I_ungetc(i32 $A_0, $T___sFILE *$A_1){}
i32  $I_setrgid(u32    $A_0){}
v0  $I_memset_pattern8(v0 *$I___b,  v0 *$I___pattern8, u32  $I___len){}
i32  $I_radixsort( u8 **$I___base, i32 $I___nel,  u8 *$I___table, u32 $I___endbyte){}
v0  $I_bzero(v0 *$A_0, u32  $A_1){}
i32  $I_rmdir( i8 *$A_0){}
i8  *$I_strchr( i8 *$I___s, i32 $I___c){}
i32  $I_setattrlist( i8 *$A_0, v0 *$A_1, v0 *$A_2, u32  $A_3, u32 $A_4){}
i32  $I_atol( i8 *$A_0){}
  i8  *$I_tmpnam(i8 *$A_0){}
i32  $I_open( i8 *$A_0, i32 $A_1){}
i32  $I_vsnprintf(i8 *$I___str, u32  $I___size,  i8 *$I___format, $T_anon_Yl5btd   $A_3){}
v0  $I___builtin_bswap64(){}
i32  $I_labs(i32 $A_0){}
i8  *$I_getlogin(v0 $A_0){}
 i32  $I_ruserok( i8 *$A_0, i32 $A_1,  i8 *$A_2,  i8 *$A_3){}
i32  $I_fchown(i32 $A_0, u32    $A_1, u32    $A_2){}
i32  $I_feof($T___sFILE *$A_0){}
i32  $I___snprintf_chk(i8 *$A_0, u32  $A_1, i32 $A_2, u32  $A_3,  i8 *$A_4){}
i32    $I_pread(i32 $I___fd, v0 *$I___buf, u32  $I___nbyte, i64    $I___offset){}
i32  $I_pause(v0 $A_0){}
v0  $I_bcopy( v0 *$A_0, v0 *$A_1, u32  $A_2){}
i32  $I_issetugid(v0 $A_0){}
i8  *$I_devname(i32    $A_0, u16    $A_1){}
i32  $I_setwgroups_np(i32 $A_0,  u8   $A_1){}
i32  $I_accessx_np( $T_accessx_descriptor *$A_0, u32  $A_1, i32 *$A_2, u32    $A_3){}
i32  $I_setdomainname( i8 *$A_0, i32 $A_1){}
v0  $I_srandomdev(v0 $A_0){}
i64  $I_atoll( i8 *$A_0){}
v0  $I_sync(v0 $A_0){}
i32  $I_vscanf( i8 *$I___format, $T_anon_Yl5btd   $A_1){}
v0  $I___builtin_va_start(){}
v0  *$I_calloc(u32  $I___count, u32  $I___size){}
i8  *$I_strtok_r(i8 *$I___str,  i8 *$I___sep, i8 **$I___lasts){}
i32  $I___swbuf(i32 $A_0, $T___sFILE *$A_1){}
i32  $I_fsync(i32 $A_0){}
i32  $I_mkostemp(i8 *$I_path, i32 $I_oflags){}
i32  $I_fileno($T___sFILE *$A_0){}
v0  $I___builtin_bswap32(){}
i32  $I_gethostuuid(u8   $A_0,  $T_timespec *$A_1){}
$T_anon_o7pa9c  $I_ldiv(i32 $A_0, i32 $A_1){}
i32  $I_execlp( i8 *$I___file,  i8 *$I___arg0){}
i32  $I_getloadavg(f64 *$A_0, i32 $A_1){}
v0  $I_abort(v0 $A_0){}
 i32  $I_rresvport_af(i32 *$A_0, i32 $A_1){}
i32  $I_nrand48(u16 [3]$A_0){}
i32  $I_setreuid(u32    $A_0, u32    $A_1){}
i32  $I_execve( i8 *$I___file, i8 **$I___argv, i8 **$I___envp){}
i32  $I_posix_memalign(v0 **$I___memptr, u32  $I___alignment, u32  $I___size){}
i32  $I_cgetnum(i8 *$A_0,  i8 *$A_1, i32 *$A_2){}
i32  $I_rename( i8 *$I___old,  i8 *$I___new){}
v0  $I_endusershell(v0 $A_0){}
i32  $I_symlink( i8 *$A_0,  i8 *$A_1){}
i32  $I_revoke( i8 *$A_0){}
i32  $I_mkstemp(i8 *$A_0){}
i32  $I_ffsctl(i32 $A_0, u32 $A_1, v0 *$A_2, u32 $A_3){}
i32  $I_setgroups(i32 $A_0,  u32    *$A_1){}
i32  $I_isatty(i32 $A_0){}
i32  $I_getattrlistat(i32 $A_0,  i8 *$A_1, v0 *$A_2, v0 *$A_3, u32  $A_4, u32 $A_5){}
u64  $I_strtoull( i8 *$I___str, i8 **$I___endptr, i32 $I___base){}
i8  *$I_gcvt(f64 $A_0, i32 $A_1, i8 *$A_2){}
v0  $I_free(v0 *$A_0){}
i32  $I_setregid(u32    $A_0, u32    $A_1){}
 i32  $I_rresvport(i32 *$A_0){}
v0  $I___builtin___memmove_chk(){}
i8  *$I_l64a(i32 $A_0){}
v0  *$I_memmem( v0 *$I___big, u32  $I___big_len,  v0 *$I___little, u32  $I___little_len){}
v0  $I_encrypt(i8 *$A_0, i32 $A_1){}
i32  $I_fsctl( i8 *$A_0, u32 $A_1, v0 *$A_2, u32 $A_3){}
i8  *$I_setstate( i8 *$A_0){}
u32   $I_arc4random_uniform(u32  $I___upper_bound){}
$T_anon_CKEc5Y  $I_div(i32 $A_0, i32 $A_1){}
i8  *$I_crypt( i8 *$A_0,  i8 *$A_1){}
i32  $I_symlinkat( i8 *$A_0, i32 $A_1,  i8 *$A_2){}
v0  *$I_memccpy(v0 *$I___dst,  v0 *$I___src, i32 $I___c, u32  $I___n){}
$T___sFILE  *$I_open_memstream(i8 **$I___bufp, u32  *$I___sizep){}
u32     $I_getgid(v0 $A_0){}
i32  $I_rand(v0 $A_0){}
i32  $I___svfscanf($T___sFILE *$A_0,  i8 *$A_1, $T_anon_Yl5btd   $A_2){}
i32  $I_unlink( i8 *$A_0){}
i8  *$I_getpass( i8 *$A_0){}
i32  $I_exchangedata( i8 *$A_0,  i8 *$A_1, u32 $A_2){}
  i8  *$I_tempnam( i8 *$I___dir,  i8 *$I___prefix){}
i32  $I_putc(i32 $A_0, $T___sFILE *$A_1){}
i32  $I_execvP( i8 *$I___file,  i8 *$I___searchpath, i8 **$I___argv){}
v0  $I__Exit(i32 $A_0){}
i32    $I_write(i32 $I___fd,  v0 *$I___buf, u32  $I___nbyte){}
i8  *$I_rindex( i8 *$A_0, i32 $A_1){}
v0  $I___builtin___memset_chk(){}
i32  $I_getsgroups_np(i32 *$A_0, u8   $A_1){}
v0  *$I_alloca(u32  $A_0){}
$T___sFILE  *$I_fmemopen(v0 *$I___buf, u32  $I___size,  i8 *$I___mode){}
v0  $I_setusershell(v0 $A_0){}
i8  *$I_strnstr( i8 *$I___big,  i8 *$I___little, u32  $I___len){}
i32  $I_strcoll( i8 *$I___s1,  i8 *$I___s2){}
i32  $I_fsync_volume_np(i32 $A_0, i32 $A_1){}
i32  $I_getw($T___sFILE *$A_0){}
i32  $I_unwhiteout( i8 *$A_0){}
i32  $I_fls(i32 $A_0){}
i32  $I_execvp( i8 *$I___file, i8 **$I___argv){}
i32  $I_fchdir(i32 $A_0){}
i32  $I_strtol( i8 *$I___str, i8 **$I___endptr, i32 $I___base){}
i8  *$I_cgetcap(i8 *$A_0,  i8 *$A_1, i32 $A_2){}
i32  $I_getdomainname(i8 *$A_0, i32 $A_1){}
i32  $I_sethostname( i8 *$A_0, i32 $A_1){}
i32  $I_fseek($T___sFILE *$A_0, i32 $A_1, i32 $A_2){}
i32  *$I___error(v0 $A_0){}
i32  $I_setpgid(i32    $A_0, i32    $A_1){}
i32     $I_wait(i32 *$A_0){}
i32  $I_ffs(i32 $A_0){}
i32  $I_cgetmatch( i8 *$A_0,  i8 *$A_1){}
i32  $I_seteuid(u32    $A_0){}
i32    $I_getline(i8 **$I___linep, u32  *$I___linecapp, $T___sFILE *$I___stream){}
i32  $I_setvbuf($T___sFILE *$A_0, i8 *$A_1, i32 $A_2, u32  $A_3){}
i8  *$I_strcat(i8 *$I___s1,  i8 *$I___s2){}
 i8  *$I_gets(i8 *$A_0){}
i8  *$I_ttyname(i32 $A_0){}
i32  $I_vsscanf( i8 *$I___str,  i8 *$I___format, $T_anon_Yl5btd   $A_2){}
i32  $I_daemon(i32 $A_0, i32 $A_1){}
i32  $I_undelete( i8 *$A_0){}
i32  $I_getpriority(i32 $A_0, u32    $A_1){}
i32  $I_mkstemps(i8 *$A_0, i32 $A_1){}
u32   $I_strlcpy(i8 *$I___dst,  i8 *$I___source, u32  $I___size){}
i32     $I_getsid(i32    $A_0){}
i32  $I_sync_volume_np( i8 *$A_0, i32 $A_1){}
i8  *$I_realpath( i8 *$A_0, i8 *$A_1){}
i64     $I_ftello($T___sFILE *$I___stream){}
$T___sFILE  *$I_fopen( i8 *$I___filename,  i8 *$I___mode){}
i32    $I_getdelim(i8 **$I___linep, u32  *$I___linecapp, i32 $I___delimiter, $T___sFILE *$I___stream){}
i32  $I_setegid(u32    $A_0){}
i8  *$I_fgetln($T___sFILE *$A_0, u32  *$A_1){}
i32  $I_mkstempsat_np(i32 $I_dfd, i8 *$I_path, i32 $I_slen){}
i32  $I_renameat(i32 $A_0,  i8 *$A_1, i32 $A_2,  i8 *$A_3){}
i32  $I_lchown( i8 *$A_0, u32    $A_1, u32    $A_2){}
i32  $I_ffsl(i32 $A_0){}
i32  $I_mkostemps(i8 *$I_path, i32 $I_slen, i32 $I_oflags){}
i32  $I_setuid(u32    $A_0){}
v0  $I_srandom(u32 $A_0){}
    i32  $I_syscall(i32 $A_0){}
i32  $I_usleep(u32    $A_0){}
v0  *$I_setmode( i8 *$A_0){}
i32    $I_readlinkat(i32 $A_0,  i8 *$A_1, i8 *$A_2, u32  $A_3){}
i32  $I_link( i8 *$A_0,  i8 *$A_1){}
i32  $I_mknod( i8 *$A_0, u16    $A_1, i32    $A_2){}
i32  $I_ffsll(i64 $A_0){}
u32   $I_strlcat(i8 *$I___dst,  i8 *$I___source, u32  $I___size){}
i32  $I_abs(i32 $A_0){}
i32  $I___srget($T___sFILE *$A_0){}
 i32  $I_iruserok_sa( v0 *$A_0, i32 $A_1, i32 $A_2,  i8 *$A_3,  i8 *$A_4){}
i32  $I_snprintf(i8 *$I___str, u32  $I___size,  i8 *$I___format){}
i32  $I_putc_unlocked(i32 $A_0, $T___sFILE *$A_1){}
i32  $I___sprintf_chk(i8 *$A_0, i32 $A_1, u32  $A_2,  i8 *$A_3){}
i32  $I_pclose($T___sFILE *$A_0){}
i32  $I_cgetset( i8 *$A_0){}
i32  $I_fprintf($T___sFILE *$A_0,  i8 *$A_1){}
u32  $I_alarm(u32 $A_0){}
i8  *$I_getwd(i8 *$A_0){}
i32  $I_fgetc($T___sFILE *$A_0){}
i32  $I_pipe(i32 [2]$A_0){}
i32  $I_setlogin( i8 *$A_0){}
i32  $I_getc($T___sFILE *$A_0){}
 i32  $I_pthread_setugid_np(u32    $A_0, u32    $A_1){}
i32  $I_ttyslot(v0 $A_0){}
 i32  $I_rcmd(i8 **$A_0, i32 $A_1,  i8 *$A_2,  i8 *$A_3,  i8 *$A_4, i32 *$A_5){}
i8  *$I_strstr( i8 *$I___big,  i8 *$I___little){}
i64  $I_llabs(i64 $A_0){}
i32  $I_mrand48(v0 $A_0){}
u32   $I_mbstowcs(i32  *$A_0,  i8 *$A_1, u32  $A_2){}
i8  *$I_ecvt(f64 $A_0, i32 $A_1, i32 *$A_2, i32 *$A_3){}
u32   $I_fread(v0 *$I___ptr, u32  $I___size, u32  $I___nitems, $T___sFILE *$I___stream){}
i32  $I_execle( i8 *$I___path,  i8 *$I___arg0){}
i32  $I_strncasecmp( i8 *$A_0,  i8 *$A_1, u32  $A_2){}
v0  $I___builtin___memcpy_chk(){}
i32  $I_mkpathat_np(i32 $I_dfd,  i8 *$I_path, u16    $I_omode){}
i8  *$I_getcwd(i8 *$A_0, u32  $A_1){}
u32  $I_strtoul( i8 *$I___str, i8 **$I___endptr, i32 $I___base){}
i32  $I_putenv(i8 *$A_0){}
v0  $I__exit(i32 $A_0){}
i32  $I_ftruncate(i32 $A_0, i64    $A_1){}
i32  $I_lrand48(v0 $A_0){}
i8  *$I_strcpy(i8 *$I___dst,  i8 *$I___src){}
i32  $I_atoi( i8 *$A_0){}
i32  $I_getopt(i32 $A_0, i8 **$A_1,  i8 *$A_2){}
i32  $I_close(i32 $A_0){}
i32  $I_fsetattrlist(i32 $A_0, v0 *$A_1, v0 *$A_2, u32  $A_3, u32 $A_4){}
v0  $I_sethostid(i32 $A_0){}
i8  *$I_strsep(i8 **$I___stringp,  i8 *$I___delim){}
i32  $I_getchar(v0 $A_0){}
i32  $I_cgetfirst(i8 **$A_0, i8 **$A_1){}
v0  $I_exit(i32 $A_0){}
i32  $I_nfssvc(i32 $A_0, v0 *$A_1){}
u32   $I_wcstombs(i8 *$A_0,  i32  *$A_1, u32  $A_2){}
i32  $I_vfprintf($T___sFILE *$A_0,  i8 *$A_1, $T_anon_Yl5btd   $A_2){}
i32  $I_pselect(i32 $A_0, $T_fd_set *$A_1, $T_fd_set *$A_2, $T_fd_set *$A_3,  $T_timespec *$A_4,  u32    *$A_5){}
i32  $I_ptsname_r(i32 $I_fildes, i8 *$I_buffer, u32  $I_buflen){}
 i32  $I_rcmd_af(i8 **$A_0, i32 $A_1,  i8 *$A_2,  i8 *$A_3,  i8 *$A_4, i32 *$A_5, i32 $A_6){}
i32  $I_mkstemp_dprotected_np(i8 *$I_path, i32 $I_dpclass, i32 $I_dpflags){}
i32  $I_getiopolicy_np(i32 $A_0, i32 $A_1){}
i32  $I_random(v0 $A_0){}
i32  $I_fcntl(i32 $A_0, i32 $A_1){}
i8  *$I_mkdtempat_np(i32 $I_dfd, i8 *$I_path){}
i32  $I_fflush($T___sFILE *$A_0){}
i32  $I_memcmp( v0 *$I___s1,  v0 *$I___s2, u32  $I___n){}
u32   $I_arc4random(v0 $A_0){}
v0  $I_funlockfile($T___sFILE *$A_0){}
i32     $I_wait4(i32    $A_0, i32 *$A_1, i32 $A_2, $T_rusage *$A_3){}
v0  $I_arc4random_addrandom(u8 *$A_0, i32 $A_1){}
i32  $I_dprintf(i32 $A_0,  i8 *$A_1){}
i8  *$I_getusershell(v0 $A_0){}
u32     $I_getegid(v0 $A_0){}
i32  $I_pthread_getugid_np(u32    *$A_0, u32    *$A_1){}
i32  $I_getpeereid(i32 $A_0, u32    *$A_1, u32    *$A_2){}
v0  $I_flockfile($T___sFILE *$A_0){}
i32  $I_putchar(i32 $A_0){}
i8  *$I_strtok(i8 *$I___str,  i8 *$I___sep){}
i8  *$I_strsignal(i32 $I___sig){}
i32  $I_strcasecmp( i8 *$A_0,  i8 *$A_1){}
i32  $I_setpriority(i32 $A_0, u32    $A_1, i32 $A_2){}
$T___sFILE  *$I_fdopen(i32 $A_0,  i8 *$A_1){}
v0  *$I_memcpy(v0 *$I___dst,  v0 *$I___src, u32  $I___n){}
i32  $I_ftrylockfile($T___sFILE *$A_0){}
i32  $I_mkostempsat_np(i32 $I_dfd, i8 *$I_path, i32 $I_slen, i32 $I_oflags){}
i32  $I_swapon( i8 *$A_0){}
u32   $I_strcspn( i8 *$I___s,  i8 *$I___charset){}
i32  $I_getchar_unlocked(v0 $A_0){}
f64  $I_atof( i8 *$A_0){}
u16  *$I_seed48(u16 [3]$A_0){}
i32     $I_setsid(v0 $A_0){}
i32  $I_strncmp( i8 *$I___s1,  i8 *$I___s2, u32  $I___n){}
i8  *$I_fgets(i8 *$A_0, i32 $A_1, $T___sFILE *$A_2){}
i8  *$I_index( i8 *$A_0, i32 $A_1){}
i32  $I_gethostid(v0 $A_0){}
v0  $I_arc4random_stir(v0 $A_0){}
i32  $I_execv( i8 *$I___path, i8 **$I___argv){}
i32  $I_putw(i32 $A_0, $T___sFILE *$A_1){}
i32  $I_asprintf(i8 **$A_0,  i8 *$A_1){}
i32     $I_waitpid(i32    $A_0, i32 *$A_1, i32 $A_2){}
i32  $I_posix_openpt(i32 $A_0){}
i32  $I_rand_r(u32 *$A_0){}
i32  $I_grantpt(i32 $A_0){}
i32    $I_freadlink(i32 $A_0, i8 *$A_1, u32  $A_2){}
i32  $I_getpagesize(v0 $A_0){}
f64  $I_strtod( i8 *$A_0, i8 **$A_1){}
v0  *$I_memset(v0 *$I___b, i32 $I___c, u32  $I___len){}
i32  $I_dup(i32 $A_0){}
i32  $I_jrand48(u16 [3]$A_0){}
i32  $I_renamex_np( i8 *$A_0,  i8 *$A_1, u32 $A_2){}
i32  $I_strcmp( i8 *$I___s1,  i8 *$I___s2){}
i32  $I_execl( i8 *$I___path,  i8 *$I___arg0){}
i32  $I_getattrlist( i8 *$A_0, v0 *$A_1, v0 *$A_2, u32  $A_3, u32 $A_4){}
$T___sFILE  *$I_tmpfile(v0 $A_0){}
i32  $I_pathconf( i8 *$A_0, i32 $A_1){}
i32  $I_chroot( i8 *$A_0){}
  i32  $I_vsprintf(i8 *$A_0,  i8 *$A_1, $T_anon_Yl5btd   $A_2){}
i32  $I_waitid(i32 $A_0, u32    $A_1, $T___siginfo *$A_2, i32 $A_3){}
i8  *$I_getenv( i8 *$A_0){}
i32  $I_cgetnext(i8 **$A_0, i8 **$A_1){}
i8  *$I_strrchr( i8 *$I___s, i32 $I___c){}
i64  $I_strtoq( i8 *$I___str, i8 **$I___endptr, i32 $I___base){}
   v0  *$I_sbrk(i32 $A_0){}
i32  $I_gethostname(i8 *$A_0, u32  $A_1){}
i32  $I_getrusage(i32 $A_0, $T_rusage *$A_1){}
i32  $I_select(i32 $A_0, $T_fd_set *$A_1, $T_fd_set *$A_2, $T_fd_set *$A_3, $T_timeval *$A_4){}
v0  $I_arc4random_buf(v0 *$I___buf, u32  $I___nbytes){}
v0  *$I_aligned_alloc(u32  $I___alignment, u32  $I___size){}
i32  $I_add_profil(i8 *$A_0, u32  $A_1, u32 $A_2, u32 $A_3){}
i32  $I_dup2(i32 $A_0, i32 $A_1){}
 i8  *$I_getprogname(v0 $A_0){}
i8  *$I_ctermid_r(i8 *$A_0){}
i32  $I_setattrlistat(i32 $A_0,  i8 *$A_1, v0 *$A_2, v0 *$A_3, u32  $A_4, u32  $A_5){}
i32     $I_fork(v0 $A_0){}
v0  *$I_malloc(u32  $I___size){}
f64  $I_drand48(v0 $A_0){}
i64     $I_lseek(i32 $A_0, i64    $A_1, i32 $A_2){}
 i32     $I_vfork(v0 $A_0){}
i32  $I_rpmatch( i8 *$A_0){}
$T___sFILE  *$I_popen( i8 *$A_0,  i8 *$A_1){}
i32  $I___vsnprintf_chk(i8 *$A_0, u32  $A_1, i32 $A_2, u32  $A_3,  i8 *$A_4, $T_anon_Yl5btd   $A_5){}
i32  $I_profil(i8 *$A_0, u32  $A_1, u32 $A_2, u32 $A_3){}
v0  $I_rewind($T___sFILE *$A_0){}
i32  $I_vasprintf(i8 **$A_0,  i8 *$A_1, $T_anon_Yl5btd   $A_2){}
i8  *$I_strpbrk( i8 *$I___s,  i8 *$I___charset){}
i32  $I_unsetenv( i8 *$A_0){}
i32  $I_searchfs( i8 *$A_0, $T_fssearchblock *$A_1, u32 *$A_2, u32 $A_3, u32 $A_4, $T_searchstate *$A_5){}
i32  $I_flsl(i32 $A_0){}
u32  $I_sleep(u32 $A_0){}
i32  $I_fscanf($T___sFILE *$A_0,  i8 *$A_1){}
u32   $I_strlen( i8 *$I___s){}
i32  $I_strerror_r(i32 $I___errnum, i8 *$I___strerrbuf, u32  $I___buflen){}
i8  *$I_fcvt(f64 $A_0, i32 $A_1, i32 *$A_2, i32 *$A_3){}
i8  *$I_devname_r(i32    $A_0, u16    $A_1, i8 *$I_buf, i32 $I_len){}
    i32  $I_strsignal_r(i32 $I___sig, i8 *$I___strsignalbuf, u32  $I___buflen){}
u16     $I_getmode( v0 *$A_0, u16    $A_1){}
i8  *$I_strdup( i8 *$I___s1){}
u32     $I_getuid(v0 $A_0){}
i32  $I_setsgroups_np(i32 $A_0,  u8   $A_1){}
i32  $I_setrlimit(i32 $A_0,  $T_rlimit *$A_1){}
i8  *$I_fflagstostr(u32 $A_0){}
v0  $I_setkey( i8 *$A_0){}
i32  $I_fgetattrlist(i32 $A_0, v0 *$A_1, v0 *$A_2, u32  $A_3, u32 $A_4){}

// top-level var decls:
  $T_config_s  [10]$I_configuration_table;
  $T_ct_data_s  [0]$I_static_ltree;
  $T_ct_data_s  [30]$I_static_dtree;
  $T_static_tree_desc_s  $I_static_bl_desc;
  $T_static_tree_desc_s  $I_static_d_desc;
  $T_static_tree_desc_s  $I_static_l_desc;
  i32  [19]$I_extra_blbits;
  i32  [29]$I_base_length;
  i32  [29]$I_extra_lbits;
  i32  [30]$I_base_dist;
  i32  [30]$I_extra_dbits;
  u32   *$I_crc_big_table;
  u32   *$I_crc_table;
  u32   *$I_x2n_table;
  u32   *[256]$I_crc_braid_big_table;
  u32   *[256]$I_crc_braid_table;
  u8   [19]$I_bl_order;
 i32  $I_sys_nerr;
 i8  *$I_deflate_copyright = (" deflate 1.3.1.1 Copyright 1995-2024 Jean-loup Gailly and Mark Adler ");
 i8  *$I_inflate_copyright = (" inflate 1.3.1.1 Copyright 1995-2024 Mark Adler ");
 i8  **$I_sys_errlist;
 u8   [0]$I__length_code;
 u8   [512]$I__dist_code;
$T___sFILE  *$I___stderrp;
$T___sFILE  *$I___stdinp;
$T___sFILE  *$I___stdoutp;
i32  $I___mb_cur_max;
i32  $I_opterr;
i32  $I_optind;
i32  $I_optopt;
i32  $I_optreset;
i8  *$I_optarg;
i8  *$I_suboptarg;
i8  *[10]$I_z_errmsg;

// other code:
  u16  $I__OSSwapInt16(u16  $I__data)
{
return ([u16  ](((($I__data)<<(8))|(($I__data)>>(8)))));
}

  u32  $I__OSSwapInt32(u32  $I__data)
{
(($I__data)=($I___builtin_bswap32(($I__data))));
return ($I__data);
}

  u64  $I__OSSwapInt64(u64  $I__data)
{
return ($I___builtin_bswap64(($I__data)));
}

  u16  $I_OSReadSwapInt16(  v0 *$I__base, u32  $I__offset)
{
return ($I__OSSwapInt16((([$T__OSUnalignedU16 *]((([u32  ](($I__base)))+($I__offset))))->$I___val)));
}

  u32  $I_OSReadSwapInt32(  v0 *$I__base, u32  $I__offset)
{
return ($I__OSSwapInt32((([$T__OSUnalignedU32 *]((([u32  ](($I__base)))+($I__offset))))->$I___val)));
}

  u64  $I_OSReadSwapInt64(  v0 *$I__base, u32  $I__offset)
{
return ($I__OSSwapInt64((([$T__OSUnalignedU64 *]((([u32  ](($I__base)))+($I__offset))))->$I___val)));
}

  v0 $I_OSWriteSwapInt16( v0 *$I__base, u32  $I__offset, u16  $I__data)
{
((([$T__OSUnalignedU16 *]((([u32  ](($I__base)))+($I__offset))))->$I___val)=($I__OSSwapInt16(($I__data))));
}

  v0 $I_OSWriteSwapInt32( v0 *$I__base, u32  $I__offset, u32  $I__data)
{
((([$T__OSUnalignedU32 *]((([u32  ](($I__base)))+($I__offset))))->$I___val)=($I__OSSwapInt32(($I__data))));
}

  v0 $I_OSWriteSwapInt64( v0 *$I__base, u32  $I__offset, u64  $I__data)
{
((([$T__OSUnalignedU64 *]((([u32  ](($I__base)))+($I__offset))))->$I___val)=($I__OSSwapInt64(($I__data))));
}

  i32 $I___darwin_check_fd_set(i32 $I__a,  v0 *$I__b)
{
return ($I___darwin_check_fd_set_overflow(($I__a), ($I__b), (0)));
}

  i32 $I___darwin_fd_isset(i32 $I__fd,  $T_fd_set *$I__p)
{
if (($I___darwin_check_fd_set(($I__fd), ([ v0 *](($I__p)))))) {
return (((($I__p)->$I_fds_bits)[(([u32 ](($I__fd)))/((0)*(8)))])&([i32  ]((([u32 ]((1)))<<(([u32 ](($I__fd)))%((0)*(8)))))));
}
return (0);
}

  v0 $I___darwin_fd_set(i32 $I__fd, $T_fd_set *$I__p)
{
if (($I___darwin_check_fd_set(($I__fd), ([ v0 *](($I__p)))))) {
(((($I__p)->$I_fds_bits)[(([u32 ](($I__fd)))/((0)*(8)))])|=([i32  ]((([u32 ]((1)))<<(([u32 ](($I__fd)))%((0)*(8)))))));
}
}

  v0 $I___darwin_fd_clr(i32 $I__fd, $T_fd_set *$I__p)
{
if (($I___darwin_check_fd_set(($I__fd), ([ v0 *](($I__p)))))) {
(((($I__p)->$I_fds_bits)[(([u32 ](($I__fd)))/((0)*(8)))])&=(~([i32  ]((([u32 ]((1)))<<(([u32 ](($I__fd)))%((0)*(8))))))));
}
}

u32  $I_adler32_z(u32  $I_adler,  u8   *$I_buf, u32   $I_len)
{
u32  $I_sum2;
u32  $I_n;
(($I_sum2)=((($I_adler)>>(16))&(65535)));
(($I_adler)&=(65535));
if ((($I_len)==(1))) {
(($I_adler)+=(($I_buf)[(0)]));
if ((($I_adler)>=(65521))) {
(($I_adler)-=(65521));
}
(($I_sum2)+=($I_adler));
if ((($I_sum2)>=(65521))) {
(($I_sum2)-=(65521));
}
return (($I_adler)|(($I_sum2)<<(16)));
}
if ((($I_buf)==(0))) {
return (1);
}
if ((($I_len)<(16))) {
while ((($I_len)--)) {
(($I_adler)+=(*(($I_buf)++)));
(($I_sum2)+=($I_adler));
}
if ((($I_adler)>=(65521))) {
(($I_adler)-=(65521));
}
(($I_sum2)%=(65521));
return (($I_adler)|(($I_sum2)<<(16)));
}
while ((($I_len)>=(5552))) {
(($I_len)-=(5552));
(($I_n)=((5552)/(16)));
while ((--($I_n))) {
(($I_adler)+=(($I_buf)[(0)]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[((0)+(1))]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[((0)+(2))]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[(((0)+(2))+(1))]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[((0)+(4))]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[(((0)+(4))+(1))]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[(((0)+(4))+(2))]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[((((0)+(4))+(2))+(1))]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[(8)]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[((8)+(1))]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[((8)+(2))]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[(((8)+(2))+(1))]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[((8)+(4))]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[(((8)+(4))+(1))]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[(((8)+(4))+(2))]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[((((8)+(4))+(2))+(1))]));
(($I_sum2)+=($I_adler));
(($I_buf)+=(16));
}
(($I_adler)%=(65521));
(($I_sum2)%=(65521));
}
if (($I_len)) {
while ((($I_len)>=(16))) {
(($I_len)-=(16));
(($I_adler)+=(($I_buf)[(0)]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[((0)+(1))]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[((0)+(2))]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[(((0)+(2))+(1))]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[((0)+(4))]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[(((0)+(4))+(1))]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[(((0)+(4))+(2))]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[((((0)+(4))+(2))+(1))]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[(8)]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[((8)+(1))]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[((8)+(2))]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[(((8)+(2))+(1))]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[((8)+(4))]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[(((8)+(4))+(1))]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[(((8)+(4))+(2))]));
(($I_sum2)+=($I_adler));
(($I_adler)+=(($I_buf)[((((8)+(4))+(2))+(1))]));
(($I_sum2)+=($I_adler));
(($I_buf)+=(16));
}
while ((($I_len)--)) {
(($I_adler)+=(*(($I_buf)++)));
(($I_sum2)+=($I_adler));
}
(($I_adler)%=(65521));
(($I_sum2)%=(65521));
}
return (($I_adler)|(($I_sum2)<<(16)));
}

u32  $I_adler32(u32  $I_adler,  u8   *$I_buf, u32  $I_len)
{
return ($I_adler32_z(($I_adler), ($I_buf), ($I_len)));
}

 u32  $I_adler32_combine_(u32  $I_adler1, u32  $I_adler2, i64    $I_len2)
{
u32  $I_sum1;
u32  $I_sum2;
u32  $I_rem;
if ((($I_len2)<(0))) {
return (4294967295);
}
(($I_len2)%=(65521));
(($I_rem)=([u32 ](($I_len2))));
(($I_sum1)=(($I_adler1)&(65535)));
(($I_sum2)=(($I_rem)*($I_sum1)));
(($I_sum2)%=(65521));
(($I_sum1)+=(((($I_adler2)&(65535))+(65521))-(1)));
(($I_sum2)+=(((((($I_adler1)>>(16))&(65535))+((($I_adler2)>>(16))&(65535)))+(65521))-($I_rem)));
if ((($I_sum1)>=(65521))) {
(($I_sum1)-=(65521));
}
if ((($I_sum1)>=(65521))) {
(($I_sum1)-=(65521));
}
if ((($I_sum2)>=(([u32 ]((65521)))<<(1)))) {
(($I_sum2)-=(([u32 ]((65521)))<<(1)));
}
if ((($I_sum2)>=(65521))) {
(($I_sum2)-=(65521));
}
return (($I_sum1)|(($I_sum2)<<(16)));
}

u32  $I_adler32_combine(u32  $I_adler1, u32  $I_adler2, i64    $I_len2)
{
return ($I_adler32_combine_(($I_adler1), ($I_adler2), ($I_len2)));
}

u32  $I_adler32_combine64(u32  $I_adler1, u32  $I_adler2, i64    $I_len2)
{
return ($I_adler32_combine_(($I_adler1), ($I_adler2), ($I_len2)));
}

i32 $I_compress2(u8   *$I_dest, u32   *$I_destLen,  u8   *$I_source, u32  $I_sourceLen, i32 $I_level)
{
$T_z_stream_s   $I_stream;
i32  $I_err;
 u32   $I_max = ([u32  ]((-(1))));
u32   $I_left;
(($I_left)=(*($I_destLen)));
((*($I_destLen))=(0));
((($I_stream).$I_zalloc)=([v0  ]((0))));
((($I_stream).$I_zfree)=([v0  ]((0))));
((($I_stream).$I_opaque)=([v0  ]((0))));
(($I_err)=($I_deflateInit_((&($I_stream)), ($I_level), ("1.3.1.1-motley"), ([i32 ]((0))))));
if ((($I_err)!=(0))) {
return ($I_err);
}
((($I_stream).$I_next_out)=($I_dest));
((($I_stream).$I_avail_out)=(0));
((($I_stream).$I_next_in)=([u8   *](($I_source))));
((($I_stream).$I_avail_in)=(0));
while ((($I_err)==(0))) {
if (((($I_stream).$I_avail_out)==(0))) {
(($I_left)-=(($I_stream).$I_avail_out));
}
if (((($I_stream).$I_avail_in)==(0))) {
(($I_sourceLen)-=(($I_stream).$I_avail_in));
}
}
((*($I_destLen))=(($I_stream).$I_total_out));
($I_deflateEnd((&($I_stream))));
}

i32 $I_compress(u8   *$I_dest, u32   *$I_destLen,  u8   *$I_source, u32  $I_sourceLen)
{
return ($I_compress2(($I_dest), ($I_destLen), ($I_source), ($I_sourceLen), (-(1))));
}

u32  $I_compressBound(u32  $I_sourceLen)
{
return ((((($I_sourceLen)+(($I_sourceLen)>>(12)))+(($I_sourceLen)>>(14)))+(($I_sourceLen)>>(25)))+(13));
}

 u32  $I_multmodp(u32  $I_a, u32  $I_b)
{
u32   $I_m;
u32   $I_p;
(($I_m)=(([u32  ]((1)))<<(31)));
(($I_p)=(0));
for (0;1; 0) {
if ((($I_a)&($I_m))) {
(($I_p)^=($I_b));
if (((($I_a)&(($I_m)-(1)))==(0))) {
break;
}
}
(($I_m)>>=(1));
}
return ($I_p);
}

 u32  $I_x2nmodp(i64    $I_n, u32 $I_k)
{
u32   $I_p;
(($I_p)=(([u32  ]((1)))<<(31)));
while (($I_n)) {
if ((($I_n)&(1))) {
(($I_p)=($I_multmodp((($I_x2n_table)[(($I_k)&(31))]), ($I_p))));
}
(($I_n)>>=(1));
(($I_k)++);
}
return ($I_p);
}

 u32  *$I_get_crc_table(v0 $A_0)
{
return ([ u32  *](($I_crc_table)));
}

u32 $I_crc32_z(u32 $I_crc,  u8 *$I_buf, u32   $I_len)
{
u32   $I_val;
u32   $I_crc1;
u32   $I_crc2;
 u32   *$I_word;
u32   $I_val0;
u32   $I_val1;
u32   $I_val2;
u32    $I_last;
u32    $I_last2;
u32    $I_i;
u32    $I_num;
if ((($I_buf)==(0))) {
return (0);
}
(($I_crc)=((~($I_crc))&(4294967295)));
while ((($I_len)&((([u32   ](($I_buf)))&(7))!=(0)))) {
(($I_len)--);
(($I_val)=(*(($I_buf)++)));
}
(($I_word)=([u32   *](($I_buf))));
(($I_num)=(($I_len)>>(3)));
(($I_len)&=(7));
while ((($I_num)>=((3)*(3990)))) {
(($I_crc1)=(0));
(($I_crc2)=(0));
for ((($I_i)=(0));(($I_i)<(3990)); (($I_i)++)) {
(($I_val0)=(($I_word)[($I_i)]));
(($I_val1)=(($I_word)[(($I_i)+(3990))]));
(($I_val2)=(($I_word)[(($I_i)+((2)*(3990)))]));
}
(($I_word)+=((3)*(3990)));
(($I_num)-=((3)*(3990)));
(($I_crc)=(($I_multmodp((2701999372), ($I_crc)))^($I_crc1)));
(($I_crc)=(($I_multmodp((2701999372), ($I_crc)))^($I_crc2)));
}
(($I_last)=(($I_num)/(3)));
if ((($I_last)>=(800))) {
(($I_last2)=(($I_last)<<(1)));
(($I_crc1)=(0));
(($I_crc2)=(0));
for ((($I_i)=(0));(($I_i)<($I_last)); (($I_i)++)) {
(($I_val0)=(($I_word)[($I_i)]));
(($I_val1)=(($I_word)[(($I_i)+($I_last))]));
(($I_val2)=(($I_word)[(($I_i)+($I_last2))]));
}
(($I_word)+=((3)*($I_last)));
(($I_num)-=((3)*($I_last)));
(($I_val)=($I_x2nmodp(($I_last), (6))));
(($I_crc)=(($I_multmodp(($I_val), ($I_crc)))^($I_crc1)));
(($I_crc)=(($I_multmodp(($I_val), ($I_crc)))^($I_crc2)));
}
for ((($I_i)=(0));(($I_i)<($I_num)); (($I_i)++)) {
(($I_val0)=(($I_word)[($I_i)]));
}
(($I_word)+=($I_num));
(($I_buf)=([ u8 *](($I_word))));
while (($I_len)) {
(($I_len)--);
(($I_val)=(*(($I_buf)++)));
}
return (($I_crc)^(4294967295));
}

u32 $I_crc32(u32 $I_crc,  u8 *$I_buf, u32  $I_len)
{
return ($I_crc32_z(($I_crc), ($I_buf), ($I_len)));
}

u32  $I_crc32_combine64(u32  $I_crc1, u32  $I_crc2, i64    $I_len2)
{
return (($I_multmodp(($I_x2nmodp(($I_len2), (3))), ($I_crc1)))^(($I_crc2)&(4294967295)));
}

u32  $I_crc32_combine(u32  $I_crc1, u32  $I_crc2, i64    $I_len2)
{
return ($I_crc32_combine64(($I_crc1), ($I_crc2), ([i64    ](($I_len2)))));
}

u32  $I_crc32_combine_gen64(i64    $I_len2)
{
return ($I_x2nmodp(($I_len2), (3)));
}

u32  $I_crc32_combine_gen(i64    $I_len2)
{
return ($I_crc32_combine_gen64(([i64    ](($I_len2)))));
}

u32  $I_crc32_combine_op(u32  $I_crc1, u32  $I_crc2, u32  $I_op)
{
return (($I_multmodp(($I_op), ($I_crc1)))^(($I_crc2)&(4294967295)));
}

 v0 $I_slide_hash($T_internal_state *$I_s)
{
u32  $I_n;
u32  $I_m;
u16     *$I_p;
u32   $I_wsize = (($I_s)->$I_w_size);
(($I_n)=(($I_s)->$I_hash_size));
(($I_p)=(&((($I_s)->$I_head)[($I_n)])));
while ((--($I_n))) {
(($I_m)=(*(--($I_p))));
}
(($I_n)=($I_wsize));
(($I_p)=(&((($I_s)->$I_prev)[($I_n)])));
while ((--($I_n))) {
(($I_m)=(*(--($I_p))));
}
}

 u32 $I_read_buf($T_z_stream_s  *$I_strm, u8   *$I_buf, u32 $I_size)
{
u32  $I_len = (($I_strm)->$I_avail_in);
if ((($I_len)>($I_size))) {
(($I_len)=($I_size));
}
if ((($I_len)==(0))) {
return (0);
}
((($I_strm)->$I_avail_in)-=($I_len));
($I___builtin___memcpy_chk(($I_buf), (($I_strm)->$I_next_in), ($I_len), ($I___builtin_object_size(($I_buf), (0)))));
if ((((($I_strm)->$I_state)->$I_wrap)==(1))) {
((($I_strm)->$I_adler)=($I_adler32((($I_strm)->$I_adler), ($I_buf), ($I_len))));
}
else {
if ((((($I_strm)->$I_state)->$I_wrap)==(2))) {
((($I_strm)->$I_adler)=($I_crc32((($I_strm)->$I_adler), ($I_buf), ($I_len))));
}
}
((($I_strm)->$I_next_in)+=($I_len));
((($I_strm)->$I_total_in)+=($I_len));
return ($I_len);
}

 v0 $I_fill_window($T_internal_state *$I_s)
{
u32  $I_n;
u32  $I_more;
u32   $I_wsize = (($I_s)->$I_w_size);
while ((((($I_s)->$I_lookahead)<(((258)+(3))+(1)))&(((($I_s)->$I_strm)->$I_avail_in)!=(0)))) {
(($I_more)=([u32 ]((((($I_s)->$I_window_size)-([u32  ]((($I_s)->$I_lookahead))))-([u32  ]((($I_s)->$I_strstart)))))));
if (((0)<=(2))) {
if ((((($I_more)==(0))&((($I_s)->$I_strstart)==(0)))&((($I_s)->$I_lookahead)==(0)))) {
(($I_more)=($I_wsize));
}
else {
if ((($I_more)==([u32 ]((-(1)))))) {
(($I_more)--);
}
}
}
if (((($I_s)->$I_strstart)>=(($I_wsize)+((($I_s)->$I_w_size)-(((258)+(3))+(1)))))) {
($I___builtin___memcpy_chk((($I_s)->$I_window), ((($I_s)->$I_window)+($I_wsize)), (([u32 ](($I_wsize)))-($I_more)), ($I___builtin_object_size((($I_s)->$I_window), (0)))));
((($I_s)->$I_match_start)-=($I_wsize));
((($I_s)->$I_strstart)-=($I_wsize));
((($I_s)->$I_block_start)-=([i32 ](($I_wsize))));
if (((($I_s)->$I_insert)>(($I_s)->$I_strstart))) {
((($I_s)->$I_insert)=(($I_s)->$I_strstart));
}
($I_slide_hash(($I_s)));
(($I_more)+=($I_wsize));
}
if ((((($I_s)->$I_strm)->$I_avail_in)==(0))) {
break;
}
(($I_n)=($I_read_buf((($I_s)->$I_strm), (((($I_s)->$I_window)+(($I_s)->$I_strstart))+(($I_s)->$I_lookahead)), ($I_more))));
((($I_s)->$I_lookahead)+=($I_n));
if ((((($I_s)->$I_lookahead)+(($I_s)->$I_insert))>=(3))) {
u32   $I_str = ((($I_s)->$I_strstart)-(($I_s)->$I_insert));
((($I_s)->$I_ins_h)=((($I_s)->$I_window)[($I_str)]));
((($I_s)->$I_ins_h)=((((($I_s)->$I_ins_h)<<(($I_s)->$I_hash_shift))^((($I_s)->$I_window)[(($I_str)+(1))]))&(($I_s)->$I_hash_mask)));
while ((($I_s)->$I_insert)) {
((($I_s)->$I_ins_h)=((((($I_s)->$I_ins_h)<<(($I_s)->$I_hash_shift))^((($I_s)->$I_window)[((($I_str)+(3))-(1))]))&(($I_s)->$I_hash_mask)));
(((($I_s)->$I_prev)[(($I_str)&(($I_s)->$I_w_mask))])=((($I_s)->$I_head)[(($I_s)->$I_ins_h)]));
(((($I_s)->$I_head)[(($I_s)->$I_ins_h)])=([u16   ](($I_str))));
(($I_str)++);
((($I_s)->$I_insert)--);
if ((((($I_s)->$I_lookahead)+(($I_s)->$I_insert))<(3))) {
break;
}
}
}
}
if (((($I_s)->$I_high_water)<(($I_s)->$I_window_size))) {
u32   $I_curr = ((($I_s)->$I_strstart)+([u32  ]((($I_s)->$I_lookahead))));
u32   $I_init;
if (((($I_s)->$I_high_water)<($I_curr))) {
(($I_init)=((($I_s)->$I_window_size)-($I_curr)));
if ((($I_init)>(258))) {
(($I_init)=(258));
}
($I___builtin___memset_chk(((($I_s)->$I_window)+($I_curr)), (0), ([u32 ](($I_init))), ($I___builtin_object_size(((($I_s)->$I_window)+($I_curr)), (0)))));
((($I_s)->$I_high_water)=(($I_curr)+($I_init)));
}
else {
if (((($I_s)->$I_high_water)<(([u32  ](($I_curr)))+(258)))) {
(($I_init)=((([u32  ](($I_curr)))+(258))-(($I_s)->$I_high_water)));
if ((($I_init)>((($I_s)->$I_window_size)-(($I_s)->$I_high_water)))) {
(($I_init)=((($I_s)->$I_window_size)-(($I_s)->$I_high_water)));
}
($I___builtin___memset_chk(((($I_s)->$I_window)+(($I_s)->$I_high_water)), (0), ([u32 ](($I_init))), ($I___builtin_object_size(((($I_s)->$I_window)+(($I_s)->$I_high_water)), (0)))));
((($I_s)->$I_high_water)+=($I_init));
}
}
}
}

i32 $I_deflateInit_($T_z_stream_s  *$I_strm, i32 $I_level,  i8 *$I_version, i32 $I_stream_size)
{
   return ($I_deflateInit2_(($I_strm), ($I_level), (8), (15), (8), (0), ($I_version), ($I_stream_size)));
}

i32 $I_deflateInit2_($T_z_stream_s  *$I_strm, i32 $I_level, i32 $I_method, i32 $I_windowBits, i32 $I_memLevel, i32 $I_strategy,  i8 *$I_version, i32 $I_stream_size)
{
   $T_internal_state  *$I_s;
i32  $I_wrap = (1);
  i8  *$I_my_version = ("1.3.1.1-motley");
if ((((($I_version)==(0))|((($I_version)[(0)])!=(($I_my_version)[(0)])))|(($I_stream_size)!=(0)))) {
return (-(6));
}
if ((($I_strm)==(0))) {
return (-(2));
}
((($I_strm)->$I_msg)=(0));
if (((($I_strm)->$I_zalloc)==([v0  ]((0))))) {
((($I_strm)->$I_opaque)=([v0  ]((0))));
}
if (((($I_strm)->$I_zfree)==([v0  ]((0))))) {
if ((($I_level)==(-(1)))) {
(($I_level)=(6));
}
}
if ((($I_windowBits)<(0))) {
(($I_wrap)=(0));
if ((($I_windowBits)<(-(15)))) {
return (-(2));
}
(($I_windowBits)=(-($I_windowBits)));
}
else {
if ((($I_windowBits)>(15))) {
(($I_wrap)=(2));
(($I_windowBits)-=(16));
}
}
if (((((((((((($I_memLevel)<(1))|(($I_memLevel)>(9)))|(($I_method)!=(8)))|(($I_windowBits)<(8)))|(($I_windowBits)>(15)))|(($I_level)<(0)))|(($I_level)>(9)))|(($I_strategy)<(0)))|(($I_strategy)>(4)))|((($I_windowBits)==(8))&(($I_wrap)!=(1))))) {
return (-(2));
}
if ((($I_windowBits)==(8))) {
(($I_windowBits)=(9));
}
if ((($I_s)==(0))) {
return (-(4));
}
((($I_strm)->$I_state)=([$T_internal_state *](($I_s))));
((($I_s)->$I_strm)=($I_strm));
((($I_s)->$I_status)=(42));
((($I_s)->$I_wrap)=($I_wrap));
((($I_s)->$I_gzhead)=(0));
((($I_s)->$I_w_bits)=([u32  ](($I_windowBits))));
((($I_s)->$I_w_size)=((1)<<(($I_s)->$I_w_bits)));
((($I_s)->$I_w_mask)=((($I_s)->$I_w_size)-(1)));
((($I_s)->$I_hash_bits)=(([u32  ](($I_memLevel)))+(7)));
((($I_s)->$I_hash_size)=((1)<<(($I_s)->$I_hash_bits)));
((($I_s)->$I_hash_mask)=((($I_s)->$I_hash_size)-(1)));
((($I_s)->$I_hash_shift)=((((($I_s)->$I_hash_bits)+(3))-(1))/(3)));
((($I_s)->$I_high_water)=(0));
((($I_s)->$I_lit_bufsize)=((1)<<(($I_memLevel)+(6))));
((($I_s)->$I_pending_buf_size)=(([u32  ]((($I_s)->$I_lit_bufsize)))*(4)));
if ((((((($I_s)->$I_window)==(0))|((($I_s)->$I_prev)==(0)))|((($I_s)->$I_head)==(0)))|((($I_s)->$I_pending_buf)==(0)))) {
((($I_s)->$I_status)=(666));
($I_deflateEnd(($I_strm)));
return (-(4));
}
((($I_s)->$I_sym_buf)=((($I_s)->$I_pending_buf)+(($I_s)->$I_lit_bufsize)));
((($I_s)->$I_sym_end)=(((($I_s)->$I_lit_bufsize)-(1))*(3)));
((($I_s)->$I_level)=($I_level));
((($I_s)->$I_strategy)=($I_strategy));
((($I_s)->$I_method)=([u8  ](($I_method))));
return ($I_deflateReset(($I_strm)));
}

 i32 $I_deflateStateCheck($T_z_stream_s  *$I_strm)
{
   $T_internal_state  *$I_s;
if ((((($I_strm)==(0))|((($I_strm)->$I_zalloc)==([v0  ]((0)))))|((($I_strm)->$I_zfree)==([v0  ]((0)))))) {
return (1);
}
(($I_s)=(($I_strm)->$I_state));
if ((((($I_s)==(0))|((($I_s)->$I_strm)!=($I_strm)))|(((((((((($I_s)->$I_status)!=(42))&((($I_s)->$I_status)!=(57)))&((($I_s)->$I_status)!=(69)))&((($I_s)->$I_status)!=(73)))&((($I_s)->$I_status)!=(91)))&((($I_s)->$I_status)!=(103)))&((($I_s)->$I_status)!=(113)))&((($I_s)->$I_status)!=(666))))) {
return (1);
}
return (0);
}

i32 $I_deflateSetDictionary($T_z_stream_s  *$I_strm,  u8   *$I_dictionary, u32  $I_dictLength)
{
   $T_internal_state  *$I_s;
u32   $I_str;
u32   $I_n;
i32  $I_wrap;
u32  $I_avail;
u8  *$I_next;
if ((($I_deflateStateCheck(($I_strm)))|(($I_dictionary)==(0)))) {
return (-(2));
}
(($I_s)=(($I_strm)->$I_state));
(($I_wrap)=(($I_s)->$I_wrap));
if ((((($I_wrap)==(2))|((($I_wrap)==(1))&((($I_s)->$I_status)!=(42))))|(($I_s)->$I_lookahead))) {
return (-(2));
}
if ((($I_wrap)==(1))) {
((($I_strm)->$I_adler)=($I_adler32((($I_strm)->$I_adler), ($I_dictionary), ($I_dictLength))));
}
((($I_s)->$I_wrap)=(0));
if ((($I_dictLength)>=(($I_s)->$I_w_size))) {
if ((($I_wrap)==(0))) {
while ((0)) {
(((($I_s)->$I_head)[((($I_s)->$I_hash_size)-(1))])=(0));
($I___builtin___memset_chk(([u8   *]((($I_s)->$I_head))), (0), (([u32 ](((($I_s)->$I_hash_size)-(1))))*(0)), ($I___builtin_object_size(([u8   *]((($I_s)->$I_head))), (0)))));
}
((($I_s)->$I_strstart)=(0));
((($I_s)->$I_block_start)=(0));
((($I_s)->$I_insert)=(0));
}
(($I_dictionary)+=(($I_dictLength)-(($I_s)->$I_w_size)));
(($I_dictLength)=(($I_s)->$I_w_size));
}
(($I_avail)=(($I_strm)->$I_avail_in));
(($I_next)=(($I_strm)->$I_next_in));
((($I_strm)->$I_avail_in)=($I_dictLength));
((($I_strm)->$I_next_in)=([u8   *](($I_dictionary))));
($I_fill_window(($I_s)));
while (((($I_s)->$I_lookahead)>=(3))) {
(($I_str)=(($I_s)->$I_strstart));
(($I_n)=((($I_s)->$I_lookahead)-((3)-(1))));
while ((--($I_n))) {
((($I_s)->$I_ins_h)=((((($I_s)->$I_ins_h)<<(($I_s)->$I_hash_shift))^((($I_s)->$I_window)[((($I_str)+(3))-(1))]))&(($I_s)->$I_hash_mask)));
(((($I_s)->$I_prev)[(($I_str)&(($I_s)->$I_w_mask))])=((($I_s)->$I_head)[(($I_s)->$I_ins_h)]));
(((($I_s)->$I_head)[(($I_s)->$I_ins_h)])=([u16   ](($I_str))));
(($I_str)++);
}
((($I_s)->$I_strstart)=($I_str));
((($I_s)->$I_lookahead)=((3)-(1)));
($I_fill_window(($I_s)));
}
((($I_s)->$I_strstart)+=(($I_s)->$I_lookahead));
((($I_s)->$I_block_start)=([i32 ]((($I_s)->$I_strstart))));
((($I_s)->$I_insert)=(($I_s)->$I_lookahead));
((($I_s)->$I_lookahead)=(0));
((($I_s)->$I_match_length)=((($I_s)->$I_prev_length)=((3)-(1))));
((($I_s)->$I_match_available)=(0));
((($I_strm)->$I_next_in)=($I_next));
((($I_strm)->$I_avail_in)=($I_avail));
((($I_s)->$I_wrap)=($I_wrap));
return (0);
}

i32 $I_deflateGetDictionary($T_z_stream_s  *$I_strm, u8   *$I_dictionary, u32  *$I_dictLength)
{
   $T_internal_state  *$I_s;
u32   $I_len;
if (($I_deflateStateCheck(($I_strm)))) {
return (-(2));
}
(($I_s)=(($I_strm)->$I_state));
(($I_len)=((($I_s)->$I_strstart)+(($I_s)->$I_lookahead)));
if ((($I_len)>(($I_s)->$I_w_size))) {
(($I_len)=(($I_s)->$I_w_size));
}
if (((($I_dictionary)!=(0))&($I_len))) {
($I___builtin___memcpy_chk(($I_dictionary), ((((($I_s)->$I_window)+(($I_s)->$I_strstart))+(($I_s)->$I_lookahead))-($I_len)), ($I_len), ($I___builtin_object_size(($I_dictionary), (0)))));
}
if ((($I_dictLength)!=(0))) {
((*($I_dictLength))=($I_len));
}
return (0);
}

i32 $I_deflateResetKeep($T_z_stream_s  *$I_strm)
{
   $T_internal_state  *$I_s;
if (($I_deflateStateCheck(($I_strm)))) {
return (-(2));
}
((($I_strm)->$I_total_in)=((($I_strm)->$I_total_out)=(0)));
((($I_strm)->$I_msg)=(0));
((($I_strm)->$I_data_type)=(2));
(($I_s)=([$T_internal_state *]((($I_strm)->$I_state))));
((($I_s)->$I_pending)=(0));
((($I_s)->$I_pending_out)=(($I_s)->$I_pending_buf));
if (((($I_s)->$I_wrap)<(0))) {
((($I_s)->$I_wrap)=(-(($I_s)->$I_wrap)));
}
((($I_s)->$I_last_flush)=(-(2)));
($I__tr_init(($I_s)));
return (0);
}

 v0 $I_lm_init($T_internal_state *$I_s)
{
((($I_s)->$I_window_size)=(([u32  ]((2)))*(($I_s)->$I_w_size)));
while ((0)) {
(((($I_s)->$I_head)[((($I_s)->$I_hash_size)-(1))])=(0));
($I___builtin___memset_chk(([u8   *]((($I_s)->$I_head))), (0), (([u32 ](((($I_s)->$I_hash_size)-(1))))*(0)), ($I___builtin_object_size(([u8   *]((($I_s)->$I_head))), (0)))));
}
((($I_s)->$I_max_lazy_match)=((($I_configuration_table)[(($I_s)->$I_level)]).$I_max_lazy));
((($I_s)->$I_good_match)=((($I_configuration_table)[(($I_s)->$I_level)]).$I_good_length));
((($I_s)->$I_nice_match)=((($I_configuration_table)[(($I_s)->$I_level)]).$I_nice_length));
((($I_s)->$I_max_chain_length)=((($I_configuration_table)[(($I_s)->$I_level)]).$I_max_chain));
((($I_s)->$I_strstart)=(0));
((($I_s)->$I_block_start)=(0));
((($I_s)->$I_lookahead)=(0));
((($I_s)->$I_insert)=(0));
((($I_s)->$I_match_length)=((($I_s)->$I_prev_length)=((3)-(1))));
((($I_s)->$I_match_available)=(0));
((($I_s)->$I_ins_h)=(0));
}

i32 $I_deflateReset($T_z_stream_s  *$I_strm)
{
   i32  $I_ret;
(($I_ret)=($I_deflateResetKeep(($I_strm))));
if ((($I_ret)==(0))) {
($I_lm_init((($I_strm)->$I_state)));
}
return ($I_ret);
}

i32 $I_deflateSetHeader($T_z_stream_s  *$I_strm, $T_gz_header_s  *$I_head)
{
   if ((($I_deflateStateCheck(($I_strm)))|(((($I_strm)->$I_state)->$I_wrap)!=(2)))) {
return (-(2));
}
(((($I_strm)->$I_state)->$I_gzhead)=($I_head));
return (0);
}

i32 $I_deflatePending($T_z_stream_s  *$I_strm, u32 *$I_pending, i32 *$I_bits)
{
   if (($I_deflateStateCheck(($I_strm)))) {
return (-(2));
}
if ((($I_pending)!=(0))) {
((*($I_pending))=((($I_strm)->$I_state)->$I_pending));
}
if ((($I_bits)!=(0))) {
((*($I_bits))=((($I_strm)->$I_state)->$I_bi_valid));
}
return (0);
}

i32 $I_deflatePrime($T_z_stream_s  *$I_strm, i32 $I_bits, i32 $I_value)
{
   $T_internal_state  *$I_s;
i32  $I_put;
if (($I_deflateStateCheck(($I_strm)))) {
return (-(2));
}
(($I_s)=(($I_strm)->$I_state));
if ((((($I_bits)<(0))|(($I_bits)>(16)))|((($I_s)->$I_sym_buf)<((($I_s)->$I_pending_out)+(((16)+(7))>>(3)))))) {
return (-(5));
}
while (($I_bits)) {
(($I_put)=((16)-(($I_s)->$I_bi_valid)));
if ((($I_put)>($I_bits))) {
(($I_put)=($I_bits));
}
((($I_s)->$I_bi_buf)|=([u16  ](((($I_value)&(((1)<<($I_put))-(1)))<<(($I_s)->$I_bi_valid)))));
((($I_s)->$I_bi_valid)+=($I_put));
($I__tr_flush_bits(($I_s)));
(($I_value)>>=($I_put));
(($I_bits)-=($I_put));
}
return (0);
}

i32 $I_deflateParams($T_z_stream_s  *$I_strm, i32 $I_level, i32 $I_strategy)
{
   $T_internal_state  *$I_s;
v0   $I_func;
if (($I_deflateStateCheck(($I_strm)))) {
return (-(2));
}
(($I_s)=(($I_strm)->$I_state));
if ((($I_level)==(-(1)))) {
(($I_level)=(6));
}
if (((((($I_level)<(0))|(($I_level)>(9)))|(($I_strategy)<(0)))|(($I_strategy)>(4)))) {
return (-(2));
}
(($I_func)=((($I_configuration_table)[(($I_s)->$I_level)]).$I_func));
if ((((($I_strategy)!=(($I_s)->$I_strategy))|(($I_func)!=((($I_configuration_table)[($I_level)]).$I_func)))&((($I_s)->$I_last_flush)!=(-(2))))) {
i32  $I_err = ($I_deflate(($I_strm), (5)));
if ((($I_err)==(-(2)))) {
return ($I_err);
}
if (((($I_strm)->$I_avail_in)|(((($I_s)->$I_strstart)-(($I_s)->$I_block_start))+(($I_s)->$I_lookahead)))) {
return (-(5));
}
}
if (((($I_s)->$I_level)!=($I_level))) {
if ((((($I_s)->$I_level)==(0))&((($I_s)->$I_matches)!=(0)))) {
if (((($I_s)->$I_matches)==(1))) {
($I_slide_hash(($I_s)));
}
else {
while ((0)) {
(((($I_s)->$I_head)[((($I_s)->$I_hash_size)-(1))])=(0));
($I___builtin___memset_chk(([u8   *]((($I_s)->$I_head))), (0), (([u32 ](((($I_s)->$I_hash_size)-(1))))*(0)), ($I___builtin_object_size(([u8   *]((($I_s)->$I_head))), (0)))));
}
}
((($I_s)->$I_matches)=(0));
}
((($I_s)->$I_level)=($I_level));
((($I_s)->$I_max_lazy_match)=((($I_configuration_table)[($I_level)]).$I_max_lazy));
((($I_s)->$I_good_match)=((($I_configuration_table)[($I_level)]).$I_good_length));
((($I_s)->$I_nice_match)=((($I_configuration_table)[($I_level)]).$I_nice_length));
((($I_s)->$I_max_chain_length)=((($I_configuration_table)[($I_level)]).$I_max_chain));
}
((($I_s)->$I_strategy)=($I_strategy));
return (0);
}

i32 $I_deflateTune($T_z_stream_s  *$I_strm, i32 $I_good_length, i32 $I_max_lazy, i32 $I_nice_length, i32 $I_max_chain)
{
   $T_internal_state  *$I_s;
if (($I_deflateStateCheck(($I_strm)))) {
return (-(2));
}
(($I_s)=(($I_strm)->$I_state));
((($I_s)->$I_good_match)=([u32  ](($I_good_length))));
((($I_s)->$I_max_lazy_match)=([u32  ](($I_max_lazy))));
((($I_s)->$I_nice_match)=($I_nice_length));
((($I_s)->$I_max_chain_length)=([u32  ](($I_max_chain))));
return (0);
}

u32  $I_deflateBound($T_z_stream_s  *$I_strm, u32  $I_sourceLen)
{
   $T_internal_state  *$I_s;
u32   $I_fixedlen;
u32   $I_storelen;
u32   $I_wraplen;
(($I_fixedlen)=((((($I_sourceLen)+(($I_sourceLen)>>(3)))+(($I_sourceLen)>>(8)))+(($I_sourceLen)>>(9)))+(4)));
(($I_storelen)=((((($I_sourceLen)+(($I_sourceLen)>>(5)))+(($I_sourceLen)>>(7)))+(($I_sourceLen)>>(11)))+(7)));
(($I_s)=(($I_strm)->$I_state));
return ((((((($I_sourceLen)+(($I_sourceLen)>>(12)))+(($I_sourceLen)>>(14)))+(($I_sourceLen)>>(25)))+(13))-(6))+($I_wraplen));
}

 v0 $I_putShortMSB($T_internal_state *$I_s, u32  $I_b)
{
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((($I_b)>>(8)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((($I_b)&(255)))))));
}

 v0 $I_flush_pending($T_z_stream_s  *$I_strm)
{
u32  $I_len;
$T_internal_state  *$I_s = (($I_strm)->$I_state);
($I__tr_flush_bits(($I_s)));
(($I_len)=(($I_s)->$I_pending));
if ((($I_len)>(($I_strm)->$I_avail_out))) {
(($I_len)=(($I_strm)->$I_avail_out));
}
if ((($I_len)==(0))) {
return;
}
($I___builtin___memcpy_chk((($I_strm)->$I_next_out), (($I_s)->$I_pending_out), ($I_len), ($I___builtin_object_size((($I_strm)->$I_next_out), (0)))));
((($I_strm)->$I_next_out)+=($I_len));
((($I_s)->$I_pending_out)+=($I_len));
((($I_strm)->$I_total_out)+=($I_len));
((($I_strm)->$I_avail_out)-=($I_len));
((($I_s)->$I_pending)-=($I_len));
if (((($I_s)->$I_pending)==(0))) {
((($I_s)->$I_pending_out)=(($I_s)->$I_pending_buf));
}
}

i32 $I_deflate($T_z_stream_s  *$I_strm, i32 $I_flush)
{
   i32  $I_old_flush;
$T_internal_state  *$I_s;
if (((($I_deflateStateCheck(($I_strm)))|(($I_flush)>(5)))|(($I_flush)<(0)))) {
return (-(2));
}
(($I_s)=(($I_strm)->$I_state));
if (((((($I_strm)->$I_next_out)==(0))|(((($I_strm)->$I_avail_in)!=(0))&((($I_strm)->$I_next_in)==(0))))|(((($I_s)->$I_status)==(666))&(($I_flush)!=(4))))) {
}
(($I_old_flush)=(($I_s)->$I_last_flush));
((($I_s)->$I_last_flush)=($I_flush));
if ((((($I_s)->$I_status)==(666))&((($I_strm)->$I_avail_in)!=(0)))) {
}
if ((((($I_s)->$I_status)==(42))&((($I_s)->$I_wrap)==(0)))) {
((($I_s)->$I_status)=(113));
}
if (((($I_s)->$I_status)==(42))) {
u32   $I_header = (((8)+(((($I_s)->$I_w_bits)-(8))<<(4)))<<(8));
u32   $I_level_flags;
if ((((($I_s)->$I_strategy)>=(2))|((($I_s)->$I_level)<(2)))) {
(($I_level_flags)=(0));
}
else {
if (((($I_s)->$I_level)<(6))) {
(($I_level_flags)=(1));
}
else {
if (((($I_s)->$I_level)==(6))) {
(($I_level_flags)=(2));
}
else {
(($I_level_flags)=(3));
}
}
}
(($I_header)|=(($I_level_flags)<<(6)));
if (((($I_s)->$I_strstart)!=(0))) {
(($I_header)|=(32));
}
(($I_header)+=((31)-(($I_header)%(31))));
($I_putShortMSB(($I_s), ($I_header)));
if (((($I_s)->$I_strstart)!=(0))) {
($I_putShortMSB(($I_s), ([u32  ](((($I_strm)->$I_adler)>>(16))))));
($I_putShortMSB(($I_s), ([u32  ](((($I_strm)->$I_adler)&(65535))))));
}
((($I_strm)->$I_adler)=($I_adler32((0), (0), (0))));
((($I_s)->$I_status)=(113));
($I_flush_pending(($I_strm)));
if (((($I_s)->$I_pending)!=(0))) {
((($I_s)->$I_last_flush)=(-(1)));
return (0);
}
}
if (((($I_s)->$I_status)==(57))) {
((($I_strm)->$I_adler)=($I_crc32((0), (0), (0))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ]((31))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ]((139))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ]((8))));
if (((($I_s)->$I_gzhead)==(0))) {
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ]((0))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ]((0))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ]((0))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ]((0))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ]((0))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ]((19))));
((($I_s)->$I_status)=(113));
($I_flush_pending(($I_strm)));
if (((($I_s)->$I_pending)!=(0))) {
((($I_s)->$I_last_flush)=(-(1)));
return (0);
}
}
else {
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((((($I_s)->$I_gzhead)->$I_time)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((((($I_s)->$I_gzhead)->$I_time)>>(8))&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((((($I_s)->$I_gzhead)->$I_time)>>(16))&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((((($I_s)->$I_gzhead)->$I_time)>>(24))&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ]((((($I_s)->$I_gzhead)->$I_os)&(255)))));
if ((((($I_s)->$I_gzhead)->$I_extra)!=(0))) {
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ]((((($I_s)->$I_gzhead)->$I_extra_len)&(255)))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](((((($I_s)->$I_gzhead)->$I_extra_len)>>(8))&(255)))));
}
if (((($I_s)->$I_gzhead)->$I_hcrc)) {
((($I_strm)->$I_adler)=($I_crc32((($I_strm)->$I_adler), (($I_s)->$I_pending_buf), (($I_s)->$I_pending))));
}
((($I_s)->$I_gzindex)=(0));
((($I_s)->$I_status)=(69));
}
}
if (((($I_s)->$I_status)==(69))) {
if ((((($I_s)->$I_gzhead)->$I_extra)!=(0))) {
u32   $I_beg = (($I_s)->$I_pending);
u32   $I_left = ((((($I_s)->$I_gzhead)->$I_extra_len)&(65535))-(($I_s)->$I_gzindex));
while ((((($I_s)->$I_pending)+($I_left))>(($I_s)->$I_pending_buf_size))) {
u32   $I_copy = ((($I_s)->$I_pending_buf_size)-(($I_s)->$I_pending));
($I___builtin___memcpy_chk(((($I_s)->$I_pending_buf)+(($I_s)->$I_pending)), (((($I_s)->$I_gzhead)->$I_extra)+(($I_s)->$I_gzindex)), ($I_copy), ($I___builtin_object_size(((($I_s)->$I_pending_buf)+(($I_s)->$I_pending)), (0)))));
((($I_s)->$I_pending)=(($I_s)->$I_pending_buf_size));
while ((0)) {
if ((((($I_s)->$I_gzhead)->$I_hcrc)&((($I_s)->$I_pending)>($I_beg)))) {
((($I_strm)->$I_adler)=($I_crc32((($I_strm)->$I_adler), ((($I_s)->$I_pending_buf)+($I_beg)), ((($I_s)->$I_pending)-($I_beg)))));
}
}
((($I_s)->$I_gzindex)+=($I_copy));
($I_flush_pending(($I_strm)));
if (((($I_s)->$I_pending)!=(0))) {
((($I_s)->$I_last_flush)=(-(1)));
return (0);
}
(($I_beg)=(0));
(($I_left)-=($I_copy));
}
($I___builtin___memcpy_chk(((($I_s)->$I_pending_buf)+(($I_s)->$I_pending)), (((($I_s)->$I_gzhead)->$I_extra)+(($I_s)->$I_gzindex)), ($I_left), ($I___builtin_object_size(((($I_s)->$I_pending_buf)+(($I_s)->$I_pending)), (0)))));
((($I_s)->$I_pending)+=($I_left));
while ((0)) {
if ((((($I_s)->$I_gzhead)->$I_hcrc)&((($I_s)->$I_pending)>($I_beg)))) {
((($I_strm)->$I_adler)=($I_crc32((($I_strm)->$I_adler), ((($I_s)->$I_pending_buf)+($I_beg)), ((($I_s)->$I_pending)-($I_beg)))));
}
}
((($I_s)->$I_gzindex)=(0));
}
((($I_s)->$I_status)=(73));
}
if (((($I_s)->$I_status)==(73))) {
if ((((($I_s)->$I_gzhead)->$I_name)!=(0))) {
u32   $I_beg = (($I_s)->$I_pending);
i32  $I_val;
while ((($I_val)!=(0))) {
if (((($I_s)->$I_pending)==(($I_s)->$I_pending_buf_size))) {
while ((0)) {
if ((((($I_s)->$I_gzhead)->$I_hcrc)&((($I_s)->$I_pending)>($I_beg)))) {
((($I_strm)->$I_adler)=($I_crc32((($I_strm)->$I_adler), ((($I_s)->$I_pending_buf)+($I_beg)), ((($I_s)->$I_pending)-($I_beg)))));
}
}
($I_flush_pending(($I_strm)));
if (((($I_s)->$I_pending)!=(0))) {
((($I_s)->$I_last_flush)=(-(1)));
return (0);
}
(($I_beg)=(0));
}
(($I_val)=(((($I_s)->$I_gzhead)->$I_name)[((($I_s)->$I_gzindex)++)]));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](($I_val))));
}
while ((0)) {
if ((((($I_s)->$I_gzhead)->$I_hcrc)&((($I_s)->$I_pending)>($I_beg)))) {
((($I_strm)->$I_adler)=($I_crc32((($I_strm)->$I_adler), ((($I_s)->$I_pending_buf)+($I_beg)), ((($I_s)->$I_pending)-($I_beg)))));
}
}
((($I_s)->$I_gzindex)=(0));
}
((($I_s)->$I_status)=(91));
}
if (((($I_s)->$I_status)==(91))) {
if ((((($I_s)->$I_gzhead)->$I_comment)!=(0))) {
u32   $I_beg = (($I_s)->$I_pending);
i32  $I_val;
while ((($I_val)!=(0))) {
if (((($I_s)->$I_pending)==(($I_s)->$I_pending_buf_size))) {
while ((0)) {
if ((((($I_s)->$I_gzhead)->$I_hcrc)&((($I_s)->$I_pending)>($I_beg)))) {
((($I_strm)->$I_adler)=($I_crc32((($I_strm)->$I_adler), ((($I_s)->$I_pending_buf)+($I_beg)), ((($I_s)->$I_pending)-($I_beg)))));
}
}
($I_flush_pending(($I_strm)));
if (((($I_s)->$I_pending)!=(0))) {
((($I_s)->$I_last_flush)=(-(1)));
return (0);
}
(($I_beg)=(0));
}
(($I_val)=(((($I_s)->$I_gzhead)->$I_comment)[((($I_s)->$I_gzindex)++)]));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](($I_val))));
}
while ((0)) {
if ((((($I_s)->$I_gzhead)->$I_hcrc)&((($I_s)->$I_pending)>($I_beg)))) {
((($I_strm)->$I_adler)=($I_crc32((($I_strm)->$I_adler), ((($I_s)->$I_pending_buf)+($I_beg)), ((($I_s)->$I_pending)-($I_beg)))));
}
}
}
((($I_s)->$I_status)=(103));
}
if (((($I_s)->$I_status)==(103))) {
if (((($I_s)->$I_gzhead)->$I_hcrc)) {
if ((((($I_s)->$I_pending)+(2))>(($I_s)->$I_pending_buf_size))) {
($I_flush_pending(($I_strm)));
if (((($I_s)->$I_pending)!=(0))) {
((($I_s)->$I_last_flush)=(-(1)));
return (0);
}
}
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((($I_strm)->$I_adler)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((((($I_strm)->$I_adler)>>(8))&(255)))))));
((($I_strm)->$I_adler)=($I_crc32((0), (0), (0))));
}
((($I_s)->$I_status)=(113));
($I_flush_pending(($I_strm)));
if (((($I_s)->$I_pending)!=(0))) {
((($I_s)->$I_last_flush)=(-(1)));
return (0);
}
}
if (((((($I_strm)->$I_avail_in)!=(0))|((($I_s)->$I_lookahead)!=(0)))|((($I_flush)!=(0))&((($I_s)->$I_status)!=(666))))) {
i32  $I_bstate;
if (((($I_bstate)==($I_finish_started))|(($I_bstate)==($I_finish_done)))) {
((($I_s)->$I_status)=(666));
}
if (((($I_bstate)==($I_need_more))|(($I_bstate)==($I_finish_started)))) {
if (((($I_strm)->$I_avail_out)==(0))) {
((($I_s)->$I_last_flush)=(-(1)));
}
return (0);
}
if ((($I_bstate)==($I_block_done))) {
if ((($I_flush)==(1))) {
($I__tr_align(($I_s)));
}
else {
if ((($I_flush)!=(5))) {
($I__tr_stored_block(($I_s), ([i8 *]((0))), (0), (0)));
if ((($I_flush)==(3))) {
while ((0)) {
(((($I_s)->$I_head)[((($I_s)->$I_hash_size)-(1))])=(0));
($I___builtin___memset_chk(([u8   *]((($I_s)->$I_head))), (0), (([u32 ](((($I_s)->$I_hash_size)-(1))))*(0)), ($I___builtin_object_size(([u8   *]((($I_s)->$I_head))), (0)))));
}
if (((($I_s)->$I_lookahead)==(0))) {
((($I_s)->$I_strstart)=(0));
((($I_s)->$I_block_start)=(0));
((($I_s)->$I_insert)=(0));
}
}
}
}
($I_flush_pending(($I_strm)));
if (((($I_strm)->$I_avail_out)==(0))) {
((($I_s)->$I_last_flush)=(-(1)));
return (0);
}
}
}
if ((($I_flush)!=(4))) {
return (0);
}
if (((($I_s)->$I_wrap)<=(0))) {
return (1);
}
if (((($I_s)->$I_wrap)==(2))) {
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((($I_strm)->$I_adler)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((((($I_strm)->$I_adler)>>(8))&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((((($I_strm)->$I_adler)>>(16))&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((((($I_strm)->$I_adler)>>(24))&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((($I_strm)->$I_total_in)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((((($I_strm)->$I_total_in)>>(8))&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((((($I_strm)->$I_total_in)>>(16))&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((((($I_strm)->$I_total_in)>>(24))&(255)))))));
}
else {
($I_putShortMSB(($I_s), ([u32  ](((($I_strm)->$I_adler)>>(16))))));
($I_putShortMSB(($I_s), ([u32  ](((($I_strm)->$I_adler)&(65535))))));
}
($I_flush_pending(($I_strm)));
if (((($I_s)->$I_wrap)>(0))) {
((($I_s)->$I_wrap)=(-(($I_s)->$I_wrap)));
}
}

i32 $I_deflateEnd($T_z_stream_s  *$I_strm)
{
   i32  $I_status;
if (($I_deflateStateCheck(($I_strm)))) {
return (-(2));
}
(($I_status)=((($I_strm)->$I_state)->$I_status));
((($I_strm)->$I_state)=(0));
}

i32 $I_deflateCopy($T_z_stream_s  *$I_dest, $T_z_stream_s  *$I_source)
{
   $T_internal_state  *$I_ds;
$T_internal_state  *$I_ss;
if ((($I_deflateStateCheck(($I_source)))|(($I_dest)==(0)))) {
return (-(2));
}
(($I_ss)=(($I_source)->$I_state));
($I___builtin___memcpy_chk(([v0  ](($I_dest))), ([v0  ](($I_source))), (0), ($I___builtin_object_size(([v0  ](($I_dest))), (0)))));
if ((($I_ds)==(0))) {
return (-(4));
}
((($I_dest)->$I_state)=([$T_internal_state *](($I_ds))));
($I___builtin___memcpy_chk(([v0  ](($I_ds))), ([v0  ](($I_ss))), (0), ($I___builtin_object_size(([v0  ](($I_ds))), (0)))));
((($I_ds)->$I_strm)=($I_dest));
if ((((((($I_ds)->$I_window)==(0))|((($I_ds)->$I_prev)==(0)))|((($I_ds)->$I_head)==(0)))|((($I_ds)->$I_pending_buf)==(0)))) {
($I_deflateEnd(($I_dest)));
return (-(4));
}
($I___builtin___memcpy_chk((($I_ds)->$I_window), (($I_ss)->$I_window), (((($I_ds)->$I_w_size)*(2))*(0)), ($I___builtin_object_size((($I_ds)->$I_window), (0)))));
($I___builtin___memcpy_chk(([v0  ]((($I_ds)->$I_prev))), ([v0  ]((($I_ss)->$I_prev))), ((($I_ds)->$I_w_size)*(0)), ($I___builtin_object_size(([v0  ]((($I_ds)->$I_prev))), (0)))));
($I___builtin___memcpy_chk(([v0  ]((($I_ds)->$I_head))), ([v0  ]((($I_ss)->$I_head))), ((($I_ds)->$I_hash_size)*(0)), ($I___builtin_object_size(([v0  ]((($I_ds)->$I_head))), (0)))));
($I___builtin___memcpy_chk((($I_ds)->$I_pending_buf), (($I_ss)->$I_pending_buf), ((($I_ds)->$I_lit_bufsize)*(4)), ($I___builtin_object_size((($I_ds)->$I_pending_buf), (0)))));
((($I_ds)->$I_pending_out)=((($I_ds)->$I_pending_buf)+((($I_ss)->$I_pending_out)-(($I_ss)->$I_pending_buf))));
((($I_ds)->$I_sym_buf)=((($I_ds)->$I_pending_buf)+(($I_ds)->$I_lit_bufsize)));
(((($I_ds)->$I_l_desc).$I_dyn_tree)=(($I_ds)->$I_dyn_ltree));
(((($I_ds)->$I_d_desc).$I_dyn_tree)=(($I_ds)->$I_dyn_dtree));
(((($I_ds)->$I_bl_desc).$I_dyn_tree)=(($I_ds)->$I_bl_tree));
return (0);
}

 u32  $I_longest_match($T_internal_state *$I_s, u32  $I_cur_match)
{
u32  $I_chain_length = (($I_s)->$I_max_chain_length);
 u8    *$I_scan = ((($I_s)->$I_window)+(($I_s)->$I_strstart));
 u8    *$I_match;
 i32  $I_len;
i32  $I_best_len = ([i32 ]((($I_s)->$I_prev_length)));
i32  $I_nice_match = (($I_s)->$I_nice_match);
u32   $I_limit;
u16     *$I_prev = (($I_s)->$I_prev);
u32   $I_wmask = (($I_s)->$I_w_mask);
 u8    *$I_strend = (((($I_s)->$I_window)+(($I_s)->$I_strstart))+(258));
 u8   $I_scan_end1 = (($I_scan)[(($I_best_len)-(1))]);
 u8   $I_scan_end = (($I_scan)[($I_best_len)]);
if (((($I_s)->$I_prev_length)>=(($I_s)->$I_good_match))) {
(($I_chain_length)>>=(2));
}
if ((([u32  ](($I_nice_match)))>(($I_s)->$I_lookahead))) {
(($I_nice_match)=([i32 ]((($I_s)->$I_lookahead))));
}
while ((((($I_cur_match)=(($I_prev)[(($I_cur_match)&($I_wmask))]))>($I_limit))&((--($I_chain_length))!=(0)))) {
(($I_match)=((($I_s)->$I_window)+($I_cur_match)));
if ((((((($I_match)[($I_best_len)])!=($I_scan_end))|((($I_match)[(($I_best_len)-(1))])!=($I_scan_end1)))|((*($I_match))!=(*($I_scan))))|((*(++($I_match)))!=(($I_scan)[(1)])))) {
continue;
}
while (((((((((((*(++($I_scan)))==(*(++($I_match))))&((*(++($I_scan)))==(*(++($I_match)))))&((*(++($I_scan)))==(*(++($I_match)))))&((*(++($I_scan)))==(*(++($I_match)))))&((*(++($I_scan)))==(*(++($I_match)))))&((*(++($I_scan)))==(*(++($I_match)))))&((*(++($I_scan)))==(*(++($I_match)))))&((*(++($I_scan)))==(*(++($I_match)))))&(($I_scan)<($I_strend)))) {
}
(($I_len)=((258)-([i32 ]((($I_strend)-($I_scan))))));
(($I_scan)=(($I_strend)-(258)));
if ((($I_len)>($I_best_len))) {
((($I_s)->$I_match_start)=($I_cur_match));
(($I_best_len)=($I_len));
if ((($I_len)>=($I_nice_match))) {
break;
}
(($I_scan_end1)=(($I_scan)[(($I_best_len)-(1))]));
(($I_scan_end)=(($I_scan)[($I_best_len)]));
}
}
if ((([u32  ](($I_best_len)))<=(($I_s)->$I_lookahead))) {
return ([u32  ](($I_best_len)));
}
return (($I_s)->$I_lookahead);
}

 i32 $I_deflate_stored($T_internal_state *$I_s, i32 $I_flush)
{
   u32  $I_min_block;
i32  $I_last = (0);
u32  $I_len;
u32  $I_left;
u32  $I_have;
u32  $I_used = ((($I_s)->$I_strm)->$I_avail_in);
while ((($I_last)==(0))) {
(($I_len)=(65535));
(($I_have)=(((($I_s)->$I_bi_valid)+(42))>>(3)));
if ((((($I_s)->$I_strm)->$I_avail_out)<($I_have))) {
break;
}
(($I_have)=(((($I_s)->$I_strm)->$I_avail_out)-($I_have)));
(($I_left)=((($I_s)->$I_strstart)-(($I_s)->$I_block_start)));
if ((($I_len)>(([u32  ](($I_left)))+((($I_s)->$I_strm)->$I_avail_in)))) {
(($I_len)=(($I_left)+((($I_s)->$I_strm)->$I_avail_in)));
}
if ((($I_len)>($I_have))) {
(($I_len)=($I_have));
}
if (((($I_len)<($I_min_block))&((((($I_len)==(0))&(($I_flush)!=(4)))|(($I_flush)==(0)))|(($I_len)!=(($I_left)+((($I_s)->$I_strm)->$I_avail_in)))))) {
break;
}
($I__tr_stored_block(($I_s), ([i8 *]((0))), (0), ($I_last)));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)-(4))])=([u8   ](($I_len))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)-(3))])=([u8   ]((($I_len)>>(8)))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)-(2))])=([u8   ]((~($I_len)))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)-(1))])=([u8   ](((~($I_len))>>(8)))));
($I_flush_pending((($I_s)->$I_strm)));
if (($I_left)) {
if ((($I_left)>($I_len))) {
(($I_left)=($I_len));
}
($I___builtin___memcpy_chk(((($I_s)->$I_strm)->$I_next_out), ((($I_s)->$I_window)+(($I_s)->$I_block_start)), ($I_left), ($I___builtin_object_size(((($I_s)->$I_strm)->$I_next_out), (0)))));
(((($I_s)->$I_strm)->$I_next_out)+=($I_left));
(((($I_s)->$I_strm)->$I_avail_out)-=($I_left));
(((($I_s)->$I_strm)->$I_total_out)+=($I_left));
((($I_s)->$I_block_start)+=($I_left));
(($I_len)-=($I_left));
}
if (($I_len)) {
($I_read_buf((($I_s)->$I_strm), ((($I_s)->$I_strm)->$I_next_out), ($I_len)));
(((($I_s)->$I_strm)->$I_next_out)+=($I_len));
(((($I_s)->$I_strm)->$I_avail_out)-=($I_len));
(((($I_s)->$I_strm)->$I_total_out)+=($I_len));
}
}
(($I_used)-=((($I_s)->$I_strm)->$I_avail_in));
if (($I_used)) {
if ((($I_used)>=(($I_s)->$I_w_size))) {
((($I_s)->$I_matches)=(2));
($I___builtin___memcpy_chk((($I_s)->$I_window), (((($I_s)->$I_strm)->$I_next_in)-(($I_s)->$I_w_size)), (($I_s)->$I_w_size), ($I___builtin_object_size((($I_s)->$I_window), (0)))));
((($I_s)->$I_strstart)=(($I_s)->$I_w_size));
((($I_s)->$I_insert)=(($I_s)->$I_strstart));
}
else {
if ((((($I_s)->$I_window_size)-(($I_s)->$I_strstart))<=($I_used))) {
((($I_s)->$I_strstart)-=(($I_s)->$I_w_size));
($I___builtin___memcpy_chk((($I_s)->$I_window), ((($I_s)->$I_window)+(($I_s)->$I_w_size)), (($I_s)->$I_strstart), ($I___builtin_object_size((($I_s)->$I_window), (0)))));
if (((($I_s)->$I_matches)<(2))) {
((($I_s)->$I_matches)++);
}
if (((($I_s)->$I_insert)>(($I_s)->$I_strstart))) {
((($I_s)->$I_insert)=(($I_s)->$I_strstart));
}
}
($I___builtin___memcpy_chk(((($I_s)->$I_window)+(($I_s)->$I_strstart)), (((($I_s)->$I_strm)->$I_next_in)-($I_used)), ($I_used), ($I___builtin_object_size(((($I_s)->$I_window)+(($I_s)->$I_strstart)), (0)))));
((($I_s)->$I_strstart)+=($I_used));
}
((($I_s)->$I_block_start)=(($I_s)->$I_strstart));
}
if (((($I_s)->$I_high_water)<(($I_s)->$I_strstart))) {
((($I_s)->$I_high_water)=(($I_s)->$I_strstart));
}
if (($I_last)) {
return ($I_finish_done);
}
if (((((($I_flush)!=(0))&(($I_flush)!=(4)))&(((($I_s)->$I_strm)->$I_avail_in)==(0)))&(([i32 ]((($I_s)->$I_strstart)))==(($I_s)->$I_block_start)))) {
return ($I_block_done);
}
(($I_have)=((($I_s)->$I_window_size)-(($I_s)->$I_strstart)));
if (((((($I_s)->$I_strm)->$I_avail_in)>($I_have))&((($I_s)->$I_block_start)>=([i32 ]((($I_s)->$I_w_size)))))) {
((($I_s)->$I_block_start)-=(($I_s)->$I_w_size));
((($I_s)->$I_strstart)-=(($I_s)->$I_w_size));
($I___builtin___memcpy_chk((($I_s)->$I_window), ((($I_s)->$I_window)+(($I_s)->$I_w_size)), (($I_s)->$I_strstart), ($I___builtin_object_size((($I_s)->$I_window), (0)))));
if (((($I_s)->$I_matches)<(2))) {
((($I_s)->$I_matches)++);
}
(($I_have)+=(($I_s)->$I_w_size));
if (((($I_s)->$I_insert)>(($I_s)->$I_strstart))) {
((($I_s)->$I_insert)=(($I_s)->$I_strstart));
}
}
if ((($I_have)>((($I_s)->$I_strm)->$I_avail_in))) {
(($I_have)=((($I_s)->$I_strm)->$I_avail_in));
}
if (($I_have)) {
($I_read_buf((($I_s)->$I_strm), ((($I_s)->$I_window)+(($I_s)->$I_strstart)), ($I_have)));
((($I_s)->$I_strstart)+=($I_have));
}
if (((($I_s)->$I_high_water)<(($I_s)->$I_strstart))) {
((($I_s)->$I_high_water)=(($I_s)->$I_strstart));
}
(($I_have)=(((($I_s)->$I_bi_valid)+(42))>>(3)));
(($I_left)=((($I_s)->$I_strstart)-(($I_s)->$I_block_start)));
if (((($I_left)>=($I_min_block))|((((($I_left)|(($I_flush)==(4)))&(($I_flush)!=(0)))&(((($I_s)->$I_strm)->$I_avail_in)==(0)))&(($I_left)<=($I_have))))) {
($I__tr_stored_block(($I_s), (([i8  *]((($I_s)->$I_window)))+(($I_s)->$I_block_start)), ($I_len), ($I_last)));
((($I_s)->$I_block_start)+=($I_len));
($I_flush_pending((($I_s)->$I_strm)));
}
}

 i32 $I_deflate_fast($T_internal_state *$I_s, i32 $I_flush)
{
   u32   $I_hash_head;
i32  $I_bflush;
for (0;1; 0) {
if (((($I_s)->$I_lookahead)<(((258)+(3))+(1)))) {
($I_fill_window(($I_s)));
if ((((($I_s)->$I_lookahead)<(((258)+(3))+(1)))&(($I_flush)==(0)))) {
return ($I_need_more);
}
if (((($I_s)->$I_lookahead)==(0))) {
break;
}
}
(($I_hash_head)=(0));
if (((($I_s)->$I_lookahead)>=(3))) {
}
if (((($I_hash_head)!=(0))&(((($I_s)->$I_strstart)-($I_hash_head))<=((($I_s)->$I_w_size)-(((258)+(3))+(1)))))) {
((($I_s)->$I_match_length)=($I_longest_match(($I_s), ($I_hash_head))));
}
if (((($I_s)->$I_match_length)>=(3))) {
u8   $I_len = ([u8  ](((($I_s)->$I_match_length)-(3))));
u16   $I_dist = ([u16  ](((($I_s)->$I_strstart)-(($I_s)->$I_match_start))));
(((($I_s)->$I_sym_buf)[((($I_s)->$I_sym_next)++)])=([u8  ](($I_dist))));
(((($I_s)->$I_sym_buf)[((($I_s)->$I_sym_next)++)])=([u8  ]((($I_dist)>>(8)))));
(((($I_s)->$I_sym_buf)[((($I_s)->$I_sym_next)++)])=($I_len));
(($I_dist)--);
(((((($I_s)->$I_dyn_ltree)[(((($I__length_code)[($I_len)])+(256))+(1))]).$I_fc).$I_freq)++);
(($I_bflush)=((($I_s)->$I_sym_next)==(($I_s)->$I_sym_end)));
((($I_s)->$I_lookahead)-=(($I_s)->$I_match_length));
if ((((($I_s)->$I_match_length)<=(($I_s)->$I_max_lazy_match))&((($I_s)->$I_lookahead)>=(3)))) {
((($I_s)->$I_match_length)--);
while (((--(($I_s)->$I_match_length))!=(0))) {
((($I_s)->$I_strstart)++);
}
((($I_s)->$I_strstart)++);
}
else {
((($I_s)->$I_strstart)+=(($I_s)->$I_match_length));
((($I_s)->$I_match_length)=(0));
((($I_s)->$I_ins_h)=((($I_s)->$I_window)[(($I_s)->$I_strstart)]));
((($I_s)->$I_ins_h)=((((($I_s)->$I_ins_h)<<(($I_s)->$I_hash_shift))^((($I_s)->$I_window)[((($I_s)->$I_strstart)+(1))]))&(($I_s)->$I_hash_mask)));
}
}
else {
u8   $I_cc = ((($I_s)->$I_window)[(($I_s)->$I_strstart)]);
(((($I_s)->$I_sym_buf)[((($I_s)->$I_sym_next)++)])=(0));
(((($I_s)->$I_sym_buf)[((($I_s)->$I_sym_next)++)])=(0));
(((($I_s)->$I_sym_buf)[((($I_s)->$I_sym_next)++)])=($I_cc));
(((((($I_s)->$I_dyn_ltree)[($I_cc)]).$I_fc).$I_freq)++);
(($I_bflush)=((($I_s)->$I_sym_next)==(($I_s)->$I_sym_end)));
((($I_s)->$I_lookahead)--);
((($I_s)->$I_strstart)++);
}
if (($I_bflush)) {
((($I_s)->$I_block_start)=(($I_s)->$I_strstart));
($I_flush_pending((($I_s)->$I_strm)));
}
}
if ((($I_flush)==(4))) {
((($I_s)->$I_block_start)=(($I_s)->$I_strstart));
($I_flush_pending((($I_s)->$I_strm)));
return ($I_finish_done);
}
if ((($I_s)->$I_sym_next)) {
((($I_s)->$I_block_start)=(($I_s)->$I_strstart));
($I_flush_pending((($I_s)->$I_strm)));
}
return ($I_block_done);
}

 i32 $I_deflate_slow($T_internal_state *$I_s, i32 $I_flush)
{
   u32   $I_hash_head;
i32  $I_bflush;
for (0;1; 0) {
if (((($I_s)->$I_lookahead)<(((258)+(3))+(1)))) {
($I_fill_window(($I_s)));
if ((((($I_s)->$I_lookahead)<(((258)+(3))+(1)))&(($I_flush)==(0)))) {
return ($I_need_more);
}
if (((($I_s)->$I_lookahead)==(0))) {
break;
}
}
(($I_hash_head)=(0));
if (((($I_s)->$I_lookahead)>=(3))) {
}
((($I_s)->$I_match_length)=((3)-(1)));
if ((((($I_hash_head)!=(0))&((($I_s)->$I_prev_length)<(($I_s)->$I_max_lazy_match)))&(((($I_s)->$I_strstart)-($I_hash_head))<=((($I_s)->$I_w_size)-(((258)+(3))+(1)))))) {
((($I_s)->$I_match_length)=($I_longest_match(($I_s), ($I_hash_head))));
if ((((($I_s)->$I_match_length)<=(5))&(((($I_s)->$I_strategy)==(1))|(((($I_s)->$I_match_length)==(3))&(((($I_s)->$I_strstart)-(($I_s)->$I_match_start))>(4096)))))) {
((($I_s)->$I_match_length)=((3)-(1)));
}
}
if ((((($I_s)->$I_prev_length)>=(3))&((($I_s)->$I_match_length)<=(($I_s)->$I_prev_length)))) {
u32   $I_max_insert = (((($I_s)->$I_strstart)+(($I_s)->$I_lookahead))-(3));
u8   $I_len = ([u8  ](((($I_s)->$I_prev_length)-(3))));
u16   $I_dist = ([u16  ]((((($I_s)->$I_strstart)-(1))-(($I_s)->$I_prev_match))));
(((($I_s)->$I_sym_buf)[((($I_s)->$I_sym_next)++)])=([u8  ](($I_dist))));
(((($I_s)->$I_sym_buf)[((($I_s)->$I_sym_next)++)])=([u8  ]((($I_dist)>>(8)))));
(((($I_s)->$I_sym_buf)[((($I_s)->$I_sym_next)++)])=($I_len));
(($I_dist)--);
(((((($I_s)->$I_dyn_ltree)[(((($I__length_code)[($I_len)])+(256))+(1))]).$I_fc).$I_freq)++);
(($I_bflush)=((($I_s)->$I_sym_next)==(($I_s)->$I_sym_end)));
((($I_s)->$I_lookahead)-=((($I_s)->$I_prev_length)-(1)));
((($I_s)->$I_prev_length)-=(2));
while (((--(($I_s)->$I_prev_length))!=(0))) {
if (((++(($I_s)->$I_strstart))<=($I_max_insert))) {
}
}
((($I_s)->$I_match_available)=(0));
((($I_s)->$I_match_length)=((3)-(1)));
((($I_s)->$I_strstart)++);
if (($I_bflush)) {
((($I_s)->$I_block_start)=(($I_s)->$I_strstart));
($I_flush_pending((($I_s)->$I_strm)));
}
}
else {
if ((($I_s)->$I_match_available)) {
u8   $I_cc = ((($I_s)->$I_window)[((($I_s)->$I_strstart)-(1))]);
(((($I_s)->$I_sym_buf)[((($I_s)->$I_sym_next)++)])=(0));
(((($I_s)->$I_sym_buf)[((($I_s)->$I_sym_next)++)])=(0));
(((($I_s)->$I_sym_buf)[((($I_s)->$I_sym_next)++)])=($I_cc));
(((((($I_s)->$I_dyn_ltree)[($I_cc)]).$I_fc).$I_freq)++);
(($I_bflush)=((($I_s)->$I_sym_next)==(($I_s)->$I_sym_end)));
if (($I_bflush)) {
((($I_s)->$I_block_start)=(($I_s)->$I_strstart));
($I_flush_pending((($I_s)->$I_strm)));
}
((($I_s)->$I_strstart)++);
((($I_s)->$I_lookahead)--);
if ((((($I_s)->$I_strm)->$I_avail_out)==(0))) {
return ($I_need_more);
}
}
else {
((($I_s)->$I_match_available)=(1));
((($I_s)->$I_strstart)++);
((($I_s)->$I_lookahead)--);
}
}
}
if ((($I_s)->$I_match_available)) {
u8   $I_cc = ((($I_s)->$I_window)[((($I_s)->$I_strstart)-(1))]);
(((($I_s)->$I_sym_buf)[((($I_s)->$I_sym_next)++)])=(0));
(((($I_s)->$I_sym_buf)[((($I_s)->$I_sym_next)++)])=(0));
(((($I_s)->$I_sym_buf)[((($I_s)->$I_sym_next)++)])=($I_cc));
(((((($I_s)->$I_dyn_ltree)[($I_cc)]).$I_fc).$I_freq)++);
(($I_bflush)=((($I_s)->$I_sym_next)==(($I_s)->$I_sym_end)));
((($I_s)->$I_match_available)=(0));
}
if ((($I_flush)==(4))) {
((($I_s)->$I_block_start)=(($I_s)->$I_strstart));
($I_flush_pending((($I_s)->$I_strm)));
return ($I_finish_done);
}
if ((($I_s)->$I_sym_next)) {
((($I_s)->$I_block_start)=(($I_s)->$I_strstart));
($I_flush_pending((($I_s)->$I_strm)));
}
return ($I_block_done);
}

 i32 $I_deflate_rle($T_internal_state *$I_s, i32 $I_flush)
{
   i32  $I_bflush;
u32   $I_prev;
u8    *$I_scan;
u8    *$I_strend;
for (0;1; 0) {
if (((($I_s)->$I_lookahead)<=(258))) {
($I_fill_window(($I_s)));
if ((((($I_s)->$I_lookahead)<=(258))&(($I_flush)==(0)))) {
return ($I_need_more);
}
if (((($I_s)->$I_lookahead)==(0))) {
break;
}
}
((($I_s)->$I_match_length)=(0));
if ((((($I_s)->$I_lookahead)>=(3))&((($I_s)->$I_strstart)>(0)))) {
(($I_scan)=(((($I_s)->$I_window)+(($I_s)->$I_strstart))-(1)));
(($I_prev)=(*($I_scan)));
if ((((($I_prev)==(*(++($I_scan))))&(($I_prev)==(*(++($I_scan)))))&(($I_prev)==(*(++($I_scan)))))) {
(($I_strend)=(((($I_s)->$I_window)+(($I_s)->$I_strstart))+(258)));
while ((((((((((($I_prev)==(*(++($I_scan))))&(($I_prev)==(*(++($I_scan)))))&(($I_prev)==(*(++($I_scan)))))&(($I_prev)==(*(++($I_scan)))))&(($I_prev)==(*(++($I_scan)))))&(($I_prev)==(*(++($I_scan)))))&(($I_prev)==(*(++($I_scan)))))&(($I_prev)==(*(++($I_scan)))))&(($I_scan)<($I_strend)))) {
}
((($I_s)->$I_match_length)=((258)-([u32  ]((($I_strend)-($I_scan))))));
if (((($I_s)->$I_match_length)>(($I_s)->$I_lookahead))) {
((($I_s)->$I_match_length)=(($I_s)->$I_lookahead));
}
}
}
if (((($I_s)->$I_match_length)>=(3))) {
u8   $I_len = ([u8  ](((($I_s)->$I_match_length)-(3))));
u16   $I_dist = ([u16  ]((1)));
(((($I_s)->$I_sym_buf)[((($I_s)->$I_sym_next)++)])=([u8  ](($I_dist))));
(((($I_s)->$I_sym_buf)[((($I_s)->$I_sym_next)++)])=([u8  ]((($I_dist)>>(8)))));
(((($I_s)->$I_sym_buf)[((($I_s)->$I_sym_next)++)])=($I_len));
(($I_dist)--);
(((((($I_s)->$I_dyn_ltree)[(((($I__length_code)[($I_len)])+(256))+(1))]).$I_fc).$I_freq)++);
(($I_bflush)=((($I_s)->$I_sym_next)==(($I_s)->$I_sym_end)));
((($I_s)->$I_lookahead)-=(($I_s)->$I_match_length));
((($I_s)->$I_strstart)+=(($I_s)->$I_match_length));
((($I_s)->$I_match_length)=(0));
}
else {
u8   $I_cc = ((($I_s)->$I_window)[(($I_s)->$I_strstart)]);
(((($I_s)->$I_sym_buf)[((($I_s)->$I_sym_next)++)])=(0));
(((($I_s)->$I_sym_buf)[((($I_s)->$I_sym_next)++)])=(0));
(((($I_s)->$I_sym_buf)[((($I_s)->$I_sym_next)++)])=($I_cc));
(((((($I_s)->$I_dyn_ltree)[($I_cc)]).$I_fc).$I_freq)++);
(($I_bflush)=((($I_s)->$I_sym_next)==(($I_s)->$I_sym_end)));
((($I_s)->$I_lookahead)--);
((($I_s)->$I_strstart)++);
}
if (($I_bflush)) {
((($I_s)->$I_block_start)=(($I_s)->$I_strstart));
($I_flush_pending((($I_s)->$I_strm)));
}
}
((($I_s)->$I_insert)=(0));
if ((($I_flush)==(4))) {
((($I_s)->$I_block_start)=(($I_s)->$I_strstart));
($I_flush_pending((($I_s)->$I_strm)));
return ($I_finish_done);
}
if ((($I_s)->$I_sym_next)) {
((($I_s)->$I_block_start)=(($I_s)->$I_strstart));
($I_flush_pending((($I_s)->$I_strm)));
}
return ($I_block_done);
}

 i32 $I_deflate_huff($T_internal_state *$I_s, i32 $I_flush)
{
   i32  $I_bflush;
for (0;1; 0) {
if (((($I_s)->$I_lookahead)==(0))) {
($I_fill_window(($I_s)));
if (((($I_s)->$I_lookahead)==(0))) {
if ((($I_flush)==(0))) {
return ($I_need_more);
}
break;
}
}
((($I_s)->$I_match_length)=(0));
u8   $I_cc = ((($I_s)->$I_window)[(($I_s)->$I_strstart)]);
(((($I_s)->$I_sym_buf)[((($I_s)->$I_sym_next)++)])=(0));
(((($I_s)->$I_sym_buf)[((($I_s)->$I_sym_next)++)])=(0));
(((($I_s)->$I_sym_buf)[((($I_s)->$I_sym_next)++)])=($I_cc));
(((((($I_s)->$I_dyn_ltree)[($I_cc)]).$I_fc).$I_freq)++);
(($I_bflush)=((($I_s)->$I_sym_next)==(($I_s)->$I_sym_end)));
((($I_s)->$I_lookahead)--);
((($I_s)->$I_strstart)++);
if (($I_bflush)) {
((($I_s)->$I_block_start)=(($I_s)->$I_strstart));
($I_flush_pending((($I_s)->$I_strm)));
}
}
((($I_s)->$I_insert)=(0));
if ((($I_flush)==(4))) {
((($I_s)->$I_block_start)=(($I_s)->$I_strstart));
($I_flush_pending((($I_s)->$I_strm)));
return ($I_finish_done);
}
if ((($I_s)->$I_sym_next)) {
((($I_s)->$I_block_start)=(($I_s)->$I_strstart));
($I_flush_pending((($I_s)->$I_strm)));
}
return ($I_block_done);
}

  i32 $I___sputc(i32 $I__c, $T___sFILE *$I__p)
{
if ((((--(($I__p)->$I__w))>=(0))|(((($I__p)->$I__w)>=(($I__p)->$I__lbfsize))&(([i8 ](($I__c)))!=('\n'))))) {
return ((*((($I__p)->$I__p)++))=($I__c));
}
else {
return ($I___swbuf(($I__c), ($I__p)));
}
}

i32 $I_gzclose($T_gzFile_s *$I_file)
{
$T_anon_zFAtAH   *$I_state;
if ((($I_file)==([v0 *]((0))))) {
return (-(2));
}
(($I_state)=([$T_anon_zFAtAH  *](($I_file))));
}

 v0 $I_gz_reset($T_anon_zFAtAH  *$I_state)
{
(((($I_state)->$I_x).$I_have)=(0));
if (((($I_state)->$I_mode)==(7247))) {
((($I_state)->$I_eof)=(0));
((($I_state)->$I_past)=(0));
((($I_state)->$I_how)=(0));
}
else {
((($I_state)->$I_reset)=(0));
}
((($I_state)->$I_seek)=(0));
($I_gz_error(($I_state), (0), ([v0 *]((0)))));
(((($I_state)->$I_x).$I_pos)=(0));
(((($I_state)->$I_strm).$I_avail_in)=(0));
}

 $T_gzFile_s *$I_gz_open( v0 *$I_path, i32 $I_fd,  i8 *$I_mode)
{
$T_anon_zFAtAH   *$I_state;
u32    $I_len;
i32  $I_oflag;
i32  $I_cloexec = (0);
i32  $I_exclusive = (0);
if ((($I_path)==([v0 *]((0))))) {
return ([v0 *]((0)));
}
(($I_state)=([$T_anon_zFAtAH  *](($I_malloc((0))))));
if ((($I_state)==([v0 *]((0))))) {
return ([v0 *]((0)));
}
((($I_state)->$I_size)=(0));
((($I_state)->$I_want)=(8192));
((($I_state)->$I_msg)=([v0 *]((0))));
((($I_state)->$I_mode)=(0));
((($I_state)->$I_level)=(-(1)));
((($I_state)->$I_strategy)=(0));
((($I_state)->$I_direct)=(0));
while ((*($I_mode))) {
if ((((*($I_mode))>=('0'))&((*($I_mode))<=('9')))) {
((($I_state)->$I_level)=((*($I_mode))-('0')));
}
else {
for (u8 $_BNCU0o = 0; $_BNCU0o == 0; $_BNCU0o = 1) {
if ((*($I_mode)) == ('r')) {
((($I_state)->$I_mode)=(7247));
break;
}
else if ((*($I_mode)) == ('w')) {
((($I_state)->$I_mode)=(31153));
break;
}
else if ((*($I_mode)) == ('a')) {
((($I_state)->$I_mode)=(1));
break;
}
else if ((*($I_mode)) == ('+')) {
($I_free(($I_state)));
return ([v0 *]((0)));
}
else if ((*($I_mode)) == ('b')) {
break;
}
else if ((*($I_mode)) == ('e')) {
(($I_cloexec)=(1));
break;
}
else if ((*($I_mode)) == ('x')) {
(($I_exclusive)=(1));
break;
}
else if ((*($I_mode)) == ('f')) {
((($I_state)->$I_strategy)=(1));
break;
}
else if ((*($I_mode)) == ('h')) {
((($I_state)->$I_strategy)=(2));
break;
}
else if ((*($I_mode)) == ('R')) {
((($I_state)->$I_strategy)=(3));
break;
}
else if ((*($I_mode)) == ('F')) {
((($I_state)->$I_strategy)=(4));
break;
}
else if ((*($I_mode)) == ('T')) {
((($I_state)->$I_direct)=(1));
break;
}
else {
}
}
}
(($I_mode)++);
}
if (((($I_state)->$I_mode)==(0))) {
($I_free(($I_state)));
return ([v0 *]((0)));
}
if (((($I_state)->$I_mode)==(7247))) {
if ((($I_state)->$I_direct)) {
($I_free(($I_state)));
return ([v0 *]((0)));
}
((($I_state)->$I_direct)=(1));
}
(($I_len)=($I_strlen(([ i8 *](($I_path))))));
((($I_state)->$I_path)=([i8 *](($I_malloc((($I_len)+(1)))))));
if (((($I_state)->$I_path)==([v0 *]((0))))) {
($I_free(($I_state)));
return ([v0 *]((0)));
}
if ((($I_fd)==(-(1)))) {
((($I_state)->$I_fd)=($I_open(([ i8 *](($I_path))), ($I_oflag), (438))));
}
else {
((($I_state)->$I_fd)=($I_fd));
}
if (((($I_state)->$I_fd)==(-(1)))) {
($I_free((($I_state)->$I_path)));
($I_free(($I_state)));
return ([v0 *]((0)));
}
if (((($I_state)->$I_mode)==(1))) {
($I_lseek((($I_state)->$I_fd), (0), (2)));
((($I_state)->$I_mode)=(31153));
}
if (((($I_state)->$I_mode)==(7247))) {
((($I_state)->$I_start)=($I_lseek((($I_state)->$I_fd), (0), (1))));
if (((($I_state)->$I_start)==(-(1)))) {
((($I_state)->$I_start)=(0));
}
}
($I_gz_reset(($I_state)));
return ([$T_gzFile_s *](($I_state)));
}

$T_gzFile_s *$I_gzopen( i8 *$I_path,  i8 *$I_mode)
{
return ($I_gz_open(($I_path), (-(1)), ($I_mode)));
}

$T_gzFile_s *$I_gzopen64( i8 *$I_path,  i8 *$I_mode)
{
return ($I_gz_open(($I_path), (-(1)), ($I_mode)));
}

$T_gzFile_s *$I_gzdopen(i32 $I_fd,  i8 *$I_mode)
{
i8  *$I_path;
$T_gzFile_s  *$I_gz;
if (((($I_fd)==(-(1)))|((($I_path)=([i8 *](($I_malloc(((7)+((3)*(0))))))))==([v0 *]((0)))))) {
return ([v0 *]((0)));
}
(($I_gz)=($I_gz_open(($I_path), ($I_fd), ($I_mode))));
($I_free(($I_path)));
return ($I_gz);
}

i32 $I_gzbuffer($T_gzFile_s *$I_file, u32 $I_size)
{
$T_anon_zFAtAH   *$I_state;
if ((($I_file)==([v0 *]((0))))) {
return (-(1));
}
(($I_state)=([$T_anon_zFAtAH  *](($I_file))));
if ((((($I_state)->$I_mode)!=(7247))&((($I_state)->$I_mode)!=(31153)))) {
return (-(1));
}
if (((($I_state)->$I_size)!=(0))) {
return (-(1));
}
if (((($I_size)<<(1))<($I_size))) {
return (-(1));
}
if ((($I_size)<(8))) {
(($I_size)=(8));
}
((($I_state)->$I_want)=($I_size));
return (0);
}

i32 $I_gzrewind($T_gzFile_s *$I_file)
{
$T_anon_zFAtAH   *$I_state;
if ((($I_file)==([v0 *]((0))))) {
return (-(1));
}
(($I_state)=([$T_anon_zFAtAH  *](($I_file))));
if ((((($I_state)->$I_mode)!=(7247))|(((($I_state)->$I_err)!=(0))&((($I_state)->$I_err)!=(-(5)))))) {
return (-(1));
}
if ((($I_lseek((($I_state)->$I_fd), (($I_state)->$I_start), (0)))==(-(1)))) {
return (-(1));
}
($I_gz_reset(($I_state)));
return (0);
}

i64    $I_gzseek64($T_gzFile_s *$I_file, i64    $I_offset, i32 $I_whence)
{
u32  $I_n;
i64     $I_ret;
$T_anon_zFAtAH   *$I_state;
if ((($I_file)==([v0 *]((0))))) {
return (-(1));
}
(($I_state)=([$T_anon_zFAtAH  *](($I_file))));
if ((((($I_state)->$I_mode)!=(7247))&((($I_state)->$I_mode)!=(31153)))) {
return (-(1));
}
if ((((($I_state)->$I_err)!=(0))&((($I_state)->$I_err)!=(-(5))))) {
return (-(1));
}
if (((($I_whence)!=(0))&(($I_whence)!=(1)))) {
return (-(1));
}
if ((($I_whence)==(0))) {
(($I_offset)-=((($I_state)->$I_x).$I_pos));
}
else {
if ((($I_state)->$I_seek)) {
(($I_offset)+=(($I_state)->$I_skip));
}
}
((($I_state)->$I_seek)=(0));
if (((((($I_state)->$I_mode)==(7247))&((($I_state)->$I_how)==(1)))&((((($I_state)->$I_x).$I_pos)+($I_offset))>=(0)))) {
(($I_ret)=($I_lseek((($I_state)->$I_fd), (($I_offset)-([i64    ](((($I_state)->$I_x).$I_have)))), (1))));
if ((($I_ret)==(-(1)))) {
return (-(1));
}
(((($I_state)->$I_x).$I_have)=(0));
((($I_state)->$I_eof)=(0));
((($I_state)->$I_past)=(0));
((($I_state)->$I_seek)=(0));
($I_gz_error(($I_state), (0), ([v0 *]((0)))));
(((($I_state)->$I_strm).$I_avail_in)=(0));
(((($I_state)->$I_x).$I_pos)+=($I_offset));
return ((($I_state)->$I_x).$I_pos);
}
if ((($I_offset)<(0))) {
if (((($I_state)->$I_mode)!=(7247))) {
return (-(1));
}
(($I_offset)+=((($I_state)->$I_x).$I_pos));
if ((($I_offset)<(0))) {
return (-(1));
}
if ((($I_gzrewind(($I_file)))==(-(1)))) {
return (-(1));
}
}
if (((($I_state)->$I_mode)==(7247))) {
(((($I_state)->$I_x).$I_have)-=($I_n));
(((($I_state)->$I_x).$I_next)+=($I_n));
(((($I_state)->$I_x).$I_pos)+=($I_n));
(($I_offset)-=($I_n));
}
if (($I_offset)) {
((($I_state)->$I_seek)=(1));
((($I_state)->$I_skip)=($I_offset));
}
return (((($I_state)->$I_x).$I_pos)+($I_offset));
}

i64    $I_gzseek($T_gzFile_s *$I_file, i64    $I_offset, i32 $I_whence)
{
i64     $I_ret;
(($I_ret)=($I_gzseek64(($I_file), ([i64    ](($I_offset))), ($I_whence))));
}

i64    $I_gztell64($T_gzFile_s *$I_file)
{
$T_anon_zFAtAH   *$I_state;
if ((($I_file)==([v0 *]((0))))) {
return (-(1));
}
(($I_state)=([$T_anon_zFAtAH  *](($I_file))));
if ((((($I_state)->$I_mode)!=(7247))&((($I_state)->$I_mode)!=(31153)))) {
return (-(1));
}
}

i64    $I_gztell($T_gzFile_s *$I_file)
{
i64     $I_ret;
(($I_ret)=($I_gztell64(($I_file))));
}

i64    $I_gzoffset64($T_gzFile_s *$I_file)
{
i64     $I_offset;
$T_anon_zFAtAH   *$I_state;
if ((($I_file)==([v0 *]((0))))) {
return (-(1));
}
(($I_state)=([$T_anon_zFAtAH  *](($I_file))));
if ((((($I_state)->$I_mode)!=(7247))&((($I_state)->$I_mode)!=(31153)))) {
return (-(1));
}
(($I_offset)=($I_lseek((($I_state)->$I_fd), (0), (1))));
if ((($I_offset)==(-(1)))) {
return (-(1));
}
if (((($I_state)->$I_mode)==(7247))) {
(($I_offset)-=((($I_state)->$I_strm).$I_avail_in));
}
return ($I_offset);
}

i64    $I_gzoffset($T_gzFile_s *$I_file)
{
i64     $I_ret;
(($I_ret)=($I_gzoffset64(($I_file))));
}

i32 $I_gzeof($T_gzFile_s *$I_file)
{
$T_anon_zFAtAH   *$I_state;
if ((($I_file)==([v0 *]((0))))) {
return (0);
}
(($I_state)=([$T_anon_zFAtAH  *](($I_file))));
if ((((($I_state)->$I_mode)!=(7247))&((($I_state)->$I_mode)!=(31153)))) {
return (0);
}
}

 i8 *$I_gzerror($T_gzFile_s *$I_file, i32 *$I_errnum)
{
$T_anon_zFAtAH   *$I_state;
if ((($I_file)==([v0 *]((0))))) {
return ([v0 *]((0)));
}
(($I_state)=([$T_anon_zFAtAH  *](($I_file))));
if ((((($I_state)->$I_mode)!=(7247))&((($I_state)->$I_mode)!=(31153)))) {
return ([v0 *]((0)));
}
if ((($I_errnum)!=([v0 *]((0))))) {
((*($I_errnum))=(($I_state)->$I_err));
}
}

v0 $I_gzclearerr($T_gzFile_s *$I_file)
{
$T_anon_zFAtAH   *$I_state;
if ((($I_file)==([v0 *]((0))))) {
return;
}
(($I_state)=([$T_anon_zFAtAH  *](($I_file))));
if ((((($I_state)->$I_mode)!=(7247))&((($I_state)->$I_mode)!=(31153)))) {
return;
}
if (((($I_state)->$I_mode)==(7247))) {
((($I_state)->$I_eof)=(0));
((($I_state)->$I_past)=(0));
}
($I_gz_error(($I_state), (0), ([v0 *]((0)))));
}

v0 $I_gz_error($T_anon_zFAtAH  *$I_state, i32 $I_err,  i8 *$I_msg)
{
if (((($I_state)->$I_msg)!=([v0 *]((0))))) {
if (((($I_state)->$I_err)!=(-(4)))) {
($I_free((($I_state)->$I_msg)));
}
((($I_state)->$I_msg)=([v0 *]((0))));
}
if (((($I_err)!=(0))&(($I_err)!=(-(5))))) {
(((($I_state)->$I_x).$I_have)=(0));
}
((($I_state)->$I_err)=($I_err));
if ((($I_msg)==([v0 *]((0))))) {
return;
}
if ((($I_err)==(-(4)))) {
return;
}
if ((((($I_state)->$I_msg)=([i8 *](($I_malloc(((($I_strlen((($I_state)->$I_path)))+($I_strlen(($I_msg))))+(3)))))))==([v0 *]((0))))) {
((($I_state)->$I_err)=(-(4)));
return;
}
}

u32 $I_gz_intmax(v0 $A_0)
{
return (2147483647);
}

 i32 $I_gz_load($T_anon_zFAtAH  *$I_state, u8 *$I_buf, u32 $I_len, u32 *$I_have)
{
i32  $I_ret;
u32  $I_get;
u32  $I_max = ((([u32 ]((-(1))))>>(2))+(1));
((*($I_have))=(0));
while (((*($I_have))<($I_len))) {
(($I_get)=(($I_len)-(*($I_have))));
if ((($I_get)>($I_max))) {
(($I_get)=($I_max));
}
(($I_ret)=($I_read((($I_state)->$I_fd), (($I_buf)+(*($I_have))), ($I_get))));
if ((($I_ret)<=(0))) {
break;
}
((*($I_have))+=([u32 ](($I_ret))));
}
if ((($I_ret)<(0))) {
($I_gz_error(($I_state), (-(1)), ($I_strerror((*($I___error()))))));
return (-(1));
}
if ((($I_ret)==(0))) {
((($I_state)->$I_eof)=(1));
}
return (0);
}

 i32 $I_gz_avail($T_anon_zFAtAH  *$I_state)
{
u32  $I_got;
$T_z_stream_s   *$I_strm = (&(($I_state)->$I_strm));
if ((((($I_state)->$I_err)!=(0))&((($I_state)->$I_err)!=(-(5))))) {
return (-(1));
}
if (((($I_state)->$I_eof)==(0))) {
if ((($I_strm)->$I_avail_in)) {
u8  *$I_p = (($I_state)->$I_in);
u8  *$I_q = (($I_strm)->$I_next_in);
u32  $I_n = (($I_strm)->$I_avail_in);
while ((--($I_n))) {
((*(($I_p)++))=(*(($I_q)++)));
}
}
if ((($I_gz_load(($I_state), ((($I_state)->$I_in)+(($I_strm)->$I_avail_in)), ((($I_state)->$I_size)-(($I_strm)->$I_avail_in)), (&($I_got))))==(-(1)))) {
return (-(1));
}
((($I_strm)->$I_avail_in)+=($I_got));
((($I_strm)->$I_next_in)=(($I_state)->$I_in));
}
return (0);
}

 i32 $I_gz_look($T_anon_zFAtAH  *$I_state)
{
$T_z_stream_s   *$I_strm = (&(($I_state)->$I_strm));
if (((($I_state)->$I_size)==(0))) {
((($I_state)->$I_in)=([u8 *](($I_malloc((($I_state)->$I_want))))));
((($I_state)->$I_out)=([u8 *](($I_malloc(((($I_state)->$I_want)<<(1)))))));
if ((((($I_state)->$I_in)==([v0 *]((0))))|((($I_state)->$I_out)==([v0 *]((0)))))) {
($I_free((($I_state)->$I_out)));
($I_free((($I_state)->$I_in)));
($I_gz_error(($I_state), (-(4)), ("out of memory")));
return (-(1));
}
((($I_state)->$I_size)=(($I_state)->$I_want));
(((($I_state)->$I_strm).$I_zalloc)=(0));
(((($I_state)->$I_strm).$I_zfree)=(0));
(((($I_state)->$I_strm).$I_opaque)=(0));
(((($I_state)->$I_strm).$I_avail_in)=(0));
(((($I_state)->$I_strm).$I_next_in)=(0));
if ((($I_inflateInit2_((&(($I_state)->$I_strm)), ((15)+(16)), ("1.3.1.1-motley"), ([i32 ]((0)))))!=(0))) {
($I_free((($I_state)->$I_out)));
($I_free((($I_state)->$I_in)));
((($I_state)->$I_size)=(0));
($I_gz_error(($I_state), (-(4)), ("out of memory")));
return (-(1));
}
}
if (((($I_strm)->$I_avail_in)<(2))) {
if ((($I_gz_avail(($I_state)))==(-(1)))) {
return (-(1));
}
if (((($I_strm)->$I_avail_in)==(0))) {
return (0);
}
}
if (((((($I_strm)->$I_avail_in)>(1))&(((($I_strm)->$I_next_in)[(0)])==(31)))&(((($I_strm)->$I_next_in)[(1)])==(139)))) {
($I_inflateReset(($I_strm)));
((($I_state)->$I_how)=(2));
((($I_state)->$I_direct)=(0));
return (0);
}
if (((($I_state)->$I_direct)==(0))) {
((($I_strm)->$I_avail_in)=(0));
((($I_state)->$I_eof)=(1));
(((($I_state)->$I_x).$I_have)=(0));
return (0);
}
(((($I_state)->$I_x).$I_next)=(($I_state)->$I_out));
($I___builtin___memcpy_chk(((($I_state)->$I_x).$I_next), (($I_strm)->$I_next_in), (($I_strm)->$I_avail_in), ($I___builtin_object_size(((($I_state)->$I_x).$I_next), (0)))));
(((($I_state)->$I_x).$I_have)=(($I_strm)->$I_avail_in));
((($I_strm)->$I_avail_in)=(0));
((($I_state)->$I_how)=(1));
((($I_state)->$I_direct)=(1));
return (0);
}

 i32 $I_gz_decomp($T_anon_zFAtAH  *$I_state)
{
i32  $I_ret = (0);
u32  $I_had;
$T_z_stream_s   *$I_strm = (&(($I_state)->$I_strm));
(($I_had)=(($I_strm)->$I_avail_out));
while (((($I_strm)->$I_avail_out)&(($I_ret)!=(1)))) {
if ((((($I_strm)->$I_avail_in)==(0))&(($I_gz_avail(($I_state)))==(-(1))))) {
return (-(1));
}
if (((($I_strm)->$I_avail_in)==(0))) {
($I_gz_error(($I_state), (-(5)), ("unexpected end of file")));
break;
}
(($I_ret)=($I_inflate(($I_strm), (0))));
if (((($I_ret)==(-(2)))|(($I_ret)==(2)))) {
($I_gz_error(($I_state), (-(2)), ("internal error: inflate stream corrupt")));
return (-(1));
}
if ((($I_ret)==(-(4)))) {
($I_gz_error(($I_state), (-(4)), ("out of memory")));
return (-(1));
}
if ((($I_ret)==(-(3)))) {
return (-(1));
}
}
(((($I_state)->$I_x).$I_have)=(($I_had)-(($I_strm)->$I_avail_out)));
(((($I_state)->$I_x).$I_next)=((($I_strm)->$I_next_out)-((($I_state)->$I_x).$I_have)));
if ((($I_ret)==(1))) {
((($I_state)->$I_how)=(0));
}
return (0);
}

 i32 $I_gz_fetch($T_anon_zFAtAH  *$I_state)
{
$T_z_stream_s   *$I_strm = (&(($I_state)->$I_strm));
while (((((($I_state)->$I_x).$I_have)==(0))&((!(($I_state)->$I_eof))|(($I_strm)->$I_avail_in)))) {
for (u8 $_u60Bw2 = 0; $_u60Bw2 == 0; $_u60Bw2 = 1) {
if ((($I_state)->$I_how) == (0)) {
if ((($I_gz_look(($I_state)))==(-(1)))) {
return (-(1));
}
if (((($I_state)->$I_how)==(0))) {
return (0);
}
break;
}
else if ((($I_state)->$I_how) == (1)) {
if ((($I_gz_load(($I_state), (($I_state)->$I_out), ((($I_state)->$I_size)<<(1)), (&((($I_state)->$I_x).$I_have))))==(-(1)))) {
return (-(1));
}
(((($I_state)->$I_x).$I_next)=(($I_state)->$I_out));
return (0);
}
else if ((($I_state)->$I_how) == (2)) {
((($I_strm)->$I_avail_out)=((($I_state)->$I_size)<<(1)));
((($I_strm)->$I_next_out)=(($I_state)->$I_out));
if ((($I_gz_decomp(($I_state)))==(-(1)))) {
return (-(1));
}
}
}
}
return (0);
}

 i32 $I_gz_skip($T_anon_zFAtAH  *$I_state, i64    $I_len)
{
u32  $I_n;
while (($I_len)) {
if (((($I_state)->$I_x).$I_have)) {
(((($I_state)->$I_x).$I_have)-=($I_n));
(((($I_state)->$I_x).$I_next)+=($I_n));
(((($I_state)->$I_x).$I_pos)+=($I_n));
(($I_len)-=($I_n));
}
else {
if (((($I_state)->$I_eof)&(((($I_state)->$I_strm).$I_avail_in)==(0)))) {
break;
}
else {
if ((($I_gz_fetch(($I_state)))==(-(1)))) {
return (-(1));
}
}
}
}
return (0);
}

 u32   $I_gz_read($T_anon_zFAtAH  *$I_state, v0  $I_buf, u32   $I_len)
{
u32    $I_got;
u32  $I_n;
if ((($I_len)==(0))) {
return (0);
}
if ((($I_state)->$I_seek)) {
((($I_state)->$I_seek)=(0));
if ((($I_gz_skip(($I_state), (($I_state)->$I_skip)))==(-(1)))) {
return (0);
}
}
(($I_got)=(0));
while (($I_len)) {
(($I_n)=([u32 ]((-(1)))));
if ((($I_n)>($I_len))) {
(($I_n)=([u32 ](($I_len))));
}
if (((($I_state)->$I_x).$I_have)) {
if ((((($I_state)->$I_x).$I_have)<($I_n))) {
(($I_n)=((($I_state)->$I_x).$I_have));
}
($I___builtin___memcpy_chk(($I_buf), ((($I_state)->$I_x).$I_next), ($I_n), ($I___builtin_object_size(($I_buf), (0)))));
(((($I_state)->$I_x).$I_next)+=($I_n));
(((($I_state)->$I_x).$I_have)-=($I_n));
}
else {
if (((($I_state)->$I_eof)&(((($I_state)->$I_strm).$I_avail_in)==(0)))) {
((($I_state)->$I_past)=(1));
break;
}
else {
if ((((($I_state)->$I_how)==(0))|(($I_n)<((($I_state)->$I_size)<<(1))))) {
if ((($I_gz_fetch(($I_state)))==(-(1)))) {
return (0);
}
continue;
}
else {
if (((($I_state)->$I_how)==(1))) {
if ((($I_gz_load(($I_state), ([u8 *](($I_buf))), ($I_n), (&($I_n))))==(-(1)))) {
return (0);
}
}
else {
(((($I_state)->$I_strm).$I_avail_out)=($I_n));
(((($I_state)->$I_strm).$I_next_out)=([u8 *](($I_buf))));
if ((($I_gz_decomp(($I_state)))==(-(1)))) {
return (0);
}
(($I_n)=((($I_state)->$I_x).$I_have));
(((($I_state)->$I_x).$I_have)=(0));
}
}
}
}
(($I_len)-=($I_n));
(($I_buf)=(([i8 *](($I_buf)))+($I_n)));
(($I_got)+=($I_n));
(((($I_state)->$I_x).$I_pos)+=($I_n));
}
return ($I_got);
}

i32 $I_gzread($T_gzFile_s *$I_file, v0  $I_buf, u32 $I_len)
{
$T_anon_zFAtAH   *$I_state;
if ((($I_file)==([v0 *]((0))))) {
return (-(1));
}
(($I_state)=([$T_anon_zFAtAH  *](($I_file))));
if ((((($I_state)->$I_mode)!=(7247))|(((($I_state)->$I_err)!=(0))&((($I_state)->$I_err)!=(-(5)))))) {
return (-(1));
}
if ((([i32 ](($I_len)))<(0))) {
($I_gz_error(($I_state), (-(2)), ("request does not fit in an int")));
return (-(1));
}
(($I_len)=([u32 ](($I_gz_read(($I_state), ($I_buf), ($I_len))))));
if ((((($I_len)==(0))&((($I_state)->$I_err)!=(0)))&((($I_state)->$I_err)!=(-(5))))) {
return (-(1));
}
return ([i32 ](($I_len)));
}

u32   $I_gzfread(v0  $I_buf, u32   $I_size, u32   $I_nitems, $T_gzFile_s *$I_file)
{
u32    $I_len;
$T_anon_zFAtAH   *$I_state;
if ((($I_file)==([v0 *]((0))))) {
return (0);
}
(($I_state)=([$T_anon_zFAtAH  *](($I_file))));
if ((((($I_state)->$I_mode)!=(7247))|(((($I_state)->$I_err)!=(0))&((($I_state)->$I_err)!=(-(5)))))) {
return (0);
}
(($I_len)=(($I_nitems)*($I_size)));
if ((($I_size)&((($I_len)/($I_size))!=($I_nitems)))) {
($I_gz_error(($I_state), (-(2)), ("request does not fit in a size_t")));
return (0);
}
}

i32 $I_gzgetc($T_gzFile_s *$I_file)
{
u8  [1]$I_buf;
$T_anon_zFAtAH   *$I_state;
if ((($I_file)==([v0 *]((0))))) {
return (-(1));
}
(($I_state)=([$T_anon_zFAtAH  *](($I_file))));
if ((((($I_state)->$I_mode)!=(7247))|(((($I_state)->$I_err)!=(0))&((($I_state)->$I_err)!=(-(5)))))) {
return (-(1));
}
if (((($I_state)->$I_x).$I_have)) {
(((($I_state)->$I_x).$I_have)--);
(((($I_state)->$I_x).$I_pos)++);
return (*(((($I_state)->$I_x).$I_next)++));
}
}

i32 $I_gzgetc_($T_gzFile_s *$I_file)
{
return ($I_gzgetc(($I_file)));
}

i32 $I_gzungetc(i32 $I_c, $T_gzFile_s *$I_file)
{
$T_anon_zFAtAH   *$I_state;
if ((($I_file)==([v0 *]((0))))) {
return (-(1));
}
(($I_state)=([$T_anon_zFAtAH  *](($I_file))));
if (((((($I_state)->$I_mode)==(7247))&((($I_state)->$I_how)==(0)))&(((($I_state)->$I_x).$I_have)==(0)))) {
([v0 ](($I_gz_look(($I_state)))));
}
if ((((($I_state)->$I_mode)!=(7247))|(((($I_state)->$I_err)!=(0))&((($I_state)->$I_err)!=(-(5)))))) {
return (-(1));
}
if ((($I_state)->$I_seek)) {
((($I_state)->$I_seek)=(0));
if ((($I_gz_skip(($I_state), (($I_state)->$I_skip)))==(-(1)))) {
return (-(1));
}
}
if ((($I_c)<(0))) {
return (-(1));
}
if ((((($I_state)->$I_x).$I_have)==(0))) {
(((($I_state)->$I_x).$I_have)=(1));
(((($I_state)->$I_x).$I_next)=(((($I_state)->$I_out)+((($I_state)->$I_size)<<(1)))-(1)));
((((($I_state)->$I_x).$I_next)[(0)])=([u8 ](($I_c))));
(((($I_state)->$I_x).$I_pos)--);
((($I_state)->$I_past)=(0));
return ($I_c);
}
if ((((($I_state)->$I_x).$I_have)==((($I_state)->$I_size)<<(1)))) {
($I_gz_error(($I_state), (-(3)), ("out of room to push characters")));
return (-(1));
}
if ((((($I_state)->$I_x).$I_next)==(($I_state)->$I_out))) {
u8  *$I_src = ((($I_state)->$I_out)+((($I_state)->$I_x).$I_have));
u8  *$I_dest = ((($I_state)->$I_out)+((($I_state)->$I_size)<<(1)));
while ((($I_src)>(($I_state)->$I_out))) {
((*(--($I_dest)))=(*(--($I_src))));
}
(((($I_state)->$I_x).$I_next)=($I_dest));
}
(((($I_state)->$I_x).$I_have)++);
(((($I_state)->$I_x).$I_next)--);
((((($I_state)->$I_x).$I_next)[(0)])=([u8 ](($I_c))));
(((($I_state)->$I_x).$I_pos)--);
((($I_state)->$I_past)=(0));
return ($I_c);
}

i8 *$I_gzgets($T_gzFile_s *$I_file, i8 *$I_buf, i32 $I_len)
{
u32  $I_left;
u32  $I_n;
i8  *$I_str;
u8  *$I_eol;
$T_anon_zFAtAH   *$I_state;
if ((((($I_file)==([v0 *]((0))))|(($I_buf)==([v0 *]((0)))))|(($I_len)<(1)))) {
return ([v0 *]((0)));
}
(($I_state)=([$T_anon_zFAtAH  *](($I_file))));
if ((((($I_state)->$I_mode)!=(7247))|(((($I_state)->$I_err)!=(0))&((($I_state)->$I_err)!=(-(5)))))) {
return ([v0 *]((0)));
}
if ((($I_state)->$I_seek)) {
((($I_state)->$I_seek)=(0));
if ((($I_gz_skip(($I_state), (($I_state)->$I_skip)))==(-(1)))) {
return ([v0 *]((0)));
}
}
(($I_str)=($I_buf));
(($I_left)=(([u32 ](($I_len)))-(1)));
if (($I_left)) {
while ((($I_left)&(($I_eol)==([v0 *]((0)))))) {
if (((((($I_state)->$I_x).$I_have)==(0))&(($I_gz_fetch(($I_state)))==(-(1))))) {
return ([v0 *]((0)));
}
if ((((($I_state)->$I_x).$I_have)==(0))) {
((($I_state)->$I_past)=(1));
break;
}
(($I_eol)=([u8 *](($I_memchr(((($I_state)->$I_x).$I_next), ('\n'), ($I_n))))));
if ((($I_eol)!=([v0 *]((0))))) {
(($I_n)=(([u32 ]((($I_eol)-((($I_state)->$I_x).$I_next))))+(1)));
}
($I___builtin___memcpy_chk(($I_buf), ((($I_state)->$I_x).$I_next), ($I_n), ($I___builtin_object_size(($I_buf), (0)))));
(((($I_state)->$I_x).$I_have)-=($I_n));
(((($I_state)->$I_x).$I_next)+=($I_n));
(((($I_state)->$I_x).$I_pos)+=($I_n));
(($I_left)-=($I_n));
(($I_buf)+=($I_n));
}
}
if ((($I_buf)==($I_str))) {
return ([v0 *]((0)));
}
((($I_buf)[(0)])=(0));
return ($I_str);
}

i32 $I_gzdirect($T_gzFile_s *$I_file)
{
$T_anon_zFAtAH   *$I_state;
if ((($I_file)==([v0 *]((0))))) {
return (0);
}
(($I_state)=([$T_anon_zFAtAH  *](($I_file))));
if (((((($I_state)->$I_mode)==(7247))&((($I_state)->$I_how)==(0)))&(((($I_state)->$I_x).$I_have)==(0)))) {
([v0 ](($I_gz_look(($I_state)))));
}
return (($I_state)->$I_direct);
}

i32 $I_gzclose_r($T_gzFile_s *$I_file)
{
i32  $I_ret;
i32  $I_err;
$T_anon_zFAtAH   *$I_state;
if ((($I_file)==([v0 *]((0))))) {
return (-(2));
}
(($I_state)=([$T_anon_zFAtAH  *](($I_file))));
if (((($I_state)->$I_mode)!=(7247))) {
return (-(2));
}
if ((($I_state)->$I_size)) {
($I_inflateEnd((&(($I_state)->$I_strm))));
($I_free((($I_state)->$I_out)));
($I_free((($I_state)->$I_in)));
}
($I_gz_error(($I_state), (0), ([v0 *]((0)))));
($I_free((($I_state)->$I_path)));
(($I_ret)=($I_close((($I_state)->$I_fd))));
($I_free(($I_state)));
}

 i32 $I_gz_init($T_anon_zFAtAH  *$I_state)
{
i32  $I_ret;
$T_z_stream_s   *$I_strm = (&(($I_state)->$I_strm));
((($I_state)->$I_in)=([u8 *](($I_malloc(((($I_state)->$I_want)<<(1)))))));
if (((($I_state)->$I_in)==([v0 *]((0))))) {
($I_gz_error(($I_state), (-(4)), ("out of memory")));
return (-(1));
}
if ((!(($I_state)->$I_direct))) {
((($I_state)->$I_out)=([u8 *](($I_malloc((($I_state)->$I_want))))));
if (((($I_state)->$I_out)==([v0 *]((0))))) {
($I_free((($I_state)->$I_in)));
($I_gz_error(($I_state), (-(4)), ("out of memory")));
return (-(1));
}
((($I_strm)->$I_zalloc)=(0));
((($I_strm)->$I_zfree)=(0));
((($I_strm)->$I_opaque)=(0));
(($I_ret)=($I_deflateInit2_(($I_strm), (($I_state)->$I_level), (8), ((15)+(16)), (8), (($I_state)->$I_strategy), ("1.3.1.1-motley"), ([i32 ]((0))))));
if ((($I_ret)!=(0))) {
($I_free((($I_state)->$I_out)));
($I_free((($I_state)->$I_in)));
($I_gz_error(($I_state), (-(4)), ("out of memory")));
return (-(1));
}
((($I_strm)->$I_next_in)=([v0 *]((0))));
}
((($I_state)->$I_size)=(($I_state)->$I_want));
if ((!(($I_state)->$I_direct))) {
((($I_strm)->$I_avail_out)=(($I_state)->$I_size));
((($I_strm)->$I_next_out)=(($I_state)->$I_out));
(((($I_state)->$I_x).$I_next)=(($I_strm)->$I_next_out));
}
return (0);
}

 i32 $I_gz_comp($T_anon_zFAtAH  *$I_state, i32 $I_flush)
{
i32  $I_ret;
i32  $I_writ;
u32  $I_have;
u32  $I_put;
u32  $I_max = ((([u32 ]((-(1))))>>(2))+(1));
$T_z_stream_s   *$I_strm = (&(($I_state)->$I_strm));
if ((((($I_state)->$I_size)==(0))&(($I_gz_init(($I_state)))==(-(1))))) {
return (-(1));
}
if ((($I_state)->$I_direct)) {
while ((($I_strm)->$I_avail_in)) {
(($I_writ)=($I_write((($I_state)->$I_fd), (($I_strm)->$I_next_in), ($I_put))));
if ((($I_writ)<(0))) {
($I_gz_error(($I_state), (-(1)), ($I_strerror((*($I___error()))))));
return (-(1));
}
((($I_strm)->$I_avail_in)-=([u32 ](($I_writ))));
((($I_strm)->$I_next_in)+=($I_writ));
}
return (0);
}
if ((($I_state)->$I_reset)) {
if (((($I_strm)->$I_avail_in)==(0))) {
return (0);
}
($I_deflateReset(($I_strm)));
((($I_state)->$I_reset)=(0));
}
(($I_ret)=(0));
while (($I_have)) {
if ((((($I_strm)->$I_avail_out)==(0))|((($I_flush)!=(0))&((($I_flush)!=(4))|(($I_ret)==(1)))))) {
while (((($I_strm)->$I_next_out)>((($I_state)->$I_x).$I_next))) {
(($I_writ)=($I_write((($I_state)->$I_fd), ((($I_state)->$I_x).$I_next), ($I_put))));
if ((($I_writ)<(0))) {
($I_gz_error(($I_state), (-(1)), ($I_strerror((*($I___error()))))));
return (-(1));
}
(((($I_state)->$I_x).$I_next)+=($I_writ));
}
if (((($I_strm)->$I_avail_out)==(0))) {
((($I_strm)->$I_avail_out)=(($I_state)->$I_size));
((($I_strm)->$I_next_out)=(($I_state)->$I_out));
(((($I_state)->$I_x).$I_next)=(($I_state)->$I_out));
}
}
(($I_have)=(($I_strm)->$I_avail_out));
(($I_ret)=($I_deflate(($I_strm), ($I_flush))));
if ((($I_ret)==(-(2)))) {
($I_gz_error(($I_state), (-(2)), ("internal error: deflate stream corrupt")));
return (-(1));
}
(($I_have)-=(($I_strm)->$I_avail_out));
}
if ((($I_flush)==(4))) {
((($I_state)->$I_reset)=(1));
}
return (0);
}

 i32 $I_gz_zero($T_anon_zFAtAH  *$I_state, i64    $I_len)
{
i32  $I_first;
u32  $I_n;
$T_z_stream_s   *$I_strm = (&(($I_state)->$I_strm));
if (((($I_strm)->$I_avail_in)&(($I_gz_comp(($I_state), (0)))==(-(1))))) {
return (-(1));
}
(($I_first)=(1));
while (($I_len)) {
if (($I_first)) {
($I___builtin___memset_chk((($I_state)->$I_in), (0), ($I_n), ($I___builtin_object_size((($I_state)->$I_in), (0)))));
(($I_first)=(0));
}
((($I_strm)->$I_avail_in)=($I_n));
((($I_strm)->$I_next_in)=(($I_state)->$I_in));
(((($I_state)->$I_x).$I_pos)+=($I_n));
if ((($I_gz_comp(($I_state), (0)))==(-(1)))) {
return (-(1));
}
(($I_len)-=($I_n));
}
return (0);
}

 u32   $I_gz_write($T_anon_zFAtAH  *$I_state, v0   $I_buf, u32   $I_len)
{
u32    $I_put = ($I_len);
if ((($I_len)==(0))) {
return (0);
}
if ((((($I_state)->$I_size)==(0))&(($I_gz_init(($I_state)))==(-(1))))) {
return (0);
}
if ((($I_state)->$I_seek)) {
((($I_state)->$I_seek)=(0));
if ((($I_gz_zero(($I_state), (($I_state)->$I_skip)))==(-(1)))) {
return (0);
}
}
if ((($I_len)<(($I_state)->$I_size))) {
while (($I_len)) {
u32  $I_have;
u32  $I_copy;
if ((((($I_state)->$I_strm).$I_avail_in)==(0))) {
(((($I_state)->$I_strm).$I_next_in)=(($I_state)->$I_in));
}
(($I_have)=([u32 ](((((($I_state)->$I_strm).$I_next_in)+((($I_state)->$I_strm).$I_avail_in))-(($I_state)->$I_in)))));
(($I_copy)=((($I_state)->$I_size)-($I_have)));
if ((($I_copy)>($I_len))) {
(($I_copy)=([u32 ](($I_len))));
}
($I___builtin___memcpy_chk(((($I_state)->$I_in)+($I_have)), ($I_buf), ($I_copy), ($I___builtin_object_size(((($I_state)->$I_in)+($I_have)), (0)))));
(((($I_state)->$I_strm).$I_avail_in)+=($I_copy));
(((($I_state)->$I_x).$I_pos)+=($I_copy));
(($I_buf)=(([ i8 *](($I_buf)))+($I_copy)));
(($I_len)-=($I_copy));
if ((($I_len)&(($I_gz_comp(($I_state), (0)))==(-(1))))) {
return (0);
}
}
}
else {
if ((((($I_state)->$I_strm).$I_avail_in)&(($I_gz_comp(($I_state), (0)))==(-(1))))) {
return (0);
}
(((($I_state)->$I_strm).$I_next_in)=([u8   *](($I_buf))));
while (($I_len)) {
u32  $I_n = ([u32 ]((-(1))));
if ((($I_n)>($I_len))) {
(($I_n)=([u32 ](($I_len))));
}
(((($I_state)->$I_strm).$I_avail_in)=($I_n));
(((($I_state)->$I_x).$I_pos)+=($I_n));
if ((($I_gz_comp(($I_state), (0)))==(-(1)))) {
return (0);
}
(($I_len)-=($I_n));
}
}
return ($I_put);
}

i32 $I_gzwrite($T_gzFile_s *$I_file, v0   $I_buf, u32 $I_len)
{
$T_anon_zFAtAH   *$I_state;
if ((($I_file)==([v0 *]((0))))) {
return (0);
}
(($I_state)=([$T_anon_zFAtAH  *](($I_file))));
if ((((($I_state)->$I_mode)!=(31153))|((($I_state)->$I_err)!=(0)))) {
return (0);
}
if ((([i32 ](($I_len)))<(0))) {
($I_gz_error(($I_state), (-(3)), ("requested length does not fit in int")));
return (0);
}
return ([i32 ](($I_gz_write(($I_state), ($I_buf), ($I_len)))));
}

u32   $I_gzfwrite(v0   $I_buf, u32   $I_size, u32   $I_nitems, $T_gzFile_s *$I_file)
{
u32    $I_len;
$T_anon_zFAtAH   *$I_state;
if ((($I_file)==([v0 *]((0))))) {
return (0);
}
(($I_state)=([$T_anon_zFAtAH  *](($I_file))));
if ((((($I_state)->$I_mode)!=(31153))|((($I_state)->$I_err)!=(0)))) {
return (0);
}
(($I_len)=(($I_nitems)*($I_size)));
if ((($I_size)&((($I_len)/($I_size))!=($I_nitems)))) {
($I_gz_error(($I_state), (-(2)), ("request does not fit in a size_t")));
return (0);
}
}

i32 $I_gzputc($T_gzFile_s *$I_file, i32 $I_c)
{
u32  $I_have;
u8  [1]$I_buf;
$T_anon_zFAtAH   *$I_state;
$T_z_stream_s   *$I_strm;
if ((($I_file)==([v0 *]((0))))) {
return (-(1));
}
(($I_state)=([$T_anon_zFAtAH  *](($I_file))));
(($I_strm)=(&(($I_state)->$I_strm)));
if ((((($I_state)->$I_mode)!=(31153))|((($I_state)->$I_err)!=(0)))) {
return (-(1));
}
if ((($I_state)->$I_seek)) {
((($I_state)->$I_seek)=(0));
if ((($I_gz_zero(($I_state), (($I_state)->$I_skip)))==(-(1)))) {
return (-(1));
}
}
if ((($I_state)->$I_size)) {
if (((($I_strm)->$I_avail_in)==(0))) {
((($I_strm)->$I_next_in)=(($I_state)->$I_in));
}
(($I_have)=([u32 ]((((($I_strm)->$I_next_in)+(($I_strm)->$I_avail_in))-(($I_state)->$I_in)))));
if ((($I_have)<(($I_state)->$I_size))) {
(((($I_state)->$I_in)[($I_have)])=([u8 ](($I_c))));
((($I_strm)->$I_avail_in)++);
(((($I_state)->$I_x).$I_pos)++);
return (($I_c)&(255));
}
}
((($I_buf)[(0)])=([u8 ](($I_c))));
if ((($I_gz_write(($I_state), ($I_buf), (1)))!=(1))) {
return (-(1));
}
return (($I_c)&(255));
}

i32 $I_gzputs($T_gzFile_s *$I_file,  i8 *$I_s)
{
u32    $I_len;
u32    $I_put;
$T_anon_zFAtAH   *$I_state;
if ((($I_file)==([v0 *]((0))))) {
return (-(1));
}
(($I_state)=([$T_anon_zFAtAH  *](($I_file))));
if ((((($I_state)->$I_mode)!=(31153))|((($I_state)->$I_err)!=(0)))) {
return (-(1));
}
(($I_len)=($I_strlen(($I_s))));
if (((([i32 ](($I_len)))<(0))|(([u32 ](($I_len)))!=($I_len)))) {
($I_gz_error(($I_state), (-(2)), ("string length does not fit in int")));
return (-(1));
}
(($I_put)=($I_gz_write(($I_state), ($I_s), ($I_len))));
}

i32 $I_gzvprintf($T_gzFile_s *$I_file,  i8 *$I_format, $T_anon_Yl5btd   $I_va)
{
i32  $I_len;
u32  $I_left;
i8  *$I_next;
$T_anon_zFAtAH   *$I_state;
$T_z_stream_s   *$I_strm;
if ((($I_file)==([v0 *]((0))))) {
return (-(2));
}
(($I_state)=([$T_anon_zFAtAH  *](($I_file))));
(($I_strm)=(&(($I_state)->$I_strm)));
if ((((($I_state)->$I_mode)!=(31153))|((($I_state)->$I_err)!=(0)))) {
return (-(2));
}
if ((((($I_state)->$I_size)==(0))&(($I_gz_init(($I_state)))==(-(1))))) {
return (($I_state)->$I_err);
}
if ((($I_state)->$I_seek)) {
((($I_state)->$I_seek)=(0));
if ((($I_gz_zero(($I_state), (($I_state)->$I_skip)))==(-(1)))) {
return (($I_state)->$I_err);
}
}
if (((($I_strm)->$I_avail_in)==(0))) {
((($I_strm)->$I_next_in)=(($I_state)->$I_in));
}
(($I_next)=([i8 *]((((($I_state)->$I_in)+((($I_strm)->$I_next_in)-(($I_state)->$I_in)))+(($I_strm)->$I_avail_in)))));
((($I_next)[((($I_state)->$I_size)-(1))])=(0));
if ((((($I_len)==(0))|(([u32 ](($I_len)))>=(($I_state)->$I_size)))|((($I_next)[((($I_state)->$I_size)-(1))])!=(0)))) {
return (0);
}
((($I_strm)->$I_avail_in)+=([u32 ](($I_len))));
(((($I_state)->$I_x).$I_pos)+=($I_len));
if (((($I_strm)->$I_avail_in)>=(($I_state)->$I_size))) {
(($I_left)=((($I_strm)->$I_avail_in)-(($I_state)->$I_size)));
((($I_strm)->$I_avail_in)=(($I_state)->$I_size));
if ((($I_gz_comp(($I_state), (0)))==(-(1)))) {
return (($I_state)->$I_err);
}
($I___builtin___memmove_chk((($I_state)->$I_in), ((($I_state)->$I_in)+(($I_state)->$I_size)), ($I_left), ($I___builtin_object_size((($I_state)->$I_in), (0)))));
((($I_strm)->$I_next_in)=(($I_state)->$I_in));
((($I_strm)->$I_avail_in)=($I_left));
}
return ($I_len);
}

i32 $I_gzprintf($T_gzFile_s *$I_file,  i8 *$I_format)
{
$T_anon_Yl5btd    $I_va;
i32  $I_ret;
($I___builtin_va_start(($I_va), ($I_format)));
(($I_ret)=($I_gzvprintf(($I_file), ($I_format), ($I_va))));
($I___builtin_va_end(($I_va)));
return ($I_ret);
}

i32 $I_gzflush($T_gzFile_s *$I_file, i32 $I_flush)
{
$T_anon_zFAtAH   *$I_state;
if ((($I_file)==([v0 *]((0))))) {
return (-(2));
}
(($I_state)=([$T_anon_zFAtAH  *](($I_file))));
if ((((($I_state)->$I_mode)!=(31153))|((($I_state)->$I_err)!=(0)))) {
return (-(2));
}
if (((($I_flush)<(0))|(($I_flush)>(4)))) {
return (-(2));
}
if ((($I_state)->$I_seek)) {
((($I_state)->$I_seek)=(0));
if ((($I_gz_zero(($I_state), (($I_state)->$I_skip)))==(-(1)))) {
return (($I_state)->$I_err);
}
}
([v0 ](($I_gz_comp(($I_state), ($I_flush)))));
return (($I_state)->$I_err);
}

i32 $I_gzsetparams($T_gzFile_s *$I_file, i32 $I_level, i32 $I_strategy)
{
$T_anon_zFAtAH   *$I_state;
$T_z_stream_s   *$I_strm;
if ((($I_file)==([v0 *]((0))))) {
return (-(2));
}
(($I_state)=([$T_anon_zFAtAH  *](($I_file))));
(($I_strm)=(&(($I_state)->$I_strm)));
if (((((($I_state)->$I_mode)!=(31153))|((($I_state)->$I_err)!=(0)))|(($I_state)->$I_direct))) {
return (-(2));
}
if (((($I_level)==(($I_state)->$I_level))&(($I_strategy)==(($I_state)->$I_strategy)))) {
return (0);
}
if ((($I_state)->$I_seek)) {
((($I_state)->$I_seek)=(0));
if ((($I_gz_zero(($I_state), (($I_state)->$I_skip)))==(-(1)))) {
return (($I_state)->$I_err);
}
}
if ((($I_state)->$I_size)) {
if (((($I_strm)->$I_avail_in)&(($I_gz_comp(($I_state), (5)))==(-(1))))) {
return (($I_state)->$I_err);
}
($I_deflateParams(($I_strm), ($I_level), ($I_strategy)));
}
((($I_state)->$I_level)=($I_level));
((($I_state)->$I_strategy)=($I_strategy));
return (0);
}

i32 $I_gzclose_w($T_gzFile_s *$I_file)
{
i32  $I_ret = (0);
$T_anon_zFAtAH   *$I_state;
if ((($I_file)==([v0 *]((0))))) {
return (-(2));
}
(($I_state)=([$T_anon_zFAtAH  *](($I_file))));
if (((($I_state)->$I_mode)!=(31153))) {
return (-(2));
}
if ((($I_state)->$I_seek)) {
((($I_state)->$I_seek)=(0));
if ((($I_gz_zero(($I_state), (($I_state)->$I_skip)))==(-(1)))) {
(($I_ret)=(($I_state)->$I_err));
}
}
if ((($I_gz_comp(($I_state), (4)))==(-(1)))) {
(($I_ret)=(($I_state)->$I_err));
}
if ((($I_state)->$I_size)) {
if ((!(($I_state)->$I_direct))) {
([v0 ](($I_deflateEnd((&(($I_state)->$I_strm))))));
($I_free((($I_state)->$I_out)));
}
($I_free((($I_state)->$I_in)));
}
($I_gz_error(($I_state), (0), ([v0 *]((0)))));
($I_free((($I_state)->$I_path)));
if ((($I_close((($I_state)->$I_fd)))==(-(1)))) {
(($I_ret)=(-(1)));
}
($I_free(($I_state)));
return ($I_ret);
}

i32 $I_inflateBackInit_($T_z_stream_s  *$I_strm, i32 $I_windowBits, u8 *$I_window,  i8 *$I_version, i32 $I_stream_size)
{
$T_inflate_state  *$I_state;
if ((((($I_version)==(0))|((($I_version)[(0)])!=(('1'))))|(($I_stream_size)!=([i32 ]((0)))))) {
return (-(6));
}
if (((((($I_strm)==(0))|(($I_window)==(0)))|(($I_windowBits)<(8)))|(($I_windowBits)>(15)))) {
return (-(2));
}
((($I_strm)->$I_msg)=(0));
if (((($I_strm)->$I_zalloc)==([v0  ]((0))))) {
((($I_strm)->$I_opaque)=([v0  ]((0))));
}
if ((($I_state)==(0))) {
return (-(4));
}
((($I_strm)->$I_state)=([$T_internal_state *](($I_state))));
((($I_state)->$I_dmax)=(32768));
((($I_state)->$I_wbits)=([u32  ](($I_windowBits))));
((($I_state)->$I_wsize)=((1)<<($I_windowBits)));
((($I_state)->$I_window)=($I_window));
((($I_state)->$I_wnext)=(0));
((($I_state)->$I_whave)=(0));
((($I_state)->$I_sane)=(1));
return (0);
}

 v0 $I_fixedtables($T_inflate_state *$I_state)
{
  $T_anon_WzN6Vy  [512]$I_lenfix;
  $T_anon_WzN6Vy  [32]$I_distfix;
((($I_state)->$I_lencode)=($I_lenfix));
((($I_state)->$I_lenbits)=(9));
((($I_state)->$I_distcode)=($I_distfix));
((($I_state)->$I_distbits)=(5));
}

i32 $I_inflateBack($T_z_stream_s  *$I_strm, v0  $I_in, v0 *$I_in_desc, v0  $I_out, v0 *$I_out_desc)
{
$T_inflate_state  *$I_state;
u8  *$I_next;
u8  *$I_put;
u32  $I_have;
u32  $I_left;
u32  $I_hold;
u32  $I_bits;
u32  $I_copy;
u8  *$I_from;
$T_anon_WzN6Vy  $I_here;
$T_anon_WzN6Vy  $I_last;
u32  $I_len;
i32  $I_ret;
  u16  [19]$I_order;
if (((($I_strm)==(0))|((($I_strm)->$I_state)==(0)))) {
return (-(2));
}
(($I_state)=([$T_inflate_state *]((($I_strm)->$I_state))));
((($I_strm)->$I_msg)=(0));
((($I_state)->$I_mode)=($I_TYPE));
((($I_state)->$I_last)=(0));
((($I_state)->$I_whave)=(0));
(($I_next)=(($I_strm)->$I_next_in));
(($I_hold)=(0));
(($I_bits)=(0));
(($I_put)=(($I_state)->$I_window));
(($I_left)=(($I_state)->$I_wsize));
for (0;1; 0) {
for (u8 $_YCX4ox = 0; $_YCX4ox == 0; $_YCX4ox = 1) {
if ((($I_state)->$I_mode) == ($I_TYPE)) {
if ((($I_state)->$I_last)) {
while ((0)) {
(($I_hold)>>=(($I_bits)&(7)));
(($I_bits)-=(($I_bits)&(7)));
}
((($I_state)->$I_mode)=($I_DONE));
break;
}
while ((0)) {
while ((($I_bits)<([u32 ]((3))))) {
while ((0)) {
while ((0)) {
if ((($I_have)==(0))) {
if ((($I_have)==(0))) {
(($I_next)=(0));
(($I_ret)=(-(5)));
}
}
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
}
((($I_state)->$I_last)=(([u32 ](($I_hold)))&(((1)<<(1))-(1))));
while ((0)) {
(($I_hold)>>=(1));
(($I_bits)-=([u32 ]((1))));
}
for (u8 $_UQJpAC = 0; $_UQJpAC == 0; $_UQJpAC = 1) {
if ((([u32 ](($I_hold)))&(((1)<<(2))-(1))) == (0)) {
((($I_state)->$I_mode)=($I_STORED));
break;
}
else if ((([u32 ](($I_hold)))&(((1)<<(2))-(1))) == (1)) {
($I_fixedtables(($I_state)));
((($I_state)->$I_mode)=($I_LEN));
break;
}
else if ((([u32 ](($I_hold)))&(((1)<<(2))-(1))) == (2)) {
((($I_state)->$I_mode)=($I_TABLE));
break;
}
else if ((([u32 ](($I_hold)))&(((1)<<(2))-(1))) == (3)) {
((($I_strm)->$I_msg)=([i8 *](("invalid block type"))));
((($I_state)->$I_mode)=($I_BAD));
}
}
while ((0)) {
(($I_hold)>>=(2));
(($I_bits)-=([u32 ]((2))));
}
break;
}
else if ((($I_state)->$I_mode) == ($I_STORED)) {
while ((0)) {
(($I_hold)>>=(($I_bits)&(7)));
(($I_bits)-=(($I_bits)&(7)));
}
while ((0)) {
while ((($I_bits)<([u32 ]((32))))) {
while ((0)) {
while ((0)) {
if ((($I_have)==(0))) {
if ((($I_have)==(0))) {
(($I_next)=(0));
(($I_ret)=(-(5)));
}
}
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
}
if (((($I_hold)&(65535))!=((($I_hold)>>(16))^(65535)))) {
((($I_strm)->$I_msg)=([i8 *](("invalid stored block lengths"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
((($I_state)->$I_length)=(([u32 ](($I_hold)))&(65535)));
while ((0)) {
(($I_hold)=(0));
(($I_bits)=(0));
}
while (((($I_state)->$I_length)!=(0))) {
(($I_copy)=(($I_state)->$I_length));
while ((0)) {
if ((($I_have)==(0))) {
if ((($I_have)==(0))) {
(($I_next)=(0));
(($I_ret)=(-(5)));
}
}
}
while ((0)) {
if ((($I_left)==(0))) {
(($I_put)=(($I_state)->$I_window));
(($I_left)=(($I_state)->$I_wsize));
((($I_state)->$I_whave)=($I_left));
if ((1)) {
(($I_ret)=(-(5)));
}
}
}
if ((($I_copy)>($I_have))) {
(($I_copy)=($I_have));
}
if ((($I_copy)>($I_left))) {
(($I_copy)=($I_left));
}
($I___builtin___memcpy_chk(($I_put), ($I_next), ($I_copy), ($I___builtin_object_size(($I_put), (0)))));
(($I_have)-=($I_copy));
(($I_next)+=($I_copy));
(($I_left)-=($I_copy));
(($I_put)+=($I_copy));
((($I_state)->$I_length)-=($I_copy));
}
((($I_state)->$I_mode)=($I_TYPE));
break;
}
else if ((($I_state)->$I_mode) == ($I_TABLE)) {
while ((0)) {
while ((($I_bits)<([u32 ]((14))))) {
while ((0)) {
while ((0)) {
if ((($I_have)==(0))) {
if ((($I_have)==(0))) {
(($I_next)=(0));
(($I_ret)=(-(5)));
}
}
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
}
((($I_state)->$I_nlen)=((([u32 ](($I_hold)))&(((1)<<(5))-(1)))+(257)));
while ((0)) {
(($I_hold)>>=(5));
(($I_bits)-=([u32 ]((5))));
}
((($I_state)->$I_ndist)=((([u32 ](($I_hold)))&(((1)<<(5))-(1)))+(1)));
while ((0)) {
(($I_hold)>>=(5));
(($I_bits)-=([u32 ]((5))));
}
((($I_state)->$I_ncode)=((([u32 ](($I_hold)))&(((1)<<(4))-(1)))+(4)));
while ((0)) {
(($I_hold)>>=(4));
(($I_bits)-=([u32 ]((4))));
}
if ((((($I_state)->$I_nlen)>(286))|((($I_state)->$I_ndist)>(30)))) {
((($I_strm)->$I_msg)=([i8 *](("too many length or distance symbols"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
((($I_state)->$I_have)=(0));
while (((($I_state)->$I_have)<(($I_state)->$I_ncode))) {
while ((0)) {
while ((($I_bits)<([u32 ]((3))))) {
while ((0)) {
while ((0)) {
if ((($I_have)==(0))) {
if ((($I_have)==(0))) {
(($I_next)=(0));
(($I_ret)=(-(5)));
}
}
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
}
(((($I_state)->$I_lens)[(($I_order)[((($I_state)->$I_have)++)])])=([u16 ]((([u32 ](($I_hold)))&(((1)<<(3))-(1))))));
while ((0)) {
(($I_hold)>>=(3));
(($I_bits)-=([u32 ]((3))));
}
}
while (((($I_state)->$I_have)<(19))) {
(((($I_state)->$I_lens)[(($I_order)[((($I_state)->$I_have)++)])])=(0));
}
((($I_state)->$I_next)=(($I_state)->$I_codes));
((($I_state)->$I_lencode)=([$T_anon_WzN6Vy  *]((($I_state)->$I_next))));
((($I_state)->$I_lenbits)=(7));
(($I_ret)=($I_inflate_table(($I_CODES), (($I_state)->$I_lens), (19), (&(($I_state)->$I_next)), (&(($I_state)->$I_lenbits)), (($I_state)->$I_work))));
if (($I_ret)) {
((($I_strm)->$I_msg)=([i8 *](("invalid code lengths set"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
((($I_state)->$I_have)=(0));
while (((($I_state)->$I_have)<((($I_state)->$I_nlen)+(($I_state)->$I_ndist)))) {
for (0;1; 0) {
(($I_here)=((($I_state)->$I_lencode)[(([u32 ](($I_hold)))&(((1)<<(($I_state)->$I_lenbits))-(1)))]));
if ((([u32 ]((($I_here).$I_bits)))<=($I_bits))) {
break;
}
while ((0)) {
while ((0)) {
if ((($I_have)==(0))) {
if ((($I_have)==(0))) {
(($I_next)=(0));
(($I_ret)=(-(5)));
}
}
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
if (((($I_here).$I_val)<(16))) {
while ((0)) {
(($I_hold)>>=(($I_here).$I_bits));
(($I_bits)-=([u32 ]((($I_here).$I_bits))));
}
(((($I_state)->$I_lens)[((($I_state)->$I_have)++)])=(($I_here).$I_val));
}
else {
if (((($I_here).$I_val)==(16))) {
while ((0)) {
while ((($I_bits)<([u32 ](((($I_here).$I_bits)+(2)))))) {
while ((0)) {
while ((0)) {
if ((($I_have)==(0))) {
if ((($I_have)==(0))) {
(($I_next)=(0));
(($I_ret)=(-(5)));
}
}
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
}
while ((0)) {
(($I_hold)>>=(($I_here).$I_bits));
(($I_bits)-=([u32 ]((($I_here).$I_bits))));
}
if (((($I_state)->$I_have)==(0))) {
((($I_strm)->$I_msg)=([i8 *](("invalid bit length repeat"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
(($I_len)=([u32 ](((($I_state)->$I_lens)[((($I_state)->$I_have)-(1))]))));
(($I_copy)=((3)+(([u32 ](($I_hold)))&(((1)<<(2))-(1)))));
while ((0)) {
(($I_hold)>>=(2));
(($I_bits)-=([u32 ]((2))));
}
}
else {
if (((($I_here).$I_val)==(17))) {
while ((0)) {
while ((($I_bits)<([u32 ](((($I_here).$I_bits)+(3)))))) {
while ((0)) {
while ((0)) {
if ((($I_have)==(0))) {
if ((($I_have)==(0))) {
(($I_next)=(0));
(($I_ret)=(-(5)));
}
}
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
}
while ((0)) {
(($I_hold)>>=(($I_here).$I_bits));
(($I_bits)-=([u32 ]((($I_here).$I_bits))));
}
(($I_len)=(0));
(($I_copy)=((3)+(([u32 ](($I_hold)))&(((1)<<(3))-(1)))));
while ((0)) {
(($I_hold)>>=(3));
(($I_bits)-=([u32 ]((3))));
}
}
else {
while ((0)) {
while ((($I_bits)<([u32 ](((($I_here).$I_bits)+(7)))))) {
while ((0)) {
while ((0)) {
if ((($I_have)==(0))) {
if ((($I_have)==(0))) {
(($I_next)=(0));
(($I_ret)=(-(5)));
}
}
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
}
while ((0)) {
(($I_hold)>>=(($I_here).$I_bits));
(($I_bits)-=([u32 ]((($I_here).$I_bits))));
}
(($I_len)=(0));
(($I_copy)=((11)+(([u32 ](($I_hold)))&(((1)<<(7))-(1)))));
while ((0)) {
(($I_hold)>>=(7));
(($I_bits)-=([u32 ]((7))));
}
}
}
if ((((($I_state)->$I_have)+($I_copy))>((($I_state)->$I_nlen)+(($I_state)->$I_ndist)))) {
((($I_strm)->$I_msg)=([i8 *](("invalid bit length repeat"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
while ((($I_copy)--)) {
(((($I_state)->$I_lens)[((($I_state)->$I_have)++)])=([u16 ](($I_len))));
}
}
}
if (((($I_state)->$I_mode)==($I_BAD))) {
break;
}
if ((((($I_state)->$I_lens)[(256)])==(0))) {
((($I_strm)->$I_msg)=([i8 *](("invalid code -- missing end-of-block"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
((($I_state)->$I_next)=(($I_state)->$I_codes));
((($I_state)->$I_lencode)=([$T_anon_WzN6Vy  *]((($I_state)->$I_next))));
((($I_state)->$I_lenbits)=(9));
(($I_ret)=($I_inflate_table(($I_LENS), (($I_state)->$I_lens), (($I_state)->$I_nlen), (&(($I_state)->$I_next)), (&(($I_state)->$I_lenbits)), (($I_state)->$I_work))));
if (($I_ret)) {
((($I_strm)->$I_msg)=([i8 *](("invalid literal/lengths set"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
((($I_state)->$I_distcode)=([$T_anon_WzN6Vy  *]((($I_state)->$I_next))));
((($I_state)->$I_distbits)=(6));
(($I_ret)=($I_inflate_table(($I_DISTS), ((($I_state)->$I_lens)+(($I_state)->$I_nlen)), (($I_state)->$I_ndist), (&(($I_state)->$I_next)), (&(($I_state)->$I_distbits)), (($I_state)->$I_work))));
if (($I_ret)) {
((($I_strm)->$I_msg)=([i8 *](("invalid distances set"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
((($I_state)->$I_mode)=($I_LEN));
}
else if ((($I_state)->$I_mode) == ($I_LEN)) {
if (((($I_have)>=(6))&(($I_left)>=(258)))) {
while ((0)) {
((($I_strm)->$I_next_out)=($I_put));
((($I_strm)->$I_avail_out)=($I_left));
((($I_strm)->$I_next_in)=($I_next));
((($I_strm)->$I_avail_in)=($I_have));
((($I_state)->$I_hold)=($I_hold));
((($I_state)->$I_bits)=($I_bits));
}
if (((($I_state)->$I_whave)<(($I_state)->$I_wsize))) {
((($I_state)->$I_whave)=((($I_state)->$I_wsize)-($I_left)));
}
($I_inflate_fast(($I_strm), (($I_state)->$I_wsize)));
while ((0)) {
(($I_put)=(($I_strm)->$I_next_out));
(($I_left)=(($I_strm)->$I_avail_out));
(($I_next)=(($I_strm)->$I_next_in));
(($I_have)=(($I_strm)->$I_avail_in));
(($I_hold)=(($I_state)->$I_hold));
(($I_bits)=(($I_state)->$I_bits));
}
break;
}
for (0;1; 0) {
(($I_here)=((($I_state)->$I_lencode)[(([u32 ](($I_hold)))&(((1)<<(($I_state)->$I_lenbits))-(1)))]));
if ((([u32 ]((($I_here).$I_bits)))<=($I_bits))) {
break;
}
while ((0)) {
while ((0)) {
if ((($I_have)==(0))) {
if ((($I_have)==(0))) {
(($I_next)=(0));
(($I_ret)=(-(5)));
}
}
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
if (((($I_here).$I_op)&(((($I_here).$I_op)&(240))==(0)))) {
(($I_last)=($I_here));
for (0;1; 0) {
(($I_here)=((($I_state)->$I_lencode)[((($I_last).$I_val)+((([u32 ](($I_hold)))&(((1)<<((($I_last).$I_bits)+(($I_last).$I_op)))-(1)))>>(($I_last).$I_bits)))]));
if ((([u32 ](((($I_last).$I_bits)+(($I_here).$I_bits))))<=($I_bits))) {
break;
}
while ((0)) {
while ((0)) {
if ((($I_have)==(0))) {
if ((($I_have)==(0))) {
(($I_next)=(0));
(($I_ret)=(-(5)));
}
}
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
while ((0)) {
(($I_hold)>>=(($I_last).$I_bits));
(($I_bits)-=([u32 ]((($I_last).$I_bits))));
}
}
while ((0)) {
(($I_hold)>>=(($I_here).$I_bits));
(($I_bits)-=([u32 ]((($I_here).$I_bits))));
}
((($I_state)->$I_length)=([u32 ]((($I_here).$I_val))));
if (((($I_here).$I_op)==(0))) {
while ((0)) {
if ((($I_left)==(0))) {
(($I_put)=(($I_state)->$I_window));
(($I_left)=(($I_state)->$I_wsize));
((($I_state)->$I_whave)=($I_left));
if ((1)) {
(($I_ret)=(-(5)));
}
}
}
((*(($I_put)++))=([u8 ]((($I_state)->$I_length))));
(($I_left)--);
((($I_state)->$I_mode)=($I_LEN));
break;
}
if (((($I_here).$I_op)&(32))) {
((($I_state)->$I_mode)=($I_TYPE));
break;
}
if (((($I_here).$I_op)&(64))) {
((($I_strm)->$I_msg)=([i8 *](("invalid literal/length code"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
((($I_state)->$I_extra)=(([u32 ]((($I_here).$I_op)))&(15)));
if (((($I_state)->$I_extra)!=(0))) {
while ((0)) {
while ((($I_bits)<([u32 ]((($I_state)->$I_extra))))) {
while ((0)) {
while ((0)) {
if ((($I_have)==(0))) {
if ((($I_have)==(0))) {
(($I_next)=(0));
(($I_ret)=(-(5)));
}
}
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
}
((($I_state)->$I_length)+=(([u32 ](($I_hold)))&(((1)<<(($I_state)->$I_extra))-(1))));
while ((0)) {
(($I_hold)>>=(($I_state)->$I_extra));
(($I_bits)-=([u32 ]((($I_state)->$I_extra))));
}
}
for (0;1; 0) {
(($I_here)=((($I_state)->$I_distcode)[(([u32 ](($I_hold)))&(((1)<<(($I_state)->$I_distbits))-(1)))]));
if ((([u32 ]((($I_here).$I_bits)))<=($I_bits))) {
break;
}
while ((0)) {
while ((0)) {
if ((($I_have)==(0))) {
if ((($I_have)==(0))) {
(($I_next)=(0));
(($I_ret)=(-(5)));
}
}
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
if ((((($I_here).$I_op)&(240))==(0))) {
(($I_last)=($I_here));
for (0;1; 0) {
(($I_here)=((($I_state)->$I_distcode)[((($I_last).$I_val)+((([u32 ](($I_hold)))&(((1)<<((($I_last).$I_bits)+(($I_last).$I_op)))-(1)))>>(($I_last).$I_bits)))]));
if ((([u32 ](((($I_last).$I_bits)+(($I_here).$I_bits))))<=($I_bits))) {
break;
}
while ((0)) {
while ((0)) {
if ((($I_have)==(0))) {
if ((($I_have)==(0))) {
(($I_next)=(0));
(($I_ret)=(-(5)));
}
}
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
while ((0)) {
(($I_hold)>>=(($I_last).$I_bits));
(($I_bits)-=([u32 ]((($I_last).$I_bits))));
}
}
while ((0)) {
(($I_hold)>>=(($I_here).$I_bits));
(($I_bits)-=([u32 ]((($I_here).$I_bits))));
}
if (((($I_here).$I_op)&(64))) {
((($I_strm)->$I_msg)=([i8 *](("invalid distance code"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
((($I_state)->$I_offset)=([u32 ]((($I_here).$I_val))));
((($I_state)->$I_extra)=(([u32 ]((($I_here).$I_op)))&(15)));
if (((($I_state)->$I_extra)!=(0))) {
while ((0)) {
while ((($I_bits)<([u32 ]((($I_state)->$I_extra))))) {
while ((0)) {
while ((0)) {
if ((($I_have)==(0))) {
if ((($I_have)==(0))) {
(($I_next)=(0));
(($I_ret)=(-(5)));
}
}
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
}
((($I_state)->$I_offset)+=(([u32 ](($I_hold)))&(((1)<<(($I_state)->$I_extra))-(1))));
while ((0)) {
(($I_hold)>>=(($I_state)->$I_extra));
(($I_bits)-=([u32 ]((($I_state)->$I_extra))));
}
}
while (((($I_state)->$I_length)!=(0))) {
while ((0)) {
if ((($I_left)==(0))) {
(($I_put)=(($I_state)->$I_window));
(($I_left)=(($I_state)->$I_wsize));
((($I_state)->$I_whave)=($I_left));
if ((1)) {
(($I_ret)=(-(5)));
}
}
}
(($I_copy)=((($I_state)->$I_wsize)-(($I_state)->$I_offset)));
if ((($I_copy)<($I_left))) {
(($I_from)=(($I_put)+($I_copy)));
(($I_copy)=(($I_left)-($I_copy)));
}
else {
(($I_from)=(($I_put)-(($I_state)->$I_offset)));
(($I_copy)=($I_left));
}
if ((($I_copy)>(($I_state)->$I_length))) {
(($I_copy)=(($I_state)->$I_length));
}
((($I_state)->$I_length)-=($I_copy));
(($I_left)-=($I_copy));
while ((--($I_copy))) {
((*(($I_put)++))=(*(($I_from)++)));
}
}
break;
}
else if ((($I_state)->$I_mode) == ($I_DONE)) {
(($I_ret)=(1));
}
else if ((($I_state)->$I_mode) == ($I_BAD)) {
(($I_ret)=(-(3)));
}
else {
(($I_ret)=(-(2)));
}
}
}
((($I_strm)->$I_next_in)=($I_next));
((($I_strm)->$I_avail_in)=($I_have));
return ($I_ret);
}

i32 $I_inflateBackEnd($T_z_stream_s  *$I_strm)
{
if ((((($I_strm)==(0))|((($I_strm)->$I_state)==(0)))|((($I_strm)->$I_zfree)==([v0  ]((0)))))) {
return (-(2));
}
((($I_strm)->$I_state)=(0));
return (0);
}

v0 $I_inflate_fast($T_z_stream_s  *$I_strm, u32 $I_start)
{
$T_inflate_state  *$I_state;
u8  *$I_in;
u8  *$I_last;
u8  *$I_out;
u8  *$I_beg;
u8  *$I_end;
u32  $I_wsize;
u32  $I_whave;
u32  $I_wnext;
u8  *$I_window;
u32  $I_hold;
u32  $I_bits;
$T_anon_WzN6Vy   *$I_lcode;
$T_anon_WzN6Vy   *$I_dcode;
u32  $I_lmask;
u32  $I_dmask;
$T_anon_WzN6Vy   *$I_here;
u32  $I_op;
u32  $I_len;
u32  $I_dist;
u8  *$I_from;
(($I_state)=([$T_inflate_state *]((($I_strm)->$I_state))));
(($I_in)=(($I_strm)->$I_next_in));
(($I_last)=(($I_in)+((($I_strm)->$I_avail_in)-(5))));
(($I_out)=(($I_strm)->$I_next_out));
(($I_beg)=(($I_out)-(($I_start)-(($I_strm)->$I_avail_out))));
(($I_end)=(($I_out)+((($I_strm)->$I_avail_out)-(257))));
(($I_wsize)=(($I_state)->$I_wsize));
(($I_whave)=(($I_state)->$I_whave));
(($I_wnext)=(($I_state)->$I_wnext));
(($I_window)=(($I_state)->$I_window));
(($I_hold)=(($I_state)->$I_hold));
(($I_bits)=(($I_state)->$I_bits));
(($I_lcode)=(($I_state)->$I_lencode));
(($I_dcode)=(($I_state)->$I_distcode));
(($I_lmask)=(((1)<<(($I_state)->$I_lenbits))-(1)));
(($I_dmask)=(((1)<<(($I_state)->$I_distbits))-(1)));
while (((($I_in)<($I_last))&(($I_out)<($I_end)))) {
if ((($I_bits)<(15))) {
(($I_hold)+=(([u32 ]((*(($I_in)++))))<<($I_bits)));
(($I_bits)+=(8));
(($I_hold)+=(([u32 ]((*(($I_in)++))))<<($I_bits)));
(($I_bits)+=(8));
}
(($I_here)=(($I_lcode)+(($I_hold)&($I_lmask))));
(($I_hold)>>=($I_op));
(($I_bits)-=($I_op));
(($I_op)=([u32 ]((($I_here)->$I_op))));
if ((($I_op)==(0))) {
((*(($I_out)++))=([u8 ]((($I_here)->$I_val))));
}
else {
if ((($I_op)&(16))) {
(($I_len)=([u32 ]((($I_here)->$I_val))));
(($I_op)&=(15));
if (($I_op)) {
if ((($I_bits)<($I_op))) {
(($I_hold)+=(([u32 ]((*(($I_in)++))))<<($I_bits)));
(($I_bits)+=(8));
}
(($I_len)+=(([u32 ](($I_hold)))&(((1)<<($I_op))-(1))));
(($I_hold)>>=($I_op));
(($I_bits)-=($I_op));
}
if ((($I_bits)<(15))) {
(($I_hold)+=(([u32 ]((*(($I_in)++))))<<($I_bits)));
(($I_bits)+=(8));
(($I_hold)+=(([u32 ]((*(($I_in)++))))<<($I_bits)));
(($I_bits)+=(8));
}
(($I_here)=(($I_dcode)+(($I_hold)&($I_dmask))));
(($I_hold)>>=($I_op));
(($I_bits)-=($I_op));
(($I_op)=([u32 ]((($I_here)->$I_op))));
if ((($I_op)&(16))) {
(($I_dist)=([u32 ]((($I_here)->$I_val))));
(($I_op)&=(15));
if ((($I_bits)<($I_op))) {
(($I_hold)+=(([u32 ]((*(($I_in)++))))<<($I_bits)));
(($I_bits)+=(8));
if ((($I_bits)<($I_op))) {
(($I_hold)+=(([u32 ]((*(($I_in)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
(($I_dist)+=(([u32 ](($I_hold)))&(((1)<<($I_op))-(1))));
(($I_hold)>>=($I_op));
(($I_bits)-=($I_op));
(($I_op)=([u32 ]((($I_out)-($I_beg)))));
if ((($I_dist)>($I_op))) {
(($I_op)=(($I_dist)-($I_op)));
if ((($I_op)>($I_whave))) {
if ((($I_state)->$I_sane)) {
((($I_strm)->$I_msg)=([i8 *](("invalid distance too far back"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
}
(($I_from)=($I_window));
if ((($I_wnext)==(0))) {
(($I_from)+=(($I_wsize)-($I_op)));
if ((($I_op)<($I_len))) {
(($I_len)-=($I_op));
while ((--($I_op))) {
((*(($I_out)++))=(*(($I_from)++)));
}
(($I_from)=(($I_out)-($I_dist)));
}
}
else {
if ((($I_wnext)<($I_op))) {
(($I_from)+=((($I_wsize)+($I_wnext))-($I_op)));
(($I_op)-=($I_wnext));
if ((($I_op)<($I_len))) {
(($I_len)-=($I_op));
while ((--($I_op))) {
((*(($I_out)++))=(*(($I_from)++)));
}
(($I_from)=($I_window));
if ((($I_wnext)<($I_len))) {
(($I_op)=($I_wnext));
(($I_len)-=($I_op));
while ((--($I_op))) {
((*(($I_out)++))=(*(($I_from)++)));
}
(($I_from)=(($I_out)-($I_dist)));
}
}
}
else {
(($I_from)+=(($I_wnext)-($I_op)));
if ((($I_op)<($I_len))) {
(($I_len)-=($I_op));
while ((--($I_op))) {
((*(($I_out)++))=(*(($I_from)++)));
}
(($I_from)=(($I_out)-($I_dist)));
}
}
}
while ((($I_len)>(2))) {
((*(($I_out)++))=(*(($I_from)++)));
((*(($I_out)++))=(*(($I_from)++)));
((*(($I_out)++))=(*(($I_from)++)));
(($I_len)-=(3));
}
if (($I_len)) {
((*(($I_out)++))=(*(($I_from)++)));
if ((($I_len)>(1))) {
((*(($I_out)++))=(*(($I_from)++)));
}
}
}
else {
(($I_from)=(($I_out)-($I_dist)));
while ((($I_len)>(2))) {
((*(($I_out)++))=(*(($I_from)++)));
((*(($I_out)++))=(*(($I_from)++)));
((*(($I_out)++))=(*(($I_from)++)));
(($I_len)-=(3));
}
if (($I_len)) {
((*(($I_out)++))=(*(($I_from)++)));
if ((($I_len)>(1))) {
((*(($I_out)++))=(*(($I_from)++)));
}
}
}
}
else {
if (((($I_op)&(64))==(0))) {
(($I_here)=((($I_dcode)+(($I_here)->$I_val))+(($I_hold)&(((1)<<($I_op))-(1)))));
}
else {
((($I_strm)->$I_msg)=([i8 *](("invalid distance code"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
}
}
else {
if (((($I_op)&(64))==(0))) {
(($I_here)=((($I_lcode)+(($I_here)->$I_val))+(($I_hold)&(((1)<<($I_op))-(1)))));
}
else {
if ((($I_op)&(32))) {
((($I_state)->$I_mode)=($I_TYPE));
break;
}
else {
((($I_strm)->$I_msg)=([i8 *](("invalid literal/length code"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
}
}
}
}
(($I_len)=(($I_bits)>>(3)));
(($I_in)-=($I_len));
(($I_bits)-=(($I_len)<<(3)));
(($I_hold)&=(((1)<<($I_bits))-(1)));
((($I_strm)->$I_next_in)=($I_in));
((($I_strm)->$I_next_out)=($I_out));
((($I_state)->$I_hold)=($I_hold));
((($I_state)->$I_bits)=($I_bits));
return;
}

 i32 $I_inflateStateCheck($T_z_stream_s  *$I_strm)
{
$T_inflate_state  *$I_state;
if ((((($I_strm)==(0))|((($I_strm)->$I_zalloc)==([v0  ]((0)))))|((($I_strm)->$I_zfree)==([v0  ]((0)))))) {
return (1);
}
(($I_state)=([$T_inflate_state *]((($I_strm)->$I_state))));
if (((((($I_state)==(0))|((($I_state)->$I_strm)!=($I_strm)))|((($I_state)->$I_mode)<($I_HEAD)))|((($I_state)->$I_mode)>($I_SYNC)))) {
return (1);
}
return (0);
}

i32 $I_inflateResetKeep($T_z_stream_s  *$I_strm)
{
$T_inflate_state  *$I_state;
if (($I_inflateStateCheck(($I_strm)))) {
return (-(2));
}
(($I_state)=([$T_inflate_state *]((($I_strm)->$I_state))));
((($I_strm)->$I_total_in)=((($I_strm)->$I_total_out)=((($I_state)->$I_total)=(0))));
((($I_strm)->$I_msg)=(0));
if ((($I_state)->$I_wrap)) {
((($I_strm)->$I_adler)=((($I_state)->$I_wrap)&(1)));
}
((($I_state)->$I_mode)=($I_HEAD));
((($I_state)->$I_last)=(0));
((($I_state)->$I_havedict)=(0));
((($I_state)->$I_flags)=(-(1)));
((($I_state)->$I_dmax)=(32768));
((($I_state)->$I_head)=(0));
((($I_state)->$I_hold)=(0));
((($I_state)->$I_bits)=(0));
((($I_state)->$I_lencode)=((($I_state)->$I_distcode)=((($I_state)->$I_next)=(($I_state)->$I_codes))));
((($I_state)->$I_sane)=(1));
((($I_state)->$I_back)=(-(1)));
return (0);
}

i32 $I_inflateReset($T_z_stream_s  *$I_strm)
{
$T_inflate_state  *$I_state;
if (($I_inflateStateCheck(($I_strm)))) {
return (-(2));
}
(($I_state)=([$T_inflate_state *]((($I_strm)->$I_state))));
((($I_state)->$I_wsize)=(0));
((($I_state)->$I_whave)=(0));
((($I_state)->$I_wnext)=(0));
return ($I_inflateResetKeep(($I_strm)));
}

i32 $I_inflateReset2($T_z_stream_s  *$I_strm, i32 $I_windowBits)
{
i32  $I_wrap;
$T_inflate_state  *$I_state;
if (($I_inflateStateCheck(($I_strm)))) {
return (-(2));
}
(($I_state)=([$T_inflate_state *]((($I_strm)->$I_state))));
if ((($I_windowBits)<(0))) {
if ((($I_windowBits)<(-(15)))) {
return (-(2));
}
(($I_wrap)=(0));
(($I_windowBits)=(-($I_windowBits)));
}
else {
(($I_wrap)=((($I_windowBits)>>(4))+(5)));
if ((($I_windowBits)<(48))) {
(($I_windowBits)&=(15));
}
}
if ((($I_windowBits)&((($I_windowBits)<(8))|(($I_windowBits)>(15))))) {
return (-(2));
}
if ((((($I_state)->$I_window)!=(0))&((($I_state)->$I_wbits)!=([u32 ](($I_windowBits)))))) {
((($I_state)->$I_window)=(0));
}
((($I_state)->$I_wrap)=($I_wrap));
((($I_state)->$I_wbits)=([u32 ](($I_windowBits))));
return ($I_inflateReset(($I_strm)));
}

i32 $I_inflateInit2_($T_z_stream_s  *$I_strm, i32 $I_windowBits,  i8 *$I_version, i32 $I_stream_size)
{
i32  $I_ret;
$T_inflate_state  *$I_state;
if ((((($I_version)==(0))|((($I_version)[(0)])!=(('1'))))|(($I_stream_size)!=([i32 ]((0)))))) {
return (-(6));
}
if ((($I_strm)==(0))) {
return (-(2));
}
((($I_strm)->$I_msg)=(0));
if (((($I_strm)->$I_zalloc)==([v0  ]((0))))) {
((($I_strm)->$I_opaque)=([v0  ]((0))));
}
if ((($I_state)==(0))) {
return (-(4));
}
((($I_strm)->$I_state)=([$T_internal_state *](($I_state))));
((($I_state)->$I_strm)=($I_strm));
((($I_state)->$I_window)=(0));
((($I_state)->$I_mode)=($I_HEAD));
(($I_ret)=($I_inflateReset2(($I_strm), ($I_windowBits))));
if ((($I_ret)!=(0))) {
((($I_strm)->$I_state)=(0));
}
return ($I_ret);
}

i32 $I_inflateInit_($T_z_stream_s  *$I_strm,  i8 *$I_version, i32 $I_stream_size)
{
return ($I_inflateInit2_(($I_strm), (15), ($I_version), ($I_stream_size)));
}

i32 $I_inflatePrime($T_z_stream_s  *$I_strm, i32 $I_bits, i32 $I_value)
{
$T_inflate_state  *$I_state;
if (($I_inflateStateCheck(($I_strm)))) {
return (-(2));
}
if ((($I_bits)==(0))) {
return (0);
}
(($I_state)=([$T_inflate_state *]((($I_strm)->$I_state))));
if ((($I_bits)<(0))) {
((($I_state)->$I_hold)=(0));
((($I_state)->$I_bits)=(0));
return (0);
}
if (((($I_bits)>(16))|(((($I_state)->$I_bits)+([u32  ](($I_bits))))>(32)))) {
return (-(2));
}
(($I_value)&=(((1)<<($I_bits))-(1)));
((($I_state)->$I_hold)+=(([u32 ](($I_value)))<<(($I_state)->$I_bits)));
((($I_state)->$I_bits)+=([u32  ](($I_bits))));
return (0);
}

 i32 $I_updatewindow($T_z_stream_s  *$I_strm,  u8   *$I_end, u32 $I_copy)
{
$T_inflate_state  *$I_state;
u32  $I_dist;
(($I_state)=([$T_inflate_state *]((($I_strm)->$I_state))));
if (((($I_state)->$I_window)==(0))) {
if (((($I_state)->$I_window)==(0))) {
return (1);
}
}
if (((($I_state)->$I_wsize)==(0))) {
((($I_state)->$I_wsize)=((1)<<(($I_state)->$I_wbits)));
((($I_state)->$I_wnext)=(0));
((($I_state)->$I_whave)=(0));
}
if ((($I_copy)>=(($I_state)->$I_wsize))) {
($I___builtin___memcpy_chk((($I_state)->$I_window), (($I_end)-(($I_state)->$I_wsize)), (($I_state)->$I_wsize), ($I___builtin_object_size((($I_state)->$I_window), (0)))));
((($I_state)->$I_wnext)=(0));
((($I_state)->$I_whave)=(($I_state)->$I_wsize));
}
else {
(($I_dist)=((($I_state)->$I_wsize)-(($I_state)->$I_wnext)));
if ((($I_dist)>($I_copy))) {
(($I_dist)=($I_copy));
}
($I___builtin___memcpy_chk(((($I_state)->$I_window)+(($I_state)->$I_wnext)), (($I_end)-($I_copy)), ($I_dist), ($I___builtin_object_size(((($I_state)->$I_window)+(($I_state)->$I_wnext)), (0)))));
(($I_copy)-=($I_dist));
if (($I_copy)) {
($I___builtin___memcpy_chk((($I_state)->$I_window), (($I_end)-($I_copy)), ($I_copy), ($I___builtin_object_size((($I_state)->$I_window), (0)))));
((($I_state)->$I_wnext)=($I_copy));
((($I_state)->$I_whave)=(($I_state)->$I_wsize));
}
else {
((($I_state)->$I_wnext)+=($I_dist));
if (((($I_state)->$I_wnext)==(($I_state)->$I_wsize))) {
((($I_state)->$I_wnext)=(0));
}
if (((($I_state)->$I_whave)<(($I_state)->$I_wsize))) {
((($I_state)->$I_whave)+=($I_dist));
}
}
}
return (0);
}

i32 $I_inflate($T_z_stream_s  *$I_strm, i32 $I_flush)
{
$T_inflate_state  *$I_state;
u8  *$I_next;
u8  *$I_put;
u32  $I_have;
u32  $I_left;
u32  $I_hold;
u32  $I_bits;
u32  $I_in;
u32  $I_out;
u32  $I_copy;
u8  *$I_from;
$T_anon_WzN6Vy  $I_here;
$T_anon_WzN6Vy  $I_last;
u32  $I_len;
i32  $I_ret;
u8  [4]$I_hbuf;
  u16  [19]$I_order;
if (((($I_inflateStateCheck(($I_strm)))|((($I_strm)->$I_next_out)==(0)))|(((($I_strm)->$I_next_in)==(0))&((($I_strm)->$I_avail_in)!=(0))))) {
return (-(2));
}
(($I_state)=([$T_inflate_state *]((($I_strm)->$I_state))));
if (((($I_state)->$I_mode)==($I_TYPE))) {
((($I_state)->$I_mode)=($I_TYPEDO));
}
while ((0)) {
(($I_put)=(($I_strm)->$I_next_out));
(($I_left)=(($I_strm)->$I_avail_out));
(($I_next)=(($I_strm)->$I_next_in));
(($I_have)=(($I_strm)->$I_avail_in));
(($I_hold)=(($I_state)->$I_hold));
(($I_bits)=(($I_state)->$I_bits));
}
(($I_in)=($I_have));
(($I_out)=($I_left));
(($I_ret)=(0));
for (0;1; 0) {
for (u8 $_sTYX6K = 0; $_sTYX6K == 0; $_sTYX6K = 1) {
if ((($I_state)->$I_mode) == ($I_HEAD)) {
if (((($I_state)->$I_wrap)==(0))) {
((($I_state)->$I_mode)=($I_TYPEDO));
break;
}
while ((0)) {
while ((($I_bits)<([u32 ]((16))))) {
while ((0)) {
if ((($I_have)==(0))) {
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
}
if ((((($I_state)->$I_wrap)&(2))&(($I_hold)==(35615)))) {
if (((($I_state)->$I_wbits)==(0))) {
((($I_state)->$I_wbits)=(15));
}
((($I_state)->$I_check)=($I_crc32((0), (0), (0))));
while ((0)) {
((($I_hbuf)[(0)])=([u8 ](($I_hold))));
((($I_hbuf)[(1)])=([u8 ]((($I_hold)>>(8)))));
((($I_state)->$I_check)=($I_crc32((($I_state)->$I_check), ($I_hbuf), (2))));
}
while ((0)) {
(($I_hold)=(0));
(($I_bits)=(0));
}
((($I_state)->$I_mode)=($I_FLAGS));
break;
}
if (((($I_state)->$I_head)!=(0))) {
(((($I_state)->$I_head)->$I_done)=(-(1)));
}
if (((!((($I_state)->$I_wrap)&(1)))|((((([u32 ](($I_hold)))&(((1)<<(8))-(1)))<<(8))+(($I_hold)>>(8)))%(31)))) {
((($I_strm)->$I_msg)=([i8 *](("incorrect header check"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
if (((([u32 ](($I_hold)))&(((1)<<(4))-(1)))!=(8))) {
((($I_strm)->$I_msg)=([i8 *](("unknown compression method"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
while ((0)) {
(($I_hold)>>=(4));
(($I_bits)-=([u32 ]((4))));
}
(($I_len)=((([u32 ](($I_hold)))&(((1)<<(4))-(1)))+(8)));
if (((($I_state)->$I_wbits)==(0))) {
((($I_state)->$I_wbits)=($I_len));
}
if (((($I_len)>(15))|(($I_len)>(($I_state)->$I_wbits)))) {
((($I_strm)->$I_msg)=([i8 *](("invalid window size"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
((($I_state)->$I_dmax)=((1)<<($I_len)));
((($I_state)->$I_flags)=(0));
((($I_strm)->$I_adler)=((($I_state)->$I_check)=($I_adler32((0), (0), (0)))));
while ((0)) {
(($I_hold)=(0));
(($I_bits)=(0));
}
break;
}
else if ((($I_state)->$I_mode) == ($I_FLAGS)) {
while ((0)) {
while ((($I_bits)<([u32 ]((16))))) {
while ((0)) {
if ((($I_have)==(0))) {
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
}
((($I_state)->$I_flags)=([i32 ](($I_hold))));
if ((((($I_state)->$I_flags)&(255))!=(8))) {
((($I_strm)->$I_msg)=([i8 *](("unknown compression method"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
if (((($I_state)->$I_flags)&(57344))) {
((($I_strm)->$I_msg)=([i8 *](("unknown header flags set"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
if (((($I_state)->$I_head)!=(0))) {
(((($I_state)->$I_head)->$I_text)=([i32 ](((($I_hold)>>(8))&(1)))));
}
if ((((($I_state)->$I_flags)&(512))&((($I_state)->$I_wrap)&(4)))) {
while ((0)) {
((($I_hbuf)[(0)])=([u8 ](($I_hold))));
((($I_hbuf)[(1)])=([u8 ]((($I_hold)>>(8)))));
((($I_state)->$I_check)=($I_crc32((($I_state)->$I_check), ($I_hbuf), (2))));
}
}
while ((0)) {
(($I_hold)=(0));
(($I_bits)=(0));
}
((($I_state)->$I_mode)=($I_TIME));
}
else if ((($I_state)->$I_mode) == ($I_TIME)) {
while ((0)) {
while ((($I_bits)<([u32 ]((32))))) {
while ((0)) {
if ((($I_have)==(0))) {
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
}
if (((($I_state)->$I_head)!=(0))) {
(((($I_state)->$I_head)->$I_time)=($I_hold));
}
if ((((($I_state)->$I_flags)&(512))&((($I_state)->$I_wrap)&(4)))) {
while ((0)) {
((($I_hbuf)[(0)])=([u8 ](($I_hold))));
((($I_hbuf)[(1)])=([u8 ]((($I_hold)>>(8)))));
((($I_hbuf)[(2)])=([u8 ]((($I_hold)>>(16)))));
((($I_hbuf)[(3)])=([u8 ]((($I_hold)>>(24)))));
((($I_state)->$I_check)=($I_crc32((($I_state)->$I_check), ($I_hbuf), (4))));
}
}
while ((0)) {
(($I_hold)=(0));
(($I_bits)=(0));
}
((($I_state)->$I_mode)=($I_OS));
}
else if ((($I_state)->$I_mode) == ($I_OS)) {
while ((0)) {
while ((($I_bits)<([u32 ]((16))))) {
while ((0)) {
if ((($I_have)==(0))) {
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
}
if (((($I_state)->$I_head)!=(0))) {
(((($I_state)->$I_head)->$I_xflags)=([i32 ]((($I_hold)&(255)))));
(((($I_state)->$I_head)->$I_os)=([i32 ]((($I_hold)>>(8)))));
}
if ((((($I_state)->$I_flags)&(512))&((($I_state)->$I_wrap)&(4)))) {
while ((0)) {
((($I_hbuf)[(0)])=([u8 ](($I_hold))));
((($I_hbuf)[(1)])=([u8 ]((($I_hold)>>(8)))));
((($I_state)->$I_check)=($I_crc32((($I_state)->$I_check), ($I_hbuf), (2))));
}
}
while ((0)) {
(($I_hold)=(0));
(($I_bits)=(0));
}
((($I_state)->$I_mode)=($I_EXLEN));
}
else if ((($I_state)->$I_mode) == ($I_EXLEN)) {
if (((($I_state)->$I_flags)&(1024))) {
while ((0)) {
while ((($I_bits)<([u32 ]((16))))) {
while ((0)) {
if ((($I_have)==(0))) {
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
}
((($I_state)->$I_length)=([u32 ](($I_hold))));
if (((($I_state)->$I_head)!=(0))) {
(((($I_state)->$I_head)->$I_extra_len)=([u32 ](($I_hold))));
}
if ((((($I_state)->$I_flags)&(512))&((($I_state)->$I_wrap)&(4)))) {
while ((0)) {
((($I_hbuf)[(0)])=([u8 ](($I_hold))));
((($I_hbuf)[(1)])=([u8 ]((($I_hold)>>(8)))));
((($I_state)->$I_check)=($I_crc32((($I_state)->$I_check), ($I_hbuf), (2))));
}
}
while ((0)) {
(($I_hold)=(0));
(($I_bits)=(0));
}
}
else {
if (((($I_state)->$I_head)!=(0))) {
(((($I_state)->$I_head)->$I_extra)=(0));
}
}
((($I_state)->$I_mode)=($I_EXTRA));
}
else if ((($I_state)->$I_mode) == ($I_EXTRA)) {
if (((($I_state)->$I_flags)&(1024))) {
(($I_copy)=(($I_state)->$I_length));
if ((($I_copy)>($I_have))) {
(($I_copy)=($I_have));
}
if (($I_copy)) {
if (((((($I_state)->$I_head)!=(0))&(((($I_state)->$I_head)->$I_extra)!=(0)))&((($I_len)=(((($I_state)->$I_head)->$I_extra_len)-(($I_state)->$I_length)))<((($I_state)->$I_head)->$I_extra_max)))) {
}
if ((((($I_state)->$I_flags)&(512))&((($I_state)->$I_wrap)&(4)))) {
((($I_state)->$I_check)=($I_crc32((($I_state)->$I_check), ($I_next), ($I_copy))));
}
(($I_have)-=($I_copy));
(($I_next)+=($I_copy));
((($I_state)->$I_length)-=($I_copy));
}
if ((($I_state)->$I_length)) {
}
}
((($I_state)->$I_length)=(0));
((($I_state)->$I_mode)=($I_NAME));
}
else if ((($I_state)->$I_mode) == ($I_NAME)) {
if (((($I_state)->$I_flags)&(2048))) {
if ((($I_have)==(0))) {
}
(($I_copy)=(0));
while ((($I_len)&(($I_copy)<($I_have)))) {
(($I_len)=([u32 ]((($I_next)[(($I_copy)++)]))));
if (((((($I_state)->$I_head)!=(0))&(((($I_state)->$I_head)->$I_name)!=(0)))&((($I_state)->$I_length)<((($I_state)->$I_head)->$I_name_max)))) {
((((($I_state)->$I_head)->$I_name)[((($I_state)->$I_length)++)])=([u8   ](($I_len))));
}
}
if ((((($I_state)->$I_flags)&(512))&((($I_state)->$I_wrap)&(4)))) {
((($I_state)->$I_check)=($I_crc32((($I_state)->$I_check), ($I_next), ($I_copy))));
}
(($I_have)-=($I_copy));
(($I_next)+=($I_copy));
if (($I_len)) {
}
}
else {
if (((($I_state)->$I_head)!=(0))) {
(((($I_state)->$I_head)->$I_name)=(0));
}
}
((($I_state)->$I_length)=(0));
((($I_state)->$I_mode)=($I_COMMENT));
}
else if ((($I_state)->$I_mode) == ($I_COMMENT)) {
if (((($I_state)->$I_flags)&(4096))) {
if ((($I_have)==(0))) {
}
(($I_copy)=(0));
while ((($I_len)&(($I_copy)<($I_have)))) {
(($I_len)=([u32 ]((($I_next)[(($I_copy)++)]))));
if (((((($I_state)->$I_head)!=(0))&(((($I_state)->$I_head)->$I_comment)!=(0)))&((($I_state)->$I_length)<((($I_state)->$I_head)->$I_comm_max)))) {
((((($I_state)->$I_head)->$I_comment)[((($I_state)->$I_length)++)])=([u8   ](($I_len))));
}
}
if ((((($I_state)->$I_flags)&(512))&((($I_state)->$I_wrap)&(4)))) {
((($I_state)->$I_check)=($I_crc32((($I_state)->$I_check), ($I_next), ($I_copy))));
}
(($I_have)-=($I_copy));
(($I_next)+=($I_copy));
if (($I_len)) {
}
}
else {
if (((($I_state)->$I_head)!=(0))) {
(((($I_state)->$I_head)->$I_comment)=(0));
}
}
((($I_state)->$I_mode)=($I_HCRC));
}
else if ((($I_state)->$I_mode) == ($I_HCRC)) {
if (((($I_state)->$I_flags)&(512))) {
while ((0)) {
while ((($I_bits)<([u32 ]((16))))) {
while ((0)) {
if ((($I_have)==(0))) {
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
}
if ((((($I_state)->$I_wrap)&(4))&(($I_hold)!=((($I_state)->$I_check)&(65535))))) {
((($I_strm)->$I_msg)=([i8 *](("header crc mismatch"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
while ((0)) {
(($I_hold)=(0));
(($I_bits)=(0));
}
}
if (((($I_state)->$I_head)!=(0))) {
(((($I_state)->$I_head)->$I_hcrc)=([i32 ]((((($I_state)->$I_flags)>>(9))&(1)))));
(((($I_state)->$I_head)->$I_done)=(1));
}
((($I_strm)->$I_adler)=((($I_state)->$I_check)=($I_crc32((0), (0), (0)))));
((($I_state)->$I_mode)=($I_TYPE));
break;
}
else if ((($I_state)->$I_mode) == ($I_DICTID)) {
while ((0)) {
while ((($I_bits)<([u32 ]((32))))) {
while ((0)) {
if ((($I_have)==(0))) {
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
}
((($I_strm)->$I_adler)=((($I_state)->$I_check)=(((((($I_hold)>>(24))&(255))+((($I_hold)>>(8))&(65280)))+((($I_hold)&(65280))<<(8)))+((($I_hold)&(255))<<(24)))));
while ((0)) {
(($I_hold)=(0));
(($I_bits)=(0));
}
((($I_state)->$I_mode)=($I_DICT));
}
else if ((($I_state)->$I_mode) == ($I_DICT)) {
if (((($I_state)->$I_havedict)==(0))) {
while ((0)) {
((($I_strm)->$I_next_out)=($I_put));
((($I_strm)->$I_avail_out)=($I_left));
((($I_strm)->$I_next_in)=($I_next));
((($I_strm)->$I_avail_in)=($I_have));
((($I_state)->$I_hold)=($I_hold));
((($I_state)->$I_bits)=($I_bits));
}
return (2);
}
((($I_strm)->$I_adler)=((($I_state)->$I_check)=($I_adler32((0), (0), (0)))));
((($I_state)->$I_mode)=($I_TYPE));
}
else if ((($I_state)->$I_mode) == ($I_TYPE)) {
if (((($I_flush)==(5))|(($I_flush)==(6)))) {
}
}
else if ((($I_state)->$I_mode) == ($I_TYPEDO)) {
if ((($I_state)->$I_last)) {
while ((0)) {
(($I_hold)>>=(($I_bits)&(7)));
(($I_bits)-=(($I_bits)&(7)));
}
((($I_state)->$I_mode)=($I_CHECK));
break;
}
while ((0)) {
while ((($I_bits)<([u32 ]((3))))) {
while ((0)) {
if ((($I_have)==(0))) {
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
}
((($I_state)->$I_last)=(([u32 ](($I_hold)))&(((1)<<(1))-(1))));
while ((0)) {
(($I_hold)>>=(1));
(($I_bits)-=([u32 ]((1))));
}
for (u8 $_dCWxpQ = 0; $_dCWxpQ == 0; $_dCWxpQ = 1) {
if ((([u32 ](($I_hold)))&(((1)<<(2))-(1))) == (0)) {
((($I_state)->$I_mode)=($I_STORED));
break;
}
else if ((([u32 ](($I_hold)))&(((1)<<(2))-(1))) == (1)) {
($I_fixedtables(($I_state)));
((($I_state)->$I_mode)=($I_LEN_));
if ((($I_flush)==(6))) {
while ((0)) {
(($I_hold)>>=(2));
(($I_bits)-=([u32 ]((2))));
}
}
break;
}
else if ((([u32 ](($I_hold)))&(((1)<<(2))-(1))) == (2)) {
((($I_state)->$I_mode)=($I_TABLE));
break;
}
else if ((([u32 ](($I_hold)))&(((1)<<(2))-(1))) == (3)) {
((($I_strm)->$I_msg)=([i8 *](("invalid block type"))));
((($I_state)->$I_mode)=($I_BAD));
}
}
while ((0)) {
(($I_hold)>>=(2));
(($I_bits)-=([u32 ]((2))));
}
break;
}
else if ((($I_state)->$I_mode) == ($I_STORED)) {
while ((0)) {
(($I_hold)>>=(($I_bits)&(7)));
(($I_bits)-=(($I_bits)&(7)));
}
while ((0)) {
while ((($I_bits)<([u32 ]((32))))) {
while ((0)) {
if ((($I_have)==(0))) {
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
}
if (((($I_hold)&(65535))!=((($I_hold)>>(16))^(65535)))) {
((($I_strm)->$I_msg)=([i8 *](("invalid stored block lengths"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
((($I_state)->$I_length)=(([u32 ](($I_hold)))&(65535)));
while ((0)) {
(($I_hold)=(0));
(($I_bits)=(0));
}
((($I_state)->$I_mode)=($I_COPY_));
if ((($I_flush)==(6))) {
}
}
else if ((($I_state)->$I_mode) == ($I_COPY_)) {
((($I_state)->$I_mode)=(1));
}
else if ((($I_state)->$I_mode) == (1)) {
(($I_copy)=(($I_state)->$I_length));
if (($I_copy)) {
if ((($I_copy)>($I_have))) {
(($I_copy)=($I_have));
}
if ((($I_copy)>($I_left))) {
(($I_copy)=($I_left));
}
if ((($I_copy)==(0))) {
}
($I___builtin___memcpy_chk(($I_put), ($I_next), ($I_copy), ($I___builtin_object_size(($I_put), (0)))));
(($I_have)-=($I_copy));
(($I_next)+=($I_copy));
(($I_left)-=($I_copy));
(($I_put)+=($I_copy));
((($I_state)->$I_length)-=($I_copy));
break;
}
((($I_state)->$I_mode)=($I_TYPE));
break;
}
else if ((($I_state)->$I_mode) == ($I_TABLE)) {
while ((0)) {
while ((($I_bits)<([u32 ]((14))))) {
while ((0)) {
if ((($I_have)==(0))) {
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
}
((($I_state)->$I_nlen)=((([u32 ](($I_hold)))&(((1)<<(5))-(1)))+(257)));
while ((0)) {
(($I_hold)>>=(5));
(($I_bits)-=([u32 ]((5))));
}
((($I_state)->$I_ndist)=((([u32 ](($I_hold)))&(((1)<<(5))-(1)))+(1)));
while ((0)) {
(($I_hold)>>=(5));
(($I_bits)-=([u32 ]((5))));
}
((($I_state)->$I_ncode)=((([u32 ](($I_hold)))&(((1)<<(4))-(1)))+(4)));
while ((0)) {
(($I_hold)>>=(4));
(($I_bits)-=([u32 ]((4))));
}
if ((((($I_state)->$I_nlen)>(286))|((($I_state)->$I_ndist)>(30)))) {
((($I_strm)->$I_msg)=([i8 *](("too many length or distance symbols"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
((($I_state)->$I_have)=(0));
((($I_state)->$I_mode)=($I_LENLENS));
}
else if ((($I_state)->$I_mode) == ($I_LENLENS)) {
while (((($I_state)->$I_have)<(($I_state)->$I_ncode))) {
while ((0)) {
while ((($I_bits)<([u32 ]((3))))) {
while ((0)) {
if ((($I_have)==(0))) {
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
}
(((($I_state)->$I_lens)[(($I_order)[((($I_state)->$I_have)++)])])=([u16 ]((([u32 ](($I_hold)))&(((1)<<(3))-(1))))));
while ((0)) {
(($I_hold)>>=(3));
(($I_bits)-=([u32 ]((3))));
}
}
while (((($I_state)->$I_have)<(19))) {
(((($I_state)->$I_lens)[(($I_order)[((($I_state)->$I_have)++)])])=(0));
}
((($I_state)->$I_next)=(($I_state)->$I_codes));
((($I_state)->$I_lencode)=([ $T_anon_WzN6Vy *]((($I_state)->$I_next))));
((($I_state)->$I_lenbits)=(7));
(($I_ret)=($I_inflate_table(($I_CODES), (($I_state)->$I_lens), (19), (&(($I_state)->$I_next)), (&(($I_state)->$I_lenbits)), (($I_state)->$I_work))));
if (($I_ret)) {
((($I_strm)->$I_msg)=([i8 *](("invalid code lengths set"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
((($I_state)->$I_have)=(0));
((($I_state)->$I_mode)=($I_CODELENS));
}
else if ((($I_state)->$I_mode) == ($I_CODELENS)) {
while (((($I_state)->$I_have)<((($I_state)->$I_nlen)+(($I_state)->$I_ndist)))) {
for (0;1; 0) {
(($I_here)=((($I_state)->$I_lencode)[(([u32 ](($I_hold)))&(((1)<<(($I_state)->$I_lenbits))-(1)))]));
if ((([u32 ]((($I_here).$I_bits)))<=($I_bits))) {
break;
}
while ((0)) {
if ((($I_have)==(0))) {
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
if (((($I_here).$I_val)<(16))) {
while ((0)) {
(($I_hold)>>=(($I_here).$I_bits));
(($I_bits)-=([u32 ]((($I_here).$I_bits))));
}
(((($I_state)->$I_lens)[((($I_state)->$I_have)++)])=(($I_here).$I_val));
}
else {
if (((($I_here).$I_val)==(16))) {
while ((0)) {
while ((($I_bits)<([u32 ](((($I_here).$I_bits)+(2)))))) {
while ((0)) {
if ((($I_have)==(0))) {
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
}
while ((0)) {
(($I_hold)>>=(($I_here).$I_bits));
(($I_bits)-=([u32 ]((($I_here).$I_bits))));
}
if (((($I_state)->$I_have)==(0))) {
((($I_strm)->$I_msg)=([i8 *](("invalid bit length repeat"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
(($I_len)=((($I_state)->$I_lens)[((($I_state)->$I_have)-(1))]));
(($I_copy)=((3)+(([u32 ](($I_hold)))&(((1)<<(2))-(1)))));
while ((0)) {
(($I_hold)>>=(2));
(($I_bits)-=([u32 ]((2))));
}
}
else {
if (((($I_here).$I_val)==(17))) {
while ((0)) {
while ((($I_bits)<([u32 ](((($I_here).$I_bits)+(3)))))) {
while ((0)) {
if ((($I_have)==(0))) {
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
}
while ((0)) {
(($I_hold)>>=(($I_here).$I_bits));
(($I_bits)-=([u32 ]((($I_here).$I_bits))));
}
(($I_len)=(0));
(($I_copy)=((3)+(([u32 ](($I_hold)))&(((1)<<(3))-(1)))));
while ((0)) {
(($I_hold)>>=(3));
(($I_bits)-=([u32 ]((3))));
}
}
else {
while ((0)) {
while ((($I_bits)<([u32 ](((($I_here).$I_bits)+(7)))))) {
while ((0)) {
if ((($I_have)==(0))) {
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
}
while ((0)) {
(($I_hold)>>=(($I_here).$I_bits));
(($I_bits)-=([u32 ]((($I_here).$I_bits))));
}
(($I_len)=(0));
(($I_copy)=((11)+(([u32 ](($I_hold)))&(((1)<<(7))-(1)))));
while ((0)) {
(($I_hold)>>=(7));
(($I_bits)-=([u32 ]((7))));
}
}
}
if ((((($I_state)->$I_have)+($I_copy))>((($I_state)->$I_nlen)+(($I_state)->$I_ndist)))) {
((($I_strm)->$I_msg)=([i8 *](("invalid bit length repeat"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
while ((($I_copy)--)) {
(((($I_state)->$I_lens)[((($I_state)->$I_have)++)])=([u16 ](($I_len))));
}
}
}
if (((($I_state)->$I_mode)==($I_BAD))) {
break;
}
if ((((($I_state)->$I_lens)[(256)])==(0))) {
((($I_strm)->$I_msg)=([i8 *](("invalid code -- missing end-of-block"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
((($I_state)->$I_next)=(($I_state)->$I_codes));
((($I_state)->$I_lencode)=([ $T_anon_WzN6Vy *]((($I_state)->$I_next))));
((($I_state)->$I_lenbits)=(9));
(($I_ret)=($I_inflate_table(($I_LENS), (($I_state)->$I_lens), (($I_state)->$I_nlen), (&(($I_state)->$I_next)), (&(($I_state)->$I_lenbits)), (($I_state)->$I_work))));
if (($I_ret)) {
((($I_strm)->$I_msg)=([i8 *](("invalid literal/lengths set"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
((($I_state)->$I_distcode)=([ $T_anon_WzN6Vy *]((($I_state)->$I_next))));
((($I_state)->$I_distbits)=(6));
(($I_ret)=($I_inflate_table(($I_DISTS), ((($I_state)->$I_lens)+(($I_state)->$I_nlen)), (($I_state)->$I_ndist), (&(($I_state)->$I_next)), (&(($I_state)->$I_distbits)), (($I_state)->$I_work))));
if (($I_ret)) {
((($I_strm)->$I_msg)=([i8 *](("invalid distances set"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
((($I_state)->$I_mode)=($I_LEN_));
if ((($I_flush)==(6))) {
}
}
else if ((($I_state)->$I_mode) == ($I_LEN_)) {
((($I_state)->$I_mode)=($I_LEN));
}
else if ((($I_state)->$I_mode) == ($I_LEN)) {
if (((($I_have)>=(6))&(($I_left)>=(258)))) {
while ((0)) {
((($I_strm)->$I_next_out)=($I_put));
((($I_strm)->$I_avail_out)=($I_left));
((($I_strm)->$I_next_in)=($I_next));
((($I_strm)->$I_avail_in)=($I_have));
((($I_state)->$I_hold)=($I_hold));
((($I_state)->$I_bits)=($I_bits));
}
($I_inflate_fast(($I_strm), ($I_out)));
while ((0)) {
(($I_put)=(($I_strm)->$I_next_out));
(($I_left)=(($I_strm)->$I_avail_out));
(($I_next)=(($I_strm)->$I_next_in));
(($I_have)=(($I_strm)->$I_avail_in));
(($I_hold)=(($I_state)->$I_hold));
(($I_bits)=(($I_state)->$I_bits));
}
if (((($I_state)->$I_mode)==($I_TYPE))) {
((($I_state)->$I_back)=(-(1)));
}
break;
}
((($I_state)->$I_back)=(0));
for (0;1; 0) {
(($I_here)=((($I_state)->$I_lencode)[(([u32 ](($I_hold)))&(((1)<<(($I_state)->$I_lenbits))-(1)))]));
if ((([u32 ]((($I_here).$I_bits)))<=($I_bits))) {
break;
}
while ((0)) {
if ((($I_have)==(0))) {
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
if (((($I_here).$I_op)&(((($I_here).$I_op)&(240))==(0)))) {
(($I_last)=($I_here));
for (0;1; 0) {
(($I_here)=((($I_state)->$I_lencode)[((($I_last).$I_val)+((([u32 ](($I_hold)))&(((1)<<((($I_last).$I_bits)+(($I_last).$I_op)))-(1)))>>(($I_last).$I_bits)))]));
if ((([u32 ](((($I_last).$I_bits)+(($I_here).$I_bits))))<=($I_bits))) {
break;
}
while ((0)) {
if ((($I_have)==(0))) {
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
while ((0)) {
(($I_hold)>>=(($I_last).$I_bits));
(($I_bits)-=([u32 ]((($I_last).$I_bits))));
}
((($I_state)->$I_back)+=(($I_last).$I_bits));
}
while ((0)) {
(($I_hold)>>=(($I_here).$I_bits));
(($I_bits)-=([u32 ]((($I_here).$I_bits))));
}
((($I_state)->$I_back)+=(($I_here).$I_bits));
((($I_state)->$I_length)=([u32 ]((($I_here).$I_val))));
if ((([i32 ]((($I_here).$I_op)))==(0))) {
((($I_state)->$I_mode)=($I_LIT));
break;
}
if (((($I_here).$I_op)&(32))) {
((($I_state)->$I_back)=(-(1)));
((($I_state)->$I_mode)=($I_TYPE));
break;
}
if (((($I_here).$I_op)&(64))) {
((($I_strm)->$I_msg)=([i8 *](("invalid literal/length code"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
((($I_state)->$I_extra)=(([u32 ]((($I_here).$I_op)))&(15)));
((($I_state)->$I_mode)=($I_LENEXT));
}
else if ((($I_state)->$I_mode) == ($I_LENEXT)) {
if ((($I_state)->$I_extra)) {
while ((0)) {
while ((($I_bits)<([u32 ]((($I_state)->$I_extra))))) {
while ((0)) {
if ((($I_have)==(0))) {
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
}
((($I_state)->$I_length)+=(([u32 ](($I_hold)))&(((1)<<(($I_state)->$I_extra))-(1))));
while ((0)) {
(($I_hold)>>=(($I_state)->$I_extra));
(($I_bits)-=([u32 ]((($I_state)->$I_extra))));
}
((($I_state)->$I_back)+=(($I_state)->$I_extra));
}
((($I_state)->$I_was)=(($I_state)->$I_length));
((($I_state)->$I_mode)=($I_DIST));
}
else if ((($I_state)->$I_mode) == ($I_DIST)) {
for (0;1; 0) {
(($I_here)=((($I_state)->$I_distcode)[(([u32 ](($I_hold)))&(((1)<<(($I_state)->$I_distbits))-(1)))]));
if ((([u32 ]((($I_here).$I_bits)))<=($I_bits))) {
break;
}
while ((0)) {
if ((($I_have)==(0))) {
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
if ((((($I_here).$I_op)&(240))==(0))) {
(($I_last)=($I_here));
for (0;1; 0) {
(($I_here)=((($I_state)->$I_distcode)[((($I_last).$I_val)+((([u32 ](($I_hold)))&(((1)<<((($I_last).$I_bits)+(($I_last).$I_op)))-(1)))>>(($I_last).$I_bits)))]));
if ((([u32 ](((($I_last).$I_bits)+(($I_here).$I_bits))))<=($I_bits))) {
break;
}
while ((0)) {
if ((($I_have)==(0))) {
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
while ((0)) {
(($I_hold)>>=(($I_last).$I_bits));
(($I_bits)-=([u32 ]((($I_last).$I_bits))));
}
((($I_state)->$I_back)+=(($I_last).$I_bits));
}
while ((0)) {
(($I_hold)>>=(($I_here).$I_bits));
(($I_bits)-=([u32 ]((($I_here).$I_bits))));
}
((($I_state)->$I_back)+=(($I_here).$I_bits));
if (((($I_here).$I_op)&(64))) {
((($I_strm)->$I_msg)=([i8 *](("invalid distance code"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
((($I_state)->$I_offset)=([u32 ]((($I_here).$I_val))));
((($I_state)->$I_extra)=(([u32 ]((($I_here).$I_op)))&(15)));
((($I_state)->$I_mode)=($I_DISTEXT));
}
else if ((($I_state)->$I_mode) == ($I_DISTEXT)) {
if ((($I_state)->$I_extra)) {
while ((0)) {
while ((($I_bits)<([u32 ]((($I_state)->$I_extra))))) {
while ((0)) {
if ((($I_have)==(0))) {
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
}
((($I_state)->$I_offset)+=(([u32 ](($I_hold)))&(((1)<<(($I_state)->$I_extra))-(1))));
while ((0)) {
(($I_hold)>>=(($I_state)->$I_extra));
(($I_bits)-=([u32 ]((($I_state)->$I_extra))));
}
((($I_state)->$I_back)+=(($I_state)->$I_extra));
}
((($I_state)->$I_mode)=($I_MATCH));
}
else if ((($I_state)->$I_mode) == ($I_MATCH)) {
if ((($I_left)==(0))) {
}
(($I_copy)=(($I_out)-($I_left)));
if (((($I_state)->$I_offset)>($I_copy))) {
(($I_copy)=((($I_state)->$I_offset)-($I_copy)));
if ((($I_copy)>(($I_state)->$I_whave))) {
if ((($I_state)->$I_sane)) {
((($I_strm)->$I_msg)=([i8 *](("invalid distance too far back"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
}
if ((($I_copy)>(($I_state)->$I_wnext))) {
(($I_copy)-=(($I_state)->$I_wnext));
(($I_from)=((($I_state)->$I_window)+((($I_state)->$I_wsize)-($I_copy))));
}
else {
(($I_from)=((($I_state)->$I_window)+((($I_state)->$I_wnext)-($I_copy))));
}
if ((($I_copy)>(($I_state)->$I_length))) {
(($I_copy)=(($I_state)->$I_length));
}
}
else {
(($I_from)=(($I_put)-(($I_state)->$I_offset)));
(($I_copy)=(($I_state)->$I_length));
}
if ((($I_copy)>($I_left))) {
(($I_copy)=($I_left));
}
(($I_left)-=($I_copy));
((($I_state)->$I_length)-=($I_copy));
while ((--($I_copy))) {
((*(($I_put)++))=(*(($I_from)++)));
}
if (((($I_state)->$I_length)==(0))) {
((($I_state)->$I_mode)=($I_LEN));
}
break;
}
else if ((($I_state)->$I_mode) == ($I_LIT)) {
if ((($I_left)==(0))) {
}
((*(($I_put)++))=([u8 ]((($I_state)->$I_length))));
(($I_left)--);
((($I_state)->$I_mode)=($I_LEN));
break;
}
else if ((($I_state)->$I_mode) == ($I_CHECK)) {
if ((($I_state)->$I_wrap)) {
while ((0)) {
while ((($I_bits)<([u32 ]((32))))) {
while ((0)) {
if ((($I_have)==(0))) {
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
}
(($I_out)-=($I_left));
((($I_strm)->$I_total_out)+=($I_out));
((($I_state)->$I_total)+=($I_out));
(($I_out)=($I_left));
while ((0)) {
(($I_hold)=(0));
(($I_bits)=(0));
}
}
((($I_state)->$I_mode)=($I_LENGTH));
}
else if ((($I_state)->$I_mode) == ($I_LENGTH)) {
if (((($I_state)->$I_wrap)&(($I_state)->$I_flags))) {
while ((0)) {
while ((($I_bits)<([u32 ]((32))))) {
while ((0)) {
if ((($I_have)==(0))) {
}
(($I_have)--);
(($I_hold)+=(([u32 ]((*(($I_next)++))))<<($I_bits)));
(($I_bits)+=(8));
}
}
}
if ((((($I_state)->$I_wrap)&(4))&(($I_hold)!=((($I_state)->$I_total)&(4294967295))))) {
((($I_strm)->$I_msg)=([i8 *](("incorrect length check"))));
((($I_state)->$I_mode)=($I_BAD));
break;
}
while ((0)) {
(($I_hold)=(0));
(($I_bits)=(0));
}
}
((($I_state)->$I_mode)=($I_DONE));
}
else if ((($I_state)->$I_mode) == ($I_DONE)) {
(($I_ret)=(1));
}
else if ((($I_state)->$I_mode) == ($I_BAD)) {
(($I_ret)=(-(3)));
}
else if ((($I_state)->$I_mode) == ($I_MEM)) {
return (-(4));
}
else if ((($I_state)->$I_mode) == ($I_SYNC)) {
return (-(2));
}
else {
return (-(2));
}
}
}
if (((($I_state)->$I_wsize)|(((($I_out)!=(($I_strm)->$I_avail_out))&((($I_state)->$I_mode)<($I_BAD)))&(((($I_state)->$I_mode)<($I_CHECK))|(($I_flush)!=(4)))))) {
if (($I_updatewindow(($I_strm), (($I_strm)->$I_next_out), (($I_out)-(($I_strm)->$I_avail_out))))) {
((($I_state)->$I_mode)=($I_MEM));
return (-(4));
}
}
(($I_in)-=(($I_strm)->$I_avail_in));
(($I_out)-=(($I_strm)->$I_avail_out));
((($I_strm)->$I_total_in)+=($I_in));
((($I_strm)->$I_total_out)+=($I_out));
((($I_state)->$I_total)+=($I_out));
if (((((($I_in)==(0))&(($I_out)==(0)))|(($I_flush)==(4)))&(($I_ret)==(0)))) {
(($I_ret)=(-(5)));
}
return ($I_ret);
}

i32 $I_inflateEnd($T_z_stream_s  *$I_strm)
{
$T_inflate_state  *$I_state;
if (($I_inflateStateCheck(($I_strm)))) {
return (-(2));
}
(($I_state)=([$T_inflate_state *]((($I_strm)->$I_state))));
((($I_strm)->$I_state)=(0));
return (0);
}

i32 $I_inflateGetDictionary($T_z_stream_s  *$I_strm, u8   *$I_dictionary, u32  *$I_dictLength)
{
$T_inflate_state  *$I_state;
if (($I_inflateStateCheck(($I_strm)))) {
return (-(2));
}
(($I_state)=([$T_inflate_state *]((($I_strm)->$I_state))));
if (((($I_state)->$I_whave)&(($I_dictionary)!=(0)))) {
($I___builtin___memcpy_chk(($I_dictionary), ((($I_state)->$I_window)+(($I_state)->$I_wnext)), ((($I_state)->$I_whave)-(($I_state)->$I_wnext)), ($I___builtin_object_size(($I_dictionary), (0)))));
($I___builtin___memcpy_chk(((($I_dictionary)+(($I_state)->$I_whave))-(($I_state)->$I_wnext)), (($I_state)->$I_window), (($I_state)->$I_wnext), ($I___builtin_object_size(((($I_dictionary)+(($I_state)->$I_whave))-(($I_state)->$I_wnext)), (0)))));
}
if ((($I_dictLength)!=(0))) {
((*($I_dictLength))=(($I_state)->$I_whave));
}
return (0);
}

i32 $I_inflateSetDictionary($T_z_stream_s  *$I_strm,  u8   *$I_dictionary, u32  $I_dictLength)
{
$T_inflate_state  *$I_state;
u32  $I_dictid;
i32  $I_ret;
if (($I_inflateStateCheck(($I_strm)))) {
return (-(2));
}
(($I_state)=([$T_inflate_state *]((($I_strm)->$I_state))));
if ((((($I_state)->$I_wrap)!=(0))&((($I_state)->$I_mode)!=($I_DICT)))) {
return (-(2));
}
if (((($I_state)->$I_mode)==($I_DICT))) {
(($I_dictid)=($I_adler32((0), (0), (0))));
(($I_dictid)=($I_adler32(($I_dictid), ($I_dictionary), ($I_dictLength))));
if ((($I_dictid)!=(($I_state)->$I_check))) {
return (-(3));
}
}
(($I_ret)=($I_updatewindow(($I_strm), (($I_dictionary)+($I_dictLength)), ($I_dictLength))));
if (($I_ret)) {
((($I_state)->$I_mode)=($I_MEM));
return (-(4));
}
((($I_state)->$I_havedict)=(1));
return (0);
}

i32 $I_inflateGetHeader($T_z_stream_s  *$I_strm, $T_gz_header_s  *$I_head)
{
$T_inflate_state  *$I_state;
if (($I_inflateStateCheck(($I_strm)))) {
return (-(2));
}
(($I_state)=([$T_inflate_state *]((($I_strm)->$I_state))));
if ((((($I_state)->$I_wrap)&(2))==(0))) {
return (-(2));
}
((($I_state)->$I_head)=($I_head));
((($I_head)->$I_done)=(0));
return (0);
}

 u32 $I_syncsearch(u32 *$I_have,  u8 *$I_buf, u32 $I_len)
{
u32  $I_got;
u32  $I_next;
(($I_got)=(*($I_have)));
(($I_next)=(0));
while (((($I_next)<($I_len))&(($I_got)<(4)))) {
(($I_next)++);
}
((*($I_have))=($I_got));
return ($I_next);
}

i32 $I_inflateSync($T_z_stream_s  *$I_strm)
{
u32  $I_len;
i32  $I_flags;
u32  $I_in;
u32  $I_out;
u8  [4]$I_buf;
$T_inflate_state  *$I_state;
if (($I_inflateStateCheck(($I_strm)))) {
return (-(2));
}
(($I_state)=([$T_inflate_state *]((($I_strm)->$I_state))));
if ((((($I_strm)->$I_avail_in)==(0))&((($I_state)->$I_bits)<(8)))) {
return (-(5));
}
if (((($I_state)->$I_mode)!=($I_SYNC))) {
((($I_state)->$I_mode)=($I_SYNC));
((($I_state)->$I_hold)>>=((($I_state)->$I_bits)&(7)));
((($I_state)->$I_bits)-=((($I_state)->$I_bits)&(7)));
(($I_len)=(0));
while (((($I_state)->$I_bits)>=(8))) {
((($I_buf)[(($I_len)++)])=([u8 ]((($I_state)->$I_hold))));
((($I_state)->$I_hold)>>=(8));
((($I_state)->$I_bits)-=(8));
}
((($I_state)->$I_have)=(0));
($I_syncsearch((&(($I_state)->$I_have)), ($I_buf), ($I_len)));
}
(($I_len)=($I_syncsearch((&(($I_state)->$I_have)), (($I_strm)->$I_next_in), (($I_strm)->$I_avail_in))));
((($I_strm)->$I_avail_in)-=($I_len));
((($I_strm)->$I_next_in)+=($I_len));
((($I_strm)->$I_total_in)+=($I_len));
if (((($I_state)->$I_have)!=(4))) {
return (-(3));
}
if (((($I_state)->$I_flags)==(-(1)))) {
((($I_state)->$I_wrap)=(0));
}
else {
((($I_state)->$I_wrap)&=(~(4)));
}
(($I_flags)=(($I_state)->$I_flags));
(($I_in)=(($I_strm)->$I_total_in));
(($I_out)=(($I_strm)->$I_total_out));
($I_inflateReset(($I_strm)));
((($I_strm)->$I_total_in)=($I_in));
((($I_strm)->$I_total_out)=($I_out));
((($I_state)->$I_flags)=($I_flags));
((($I_state)->$I_mode)=($I_TYPE));
return (0);
}

i32 $I_inflateSyncPoint($T_z_stream_s  *$I_strm)
{
$T_inflate_state  *$I_state;
if (($I_inflateStateCheck(($I_strm)))) {
return (-(2));
}
(($I_state)=([$T_inflate_state *]((($I_strm)->$I_state))));
return (((($I_state)->$I_mode)==($I_STORED))&((($I_state)->$I_bits)==(0)));
}

i32 $I_inflateCopy($T_z_stream_s  *$I_dest, $T_z_stream_s  *$I_source)
{
$T_inflate_state  *$I_state;
$T_inflate_state  *$I_copy;
u8  *$I_window;
u32  $I_wsize;
if ((($I_inflateStateCheck(($I_source)))|(($I_dest)==(0)))) {
return (-(2));
}
(($I_state)=([$T_inflate_state *]((($I_source)->$I_state))));
if ((($I_copy)==(0))) {
return (-(4));
}
(($I_window)=(0));
if (((($I_state)->$I_window)!=(0))) {
if ((($I_window)==(0))) {
return (-(4));
}
}
($I___builtin___memcpy_chk(([v0  ](($I_dest))), ([v0  ](($I_source))), (0), ($I___builtin_object_size(([v0  ](($I_dest))), (0)))));
($I___builtin___memcpy_chk(([v0  ](($I_copy))), ([v0  ](($I_state))), (0), ($I___builtin_object_size(([v0  ](($I_copy))), (0)))));
((($I_copy)->$I_strm)=($I_dest));
if ((((($I_state)->$I_lencode)>=(($I_state)->$I_codes))&((($I_state)->$I_lencode)<=(((($I_state)->$I_codes)+((852)+(592)))-(1))))) {
((($I_copy)->$I_lencode)=((($I_copy)->$I_codes)+((($I_state)->$I_lencode)-(($I_state)->$I_codes))));
((($I_copy)->$I_distcode)=((($I_copy)->$I_codes)+((($I_state)->$I_distcode)-(($I_state)->$I_codes))));
}
((($I_copy)->$I_next)=((($I_copy)->$I_codes)+((($I_state)->$I_next)-(($I_state)->$I_codes))));
if ((($I_window)!=(0))) {
(($I_wsize)=((1)<<(($I_state)->$I_wbits)));
($I___builtin___memcpy_chk(($I_window), (($I_state)->$I_window), ($I_wsize), ($I___builtin_object_size(($I_window), (0)))));
}
((($I_copy)->$I_window)=($I_window));
((($I_dest)->$I_state)=([$T_internal_state *](($I_copy))));
return (0);
}

i32 $I_inflateUndermine($T_z_stream_s  *$I_strm, i32 $I_subvert)
{
$T_inflate_state  *$I_state;
if (($I_inflateStateCheck(($I_strm)))) {
return (-(2));
}
(($I_state)=([$T_inflate_state *]((($I_strm)->$I_state))));
([v0 ](($I_subvert)));
((($I_state)->$I_sane)=(1));
return (-(3));
}

i32 $I_inflateValidate($T_z_stream_s  *$I_strm, i32 $I_check)
{
$T_inflate_state  *$I_state;
if (($I_inflateStateCheck(($I_strm)))) {
return (-(2));
}
(($I_state)=([$T_inflate_state *]((($I_strm)->$I_state))));
if ((($I_check)&(($I_state)->$I_wrap))) {
((($I_state)->$I_wrap)|=(4));
}
else {
((($I_state)->$I_wrap)&=(~(4)));
}
return (0);
}

i32 $I_inflateMark($T_z_stream_s  *$I_strm)
{
$T_inflate_state  *$I_state;
if (($I_inflateStateCheck(($I_strm)))) {
return (-((1)<<(16)));
}
(($I_state)=([$T_inflate_state *]((($I_strm)->$I_state))));
}

u32 $I_inflateCodesUsed($T_z_stream_s  *$I_strm)
{
$T_inflate_state  *$I_state;
if (($I_inflateStateCheck(($I_strm)))) {
return ([u32 ]((-(1))));
}
(($I_state)=([$T_inflate_state *]((($I_strm)->$I_state))));
return ([u32 ](((($I_state)->$I_next)-(($I_state)->$I_codes))));
}

i32 $I_inflate_table(i32 $I_type, u16 *$I_lens, u32 $I_codes, $T_anon_WzN6Vy **$I_table, u32 *$I_bits, u16 *$I_work)
{
u32  $I_len;
u32  $I_sym;
u32  $I_min;
u32  $I_max;
u32  $I_root;
u32  $I_curr;
u32  $I_drop;
i32  $I_left;
u32  $I_used;
u32  $I_huff;
u32  $I_incr;
u32  $I_fill;
u32  $I_low;
u32  $I_mask;
$T_anon_WzN6Vy  $I_here;
$T_anon_WzN6Vy  *$I_next;
 u16  *$I_base;
 u16  *$I_extra;
u32  $I_match;
u16  [0]$I_count;
u16  [0]$I_offs;
  u16  [31]$I_lbase;
  u16  [31]$I_lext;
  u16  [32]$I_dbase;
  u16  [32]$I_dext;
for ((($I_len)=(0));(($I_len)<=(15)); (($I_len)++)) {
((($I_count)[($I_len)])=(0));
}
for ((($I_sym)=(0));(($I_sym)<($I_codes)); (($I_sym)++)) {
((($I_count)[(($I_lens)[($I_sym)])])++);
}
(($I_root)=(*($I_bits)));
for ((($I_max)=(15));(($I_max)>=(1)); (($I_max)--)) {
if (((($I_count)[($I_max)])!=(0))) {
break;
}
}
if ((($I_root)>($I_max))) {
(($I_root)=($I_max));
}
if ((($I_max)==(0))) {
((($I_here).$I_op)=([u8 ]((64))));
((($I_here).$I_bits)=([u8 ]((1))));
((($I_here).$I_val)=([u16 ]((0))));
((*((*($I_table))++))=($I_here));
((*((*($I_table))++))=($I_here));
((*($I_bits))=(1));
return (0);
}
for ((($I_min)=(1));(($I_min)<($I_max)); (($I_min)++)) {
if (((($I_count)[($I_min)])!=(0))) {
break;
}
}
if ((($I_root)<($I_min))) {
(($I_root)=($I_min));
}
(($I_left)=(1));
for ((($I_len)=(1));(($I_len)<=(15)); (($I_len)++)) {
(($I_left)<<=(1));
(($I_left)-=(($I_count)[($I_len)]));
if ((($I_left)<(0))) {
return (-(1));
}
}
if (((($I_left)>(0))&((($I_type)==($I_CODES))|(($I_max)!=(1))))) {
return (-(1));
}
((($I_offs)[(1)])=(0));
for ((($I_len)=(1));(($I_len)<(15)); (($I_len)++)) {
((($I_offs)[(($I_len)+(1))])=((($I_offs)[($I_len)])+(($I_count)[($I_len)])));
}
for ((($I_sym)=(0));(($I_sym)<($I_codes)); (($I_sym)++)) {
if (((($I_lens)[($I_sym)])!=(0))) {
((($I_work)[((($I_offs)[(($I_lens)[($I_sym)])])++)])=([u16 ](($I_sym))));
}
}
for (u8 $_EktCbA = 0; $_EktCbA == 0; $_EktCbA = 1) {
if (($I_type) == ($I_CODES)) {
(($I_base)=(($I_extra)=($I_work)));
(($I_match)=(20));
break;
}
else if (($I_type) == ($I_LENS)) {
(($I_base)=($I_lbase));
(($I_extra)=($I_lext));
(($I_match)=(257));
break;
(($I_extra)=($I_dext));
(($I_match)=(0));
}
else {
(($I_base)=($I_dbase));
}
}
(($I_huff)=(0));
(($I_sym)=(0));
(($I_len)=($I_min));
(($I_next)=(*($I_table)));
(($I_curr)=($I_root));
(($I_drop)=(0));
(($I_low)=([u32 ]((-(1)))));
(($I_used)=((1)<<($I_root)));
(($I_mask)=(($I_used)-(1)));
if ((((($I_type)==($I_LENS))&(($I_used)>(852)))|((($I_type)==($I_DISTS))&(($I_used)>(592))))) {
return (1);
}
for (0;1; 0) {
((($I_here).$I_bits)=([u8 ]((($I_len)-($I_drop)))));
if ((((($I_work)[($I_sym)])+(1))<($I_match))) {
((($I_here).$I_op)=([u8 ]((0))));
((($I_here).$I_val)=(($I_work)[($I_sym)]));
}
else {
if (((($I_work)[($I_sym)])>=($I_match))) {
((($I_here).$I_op)=([u8 ]((($I_extra)[((($I_work)[($I_sym)])-($I_match))]))));
((($I_here).$I_val)=(($I_base)[((($I_work)[($I_sym)])-($I_match))]));
}
else {
((($I_here).$I_op)=([u8 ](((32)+(64)))));
((($I_here).$I_val)=(0));
}
}
(($I_incr)=((1)<<(($I_len)-($I_drop))));
(($I_fill)=((1)<<($I_curr)));
(($I_min)=($I_fill));
while ((($I_fill)!=(0))) {
(($I_fill)-=($I_incr));
((($I_next)[((($I_huff)>>($I_drop))+($I_fill))])=($I_here));
}
(($I_incr)=((1)<<(($I_len)-(1))));
while ((($I_huff)&($I_incr))) {
(($I_incr)>>=(1));
}
if ((($I_incr)!=(0))) {
(($I_huff)&=(($I_incr)-(1)));
(($I_huff)+=($I_incr));
}
else {
(($I_huff)=(0));
}
(($I_sym)++);
if (((--(($I_count)[($I_len)]))==(0))) {
if ((($I_len)==($I_max))) {
break;
}
(($I_len)=(($I_lens)[(($I_work)[($I_sym)])]));
}
if (((($I_len)>($I_root))&((($I_huff)&($I_mask))!=($I_low)))) {
if ((($I_drop)==(0))) {
(($I_drop)=($I_root));
}
(($I_next)+=($I_min));
(($I_curr)=(($I_len)-($I_drop)));
(($I_left)=([i32 ](((1)<<($I_curr)))));
while (((($I_curr)+($I_drop))<($I_max))) {
(($I_left)-=(($I_count)[(($I_curr)+($I_drop))]));
if ((($I_left)<=(0))) {
break;
}
(($I_curr)++);
(($I_left)<<=(1));
}
(($I_used)+=((1)<<($I_curr)));
if ((((($I_type)==($I_LENS))&(($I_used)>(852)))|((($I_type)==($I_DISTS))&(($I_used)>(592))))) {
return (1);
}
(($I_low)=(($I_huff)&($I_mask)));
((((*($I_table))[($I_low)]).$I_op)=([u8 ](($I_curr))));
((((*($I_table))[($I_low)]).$I_bits)=([u8 ](($I_root))));
((((*($I_table))[($I_low)]).$I_val)=([u16 ]((($I_next)-(*($I_table))))));
}
}
if ((($I_huff)!=(0))) {
((($I_here).$I_op)=([u8 ]((64))));
((($I_here).$I_bits)=([u8 ]((($I_len)-($I_drop)))));
((($I_here).$I_val)=([u16 ]((0))));
((($I_next)[($I_huff)])=($I_here));
}
((*($I_table))+=($I_used));
((*($I_bits))=($I_root));
return (0);
}

 u32 $I_bi_reverse(u32 $I_code, i32 $I_len)
{
 u32  $I_res = (0);
while (((--($I_len))>(0))) {
(($I_res)|=(($I_code)&(1)));
}
return (($I_res)>>(1));
}

 v0 $I_bi_flush($T_internal_state *$I_s)
{
if (((($I_s)->$I_bi_valid)==(16))) {
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((($I_s)->$I_bi_buf)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ]((($I_s)->$I_bi_buf)))>>(8)))))));
((($I_s)->$I_bi_buf)=(0));
((($I_s)->$I_bi_valid)=(0));
}
else {
if (((($I_s)->$I_bi_valid)>=(8))) {
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((($I_s)->$I_bi_buf))))));
((($I_s)->$I_bi_buf)>>=(8));
((($I_s)->$I_bi_valid)-=(8));
}
}
}

 v0 $I_bi_windup($T_internal_state *$I_s)
{
if (((($I_s)->$I_bi_valid)>(8))) {
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((($I_s)->$I_bi_buf)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ]((($I_s)->$I_bi_buf)))>>(8)))))));
}
else {
if (((($I_s)->$I_bi_valid)>(0))) {
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((($I_s)->$I_bi_buf))))));
}
}
((($I_s)->$I_bi_buf)=(0));
((($I_s)->$I_bi_valid)=(0));
}

 v0 $I_gen_codes($T_ct_data_s *$I_tree, i32 $I_max_code, u16   *$I_bl_count)
{
u16   [0]$I_next_code;
u32  $I_code = (0);
i32  $I_bits;
i32  $I_n;
for ((($I_bits)=(1));(($I_bits)<=(15)); (($I_bits)++)) {
(($I_code)=((($I_code)+(($I_bl_count)[(($I_bits)-(1))]))<<(1)));
((($I_next_code)[($I_bits)])=([u16  ](($I_code))));
}
for ((($I_n)=(0));(($I_n)<=($I_max_code)); (($I_n)++)) {
i32  $I_len = (((($I_tree)[($I_n)]).$I_dl).$I_len);
if ((($I_len)==(0))) {
continue;
}
((((($I_tree)[($I_n)]).$I_fc).$I_code)=([u16  ](($I_bi_reverse(((($I_next_code)[($I_len)])++), ($I_len))))));
}
}

 v0 $I_tr_static_init(v0 $A_0)
{
}

 v0 $I_init_block($T_internal_state *$I_s)
{
i32  $I_n;
for ((($I_n)=(0));(($I_n)<(((256)+(1))+(29))); (($I_n)++)) {
(((((($I_s)->$I_dyn_ltree)[($I_n)]).$I_fc).$I_freq)=(0));
}
for ((($I_n)=(0));(($I_n)<(30)); (($I_n)++)) {
(((((($I_s)->$I_dyn_dtree)[($I_n)]).$I_fc).$I_freq)=(0));
}
for ((($I_n)=(0));(($I_n)<(19)); (($I_n)++)) {
(((((($I_s)->$I_bl_tree)[($I_n)]).$I_fc).$I_freq)=(0));
}
(((((($I_s)->$I_dyn_ltree)[(256)]).$I_fc).$I_freq)=(1));
((($I_s)->$I_opt_len)=((($I_s)->$I_static_len)=(0)));
((($I_s)->$I_sym_next)=((($I_s)->$I_matches)=(0)));
}

v0 $I__tr_init($T_internal_state *$I_s)
{
($I_tr_static_init());
(((($I_s)->$I_l_desc).$I_dyn_tree)=(($I_s)->$I_dyn_ltree));
(((($I_s)->$I_l_desc).$I_stat_desc)=(&($I_static_l_desc)));
(((($I_s)->$I_d_desc).$I_dyn_tree)=(($I_s)->$I_dyn_dtree));
(((($I_s)->$I_d_desc).$I_stat_desc)=(&($I_static_d_desc)));
(((($I_s)->$I_bl_desc).$I_dyn_tree)=(($I_s)->$I_bl_tree));
(((($I_s)->$I_bl_desc).$I_stat_desc)=(&($I_static_bl_desc)));
((($I_s)->$I_bi_buf)=(0));
((($I_s)->$I_bi_valid)=(0));
($I_init_block(($I_s)));
}

 v0 $I_pqdownheap($T_internal_state *$I_s, $T_ct_data_s *$I_tree, i32 $I_k)
{
i32  $I_v = ((($I_s)->$I_heap)[($I_k)]);
i32  $I_j = (($I_k)<<(1));
while ((($I_j)<=(($I_s)->$I_heap_len))) {
if (((($I_j)<(($I_s)->$I_heap_len))&(((((($I_tree)[((($I_s)->$I_heap)[(($I_j)+(1))])]).$I_fc).$I_freq)<(((($I_tree)[((($I_s)->$I_heap)[($I_j)])]).$I_fc).$I_freq))|(((((($I_tree)[((($I_s)->$I_heap)[(($I_j)+(1))])]).$I_fc).$I_freq)==(((($I_tree)[((($I_s)->$I_heap)[($I_j)])]).$I_fc).$I_freq))&(((($I_s)->$I_depth)[((($I_s)->$I_heap)[(($I_j)+(1))])])<=((($I_s)->$I_depth)[((($I_s)->$I_heap)[($I_j)])])))))) {
(($I_j)++);
}
if ((((((($I_tree)[($I_v)]).$I_fc).$I_freq)<(((($I_tree)[((($I_s)->$I_heap)[($I_j)])]).$I_fc).$I_freq))|(((((($I_tree)[($I_v)]).$I_fc).$I_freq)==(((($I_tree)[((($I_s)->$I_heap)[($I_j)])]).$I_fc).$I_freq))&(((($I_s)->$I_depth)[($I_v)])<=((($I_s)->$I_depth)[((($I_s)->$I_heap)[($I_j)])]))))) {
break;
}
(((($I_s)->$I_heap)[($I_k)])=((($I_s)->$I_heap)[($I_j)]));
(($I_k)=($I_j));
(($I_j)<<=(1));
}
(((($I_s)->$I_heap)[($I_k)])=($I_v));
}

 v0 $I_gen_bitlen($T_internal_state *$I_s, $T_tree_desc_s *$I_desc)
{
$T_ct_data_s  *$I_tree = (($I_desc)->$I_dyn_tree);
i32  $I_max_code = (($I_desc)->$I_max_code);
 $T_ct_data_s  *$I_stree = ((($I_desc)->$I_stat_desc)->$I_static_tree);
 i32   *$I_extra = ((($I_desc)->$I_stat_desc)->$I_extra_bits);
i32  $I_base = ((($I_desc)->$I_stat_desc)->$I_extra_base);
i32  $I_max_length = ((($I_desc)->$I_stat_desc)->$I_max_length);
i32  $I_h;
i32  $I_n;
i32  $I_m;
i32  $I_bits;
i32  $I_xbits;
u16   $I_f;
i32  $I_overflow = (0);
for ((($I_bits)=(0));(($I_bits)<=(15)); (($I_bits)++)) {
(((($I_s)->$I_bl_count)[($I_bits)])=(0));
}
((((($I_tree)[((($I_s)->$I_heap)[(($I_s)->$I_heap_max)])]).$I_dl).$I_len)=(0));
for ((($I_h)=((($I_s)->$I_heap_max)+(1)));(($I_h)<(((2)*(((256)+(1))+(29)))+(1))); (($I_h)++)) {
(($I_n)=((($I_s)->$I_heap)[($I_h)]));
(($I_bits)=((((($I_tree)[(((($I_tree)[($I_n)]).$I_dl).$I_dad)]).$I_dl).$I_len)+(1)));
((((($I_tree)[($I_n)]).$I_dl).$I_len)=([u16  ](($I_bits))));
if ((($I_n)>($I_max_code))) {
continue;
}
(((($I_s)->$I_bl_count)[($I_bits)])++);
(($I_xbits)=(0));
if ((($I_n)>=($I_base))) {
(($I_xbits)=(($I_extra)[(($I_n)-($I_base))]));
}
(($I_f)=(((($I_tree)[($I_n)]).$I_fc).$I_freq));
((($I_s)->$I_opt_len)+=(([u32  ](($I_f)))*([u32 ]((($I_bits)+($I_xbits))))));
if (($I_stree)) {
((($I_s)->$I_static_len)+=(([u32  ](($I_f)))*([u32 ](((((($I_stree)[($I_n)]).$I_dl).$I_len)+($I_xbits))))));
}
}
if ((($I_overflow)==(0))) {
return;
}
while ((($I_overflow)>(0))) {
(($I_bits)=(($I_max_length)-(1)));
while ((((($I_s)->$I_bl_count)[($I_bits)])==(0))) {
(($I_bits)--);
}
(((($I_s)->$I_bl_count)[($I_bits)])--);
(((($I_s)->$I_bl_count)[(($I_bits)+(1))])+=(2));
(((($I_s)->$I_bl_count)[($I_max_length)])--);
(($I_overflow)-=(2));
}
for ((($I_bits)=($I_max_length));(($I_bits)!=(0)); (($I_bits)--)) {
(($I_n)=((($I_s)->$I_bl_count)[($I_bits)]));
while ((($I_n)!=(0))) {
(($I_m)=((($I_s)->$I_heap)[(--($I_h))]));
if ((($I_m)>($I_max_code))) {
continue;
}
if ((([u32 ]((((($I_tree)[($I_m)]).$I_dl).$I_len)))!=([u32 ](($I_bits))))) {
((($I_s)->$I_opt_len)+=((([u32  ](($I_bits)))-(((($I_tree)[($I_m)]).$I_dl).$I_len))*(((($I_tree)[($I_m)]).$I_fc).$I_freq)));
((((($I_tree)[($I_m)]).$I_dl).$I_len)=([u16  ](($I_bits))));
}
(($I_n)--);
}
}
}

 v0 $I_build_tree($T_internal_state *$I_s, $T_tree_desc_s *$I_desc)
{
$T_ct_data_s  *$I_tree = (($I_desc)->$I_dyn_tree);
 $T_ct_data_s  *$I_stree = ((($I_desc)->$I_stat_desc)->$I_static_tree);
i32  $I_elems = ((($I_desc)->$I_stat_desc)->$I_elems);
i32  $I_n;
i32  $I_m;
i32  $I_max_code = (-(1));
i32  $I_node;
for ((($I_n)=(0));(($I_n)<($I_elems)); (($I_n)++)) {
if (((((($I_tree)[($I_n)]).$I_fc).$I_freq)!=(0))) {
(((($I_s)->$I_heap)[(++(($I_s)->$I_heap_len))])=(($I_max_code)=($I_n)));
(((($I_s)->$I_depth)[($I_n)])=(0));
}
else {
((((($I_tree)[($I_n)]).$I_dl).$I_len)=(0));
}
}
while (((($I_s)->$I_heap_len)<(2))) {
((((($I_tree)[($I_node)]).$I_fc).$I_freq)=(1));
(((($I_s)->$I_depth)[($I_node)])=(0));
((($I_s)->$I_opt_len)--);
if (($I_stree)) {
((($I_s)->$I_static_len)-=(((($I_stree)[($I_node)]).$I_dl).$I_len));
}
}
((($I_desc)->$I_max_code)=($I_max_code));
for ((($I_n)=((($I_s)->$I_heap_len)/(2)));(($I_n)>=(1)); (($I_n)--)) {
($I_pqdownheap(($I_s), ($I_tree), ($I_n)));
}
(($I_node)=($I_elems));
while (((($I_s)->$I_heap_len)>=(2))) {
(($I_n)=((($I_s)->$I_heap)[(1)]));
(((($I_s)->$I_heap)[(1)])=((($I_s)->$I_heap)[((($I_s)->$I_heap_len)--)]));
($I_pqdownheap(($I_s), ($I_tree), (1)));
(($I_m)=((($I_s)->$I_heap)[(1)]));
(((($I_s)->$I_heap)[(--(($I_s)->$I_heap_max))])=($I_n));
(((($I_s)->$I_heap)[(--(($I_s)->$I_heap_max))])=($I_m));
((((($I_tree)[($I_node)]).$I_fc).$I_freq)=((((($I_tree)[($I_n)]).$I_fc).$I_freq)+(((($I_tree)[($I_m)]).$I_fc).$I_freq)));
((((($I_tree)[($I_n)]).$I_dl).$I_dad)=((((($I_tree)[($I_m)]).$I_dl).$I_dad)=([u16  ](($I_node)))));
(((($I_s)->$I_heap)[(1)])=(($I_node)++));
($I_pqdownheap(($I_s), ($I_tree), (1)));
}
(((($I_s)->$I_heap)[(--(($I_s)->$I_heap_max))])=((($I_s)->$I_heap)[(1)]));
($I_gen_bitlen(($I_s), ([$T_tree_desc_s *](($I_desc)))));
($I_gen_codes(([$T_ct_data_s *](($I_tree))), ($I_max_code), (($I_s)->$I_bl_count)));
}

 v0 $I_scan_tree($T_internal_state *$I_s, $T_ct_data_s *$I_tree, i32 $I_max_code)
{
i32  $I_n;
i32  $I_prevlen = (-(1));
i32  $I_curlen;
i32  $I_nextlen = (((($I_tree)[(0)]).$I_dl).$I_len);
i32  $I_count = (0);
i32  $I_max_count = (7);
i32  $I_min_count = (4);
((((($I_tree)[(($I_max_code)+(1))]).$I_dl).$I_len)=([u16  ]((65535))));
for ((($I_n)=(0));(($I_n)<=($I_max_code)); (($I_n)++)) {
(($I_curlen)=($I_nextlen));
(($I_nextlen)=(((($I_tree)[(($I_n)+(1))]).$I_dl).$I_len));
if ((((++($I_count))<($I_max_count))&(($I_curlen)==($I_nextlen)))) {
continue;
}
else {
if ((($I_count)<($I_min_count))) {
(((((($I_s)->$I_bl_tree)[($I_curlen)]).$I_fc).$I_freq)+=([u16  ](($I_count))));
}
else {
if ((($I_curlen)!=(0))) {
if ((($I_curlen)!=($I_prevlen))) {
(((((($I_s)->$I_bl_tree)[($I_curlen)]).$I_fc).$I_freq)++);
}
(((((($I_s)->$I_bl_tree)[(16)]).$I_fc).$I_freq)++);
}
else {
if ((($I_count)<=(10))) {
(((((($I_s)->$I_bl_tree)[(17)]).$I_fc).$I_freq)++);
}
else {
(((((($I_s)->$I_bl_tree)[(18)]).$I_fc).$I_freq)++);
}
}
}
}
(($I_count)=(0));
(($I_prevlen)=($I_curlen));
if ((($I_nextlen)==(0))) {
}
else {
if ((($I_curlen)==($I_nextlen))) {
}
else {
}
}
}
}

 v0 $I_send_tree($T_internal_state *$I_s, $T_ct_data_s *$I_tree, i32 $I_max_code)
{
i32  $I_n;
i32  $I_prevlen = (-(1));
i32  $I_curlen;
i32  $I_nextlen = (((($I_tree)[(0)]).$I_dl).$I_len);
i32  $I_count = (0);
i32  $I_max_count = (7);
i32  $I_min_count = (4);
for ((($I_n)=(0));(($I_n)<=($I_max_code)); (($I_n)++)) {
(($I_curlen)=($I_nextlen));
(($I_nextlen)=(((($I_tree)[(($I_n)+(1))]).$I_dl).$I_len));
if ((((++($I_count))<($I_max_count))&(($I_curlen)==($I_nextlen)))) {
continue;
}
else {
if ((($I_count)<($I_min_count))) {
while (((--($I_count))!=(0))) {
i32  $I_len = ((((($I_s)->$I_bl_tree)[($I_curlen)]).$I_dl).$I_len);
if (((($I_s)->$I_bi_valid)>(([i32 ]((16)))-($I_len)))) {
i32  $I_val = ([i32 ](((((($I_s)->$I_bl_tree)[($I_curlen)]).$I_fc).$I_code)));
((($I_s)->$I_bi_buf)|=(([u16  ](($I_val)))<<(($I_s)->$I_bi_valid)));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((($I_s)->$I_bi_buf)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ]((($I_s)->$I_bi_buf)))>>(8)))))));
((($I_s)->$I_bi_buf)=(([u16  ](($I_val)))>>((16)-(($I_s)->$I_bi_valid))));
((($I_s)->$I_bi_valid)+=(($I_len)-(16)));
}
else {
((($I_s)->$I_bi_buf)|=(([u16  ](((((($I_s)->$I_bl_tree)[($I_curlen)]).$I_fc).$I_code)))<<(($I_s)->$I_bi_valid)));
((($I_s)->$I_bi_valid)+=($I_len));
}
}
}
else {
if ((($I_curlen)!=(0))) {
if ((($I_curlen)!=($I_prevlen))) {
i32  $I_len = ((((($I_s)->$I_bl_tree)[($I_curlen)]).$I_dl).$I_len);
if (((($I_s)->$I_bi_valid)>(([i32 ]((16)))-($I_len)))) {
i32  $I_val = ([i32 ](((((($I_s)->$I_bl_tree)[($I_curlen)]).$I_fc).$I_code)));
((($I_s)->$I_bi_buf)|=(([u16  ](($I_val)))<<(($I_s)->$I_bi_valid)));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((($I_s)->$I_bi_buf)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ]((($I_s)->$I_bi_buf)))>>(8)))))));
((($I_s)->$I_bi_buf)=(([u16  ](($I_val)))>>((16)-(($I_s)->$I_bi_valid))));
((($I_s)->$I_bi_valid)+=(($I_len)-(16)));
}
else {
((($I_s)->$I_bi_buf)|=(([u16  ](((((($I_s)->$I_bl_tree)[($I_curlen)]).$I_fc).$I_code)))<<(($I_s)->$I_bi_valid)));
((($I_s)->$I_bi_valid)+=($I_len));
}
(($I_count)--);
}
if ((1)) {
i32  $I_len = ((((($I_s)->$I_bl_tree)[(16)]).$I_dl).$I_len);
if (((($I_s)->$I_bi_valid)>(([i32 ]((16)))-($I_len)))) {
i32  $I_val = ([i32 ](((((($I_s)->$I_bl_tree)[(16)]).$I_fc).$I_code)));
((($I_s)->$I_bi_buf)|=(([u16  ](($I_val)))<<(($I_s)->$I_bi_valid)));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((($I_s)->$I_bi_buf)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ]((($I_s)->$I_bi_buf)))>>(8)))))));
((($I_s)->$I_bi_buf)=(([u16  ](($I_val)))>>((16)-(($I_s)->$I_bi_valid))));
((($I_s)->$I_bi_valid)+=(($I_len)-(16)));
}
else {
((($I_s)->$I_bi_buf)|=(([u16  ](((((($I_s)->$I_bl_tree)[(16)]).$I_fc).$I_code)))<<(($I_s)->$I_bi_valid)));
((($I_s)->$I_bi_valid)+=($I_len));
}
}
if ((1)) {
i32  $I_len = (2);
if (((($I_s)->$I_bi_valid)>(([i32 ]((16)))-($I_len)))) {
i32  $I_val = (([i32 ](($I_count)))-(3));
((($I_s)->$I_bi_buf)|=(([u16  ](($I_val)))<<(($I_s)->$I_bi_valid)));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((($I_s)->$I_bi_buf)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ]((($I_s)->$I_bi_buf)))>>(8)))))));
((($I_s)->$I_bi_buf)=(([u16  ](($I_val)))>>((16)-(($I_s)->$I_bi_valid))));
((($I_s)->$I_bi_valid)+=(($I_len)-(16)));
}
else {
((($I_s)->$I_bi_buf)|=(([u16  ]((($I_count)-(3))))<<(($I_s)->$I_bi_valid)));
((($I_s)->$I_bi_valid)+=($I_len));
}
}
}
else {
if ((($I_count)<=(10))) {
if ((1)) {
i32  $I_len = ((((($I_s)->$I_bl_tree)[(17)]).$I_dl).$I_len);
if (((($I_s)->$I_bi_valid)>(([i32 ]((16)))-($I_len)))) {
i32  $I_val = ([i32 ](((((($I_s)->$I_bl_tree)[(17)]).$I_fc).$I_code)));
((($I_s)->$I_bi_buf)|=(([u16  ](($I_val)))<<(($I_s)->$I_bi_valid)));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((($I_s)->$I_bi_buf)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ]((($I_s)->$I_bi_buf)))>>(8)))))));
((($I_s)->$I_bi_buf)=(([u16  ](($I_val)))>>((16)-(($I_s)->$I_bi_valid))));
((($I_s)->$I_bi_valid)+=(($I_len)-(16)));
}
else {
((($I_s)->$I_bi_buf)|=(([u16  ](((((($I_s)->$I_bl_tree)[(17)]).$I_fc).$I_code)))<<(($I_s)->$I_bi_valid)));
((($I_s)->$I_bi_valid)+=($I_len));
}
}
if ((1)) {
i32  $I_len = (3);
if (((($I_s)->$I_bi_valid)>(([i32 ]((16)))-($I_len)))) {
i32  $I_val = (([i32 ](($I_count)))-(3));
((($I_s)->$I_bi_buf)|=(([u16  ](($I_val)))<<(($I_s)->$I_bi_valid)));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((($I_s)->$I_bi_buf)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ]((($I_s)->$I_bi_buf)))>>(8)))))));
((($I_s)->$I_bi_buf)=(([u16  ](($I_val)))>>((16)-(($I_s)->$I_bi_valid))));
((($I_s)->$I_bi_valid)+=(($I_len)-(16)));
}
else {
((($I_s)->$I_bi_buf)|=(([u16  ]((($I_count)-(3))))<<(($I_s)->$I_bi_valid)));
((($I_s)->$I_bi_valid)+=($I_len));
}
}
}
else {
if ((1)) {
i32  $I_len = ((((($I_s)->$I_bl_tree)[(18)]).$I_dl).$I_len);
if (((($I_s)->$I_bi_valid)>(([i32 ]((16)))-($I_len)))) {
i32  $I_val = ([i32 ](((((($I_s)->$I_bl_tree)[(18)]).$I_fc).$I_code)));
((($I_s)->$I_bi_buf)|=(([u16  ](($I_val)))<<(($I_s)->$I_bi_valid)));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((($I_s)->$I_bi_buf)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ]((($I_s)->$I_bi_buf)))>>(8)))))));
((($I_s)->$I_bi_buf)=(([u16  ](($I_val)))>>((16)-(($I_s)->$I_bi_valid))));
((($I_s)->$I_bi_valid)+=(($I_len)-(16)));
}
else {
((($I_s)->$I_bi_buf)|=(([u16  ](((((($I_s)->$I_bl_tree)[(18)]).$I_fc).$I_code)))<<(($I_s)->$I_bi_valid)));
((($I_s)->$I_bi_valid)+=($I_len));
}
}
if ((1)) {
i32  $I_len = (7);
if (((($I_s)->$I_bi_valid)>(([i32 ]((16)))-($I_len)))) {
i32  $I_val = (([i32 ](($I_count)))-(11));
((($I_s)->$I_bi_buf)|=(([u16  ](($I_val)))<<(($I_s)->$I_bi_valid)));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((($I_s)->$I_bi_buf)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ]((($I_s)->$I_bi_buf)))>>(8)))))));
((($I_s)->$I_bi_buf)=(([u16  ](($I_val)))>>((16)-(($I_s)->$I_bi_valid))));
((($I_s)->$I_bi_valid)+=(($I_len)-(16)));
}
else {
((($I_s)->$I_bi_buf)|=(([u16  ]((($I_count)-(11))))<<(($I_s)->$I_bi_valid)));
((($I_s)->$I_bi_valid)+=($I_len));
}
}
}
}
}
}
(($I_count)=(0));
(($I_prevlen)=($I_curlen));
if ((($I_nextlen)==(0))) {
}
else {
if ((($I_curlen)==($I_nextlen))) {
}
else {
}
}
}
}

 i32 $I_build_bl_tree($T_internal_state *$I_s)
{
i32  $I_max_blindex;
($I_scan_tree(($I_s), ([$T_ct_data_s *]((($I_s)->$I_dyn_ltree))), ((($I_s)->$I_l_desc).$I_max_code)));
($I_scan_tree(($I_s), ([$T_ct_data_s *]((($I_s)->$I_dyn_dtree))), ((($I_s)->$I_d_desc).$I_max_code)));
($I_build_tree(($I_s), ([$T_tree_desc_s *]((&(($I_s)->$I_bl_desc))))));
for ((($I_max_blindex)=((19)-(1)));(($I_max_blindex)>=(3)); (($I_max_blindex)--)) {
if ((((((($I_s)->$I_bl_tree)[(($I_bl_order)[($I_max_blindex)])]).$I_dl).$I_len)!=(0))) {
break;
}
}
((($I_s)->$I_opt_len)+=(((((3)*(([u32  ](($I_max_blindex)))+(1)))+(5))+(5))+(4)));
return ($I_max_blindex);
}

 v0 $I_send_all_trees($T_internal_state *$I_s, i32 $I_lcodes, i32 $I_dcodes, i32 $I_blcodes)
{
i32  $I_rank;
if ((1)) {
i32  $I_len = (5);
if (((($I_s)->$I_bi_valid)>(([i32 ]((16)))-($I_len)))) {
i32  $I_val = (([i32 ](($I_lcodes)))-(257));
((($I_s)->$I_bi_buf)|=(([u16  ](($I_val)))<<(($I_s)->$I_bi_valid)));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((($I_s)->$I_bi_buf)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ]((($I_s)->$I_bi_buf)))>>(8)))))));
((($I_s)->$I_bi_buf)=(([u16  ](($I_val)))>>((16)-(($I_s)->$I_bi_valid))));
((($I_s)->$I_bi_valid)+=(($I_len)-(16)));
}
else {
((($I_s)->$I_bi_buf)|=(([u16  ]((($I_lcodes)-(257))))<<(($I_s)->$I_bi_valid)));
((($I_s)->$I_bi_valid)+=($I_len));
}
}
if ((1)) {
i32  $I_len = (5);
if (((($I_s)->$I_bi_valid)>(([i32 ]((16)))-($I_len)))) {
i32  $I_val = (([i32 ](($I_dcodes)))-(1));
((($I_s)->$I_bi_buf)|=(([u16  ](($I_val)))<<(($I_s)->$I_bi_valid)));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((($I_s)->$I_bi_buf)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ]((($I_s)->$I_bi_buf)))>>(8)))))));
((($I_s)->$I_bi_buf)=(([u16  ](($I_val)))>>((16)-(($I_s)->$I_bi_valid))));
((($I_s)->$I_bi_valid)+=(($I_len)-(16)));
}
else {
((($I_s)->$I_bi_buf)|=(([u16  ]((($I_dcodes)-(1))))<<(($I_s)->$I_bi_valid)));
((($I_s)->$I_bi_valid)+=($I_len));
}
}
if ((1)) {
i32  $I_len = (4);
if (((($I_s)->$I_bi_valid)>(([i32 ]((16)))-($I_len)))) {
i32  $I_val = (([i32 ](($I_blcodes)))-(4));
((($I_s)->$I_bi_buf)|=(([u16  ](($I_val)))<<(($I_s)->$I_bi_valid)));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((($I_s)->$I_bi_buf)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ]((($I_s)->$I_bi_buf)))>>(8)))))));
((($I_s)->$I_bi_buf)=(([u16  ](($I_val)))>>((16)-(($I_s)->$I_bi_valid))));
((($I_s)->$I_bi_valid)+=(($I_len)-(16)));
}
else {
((($I_s)->$I_bi_buf)|=(([u16  ]((($I_blcodes)-(4))))<<(($I_s)->$I_bi_valid)));
((($I_s)->$I_bi_valid)+=($I_len));
}
}
for ((($I_rank)=(0));(($I_rank)<($I_blcodes)); (($I_rank)++)) {
if ((1)) {
i32  $I_len = (3);
if (((($I_s)->$I_bi_valid)>(([i32 ]((16)))-($I_len)))) {
i32  $I_val = ([i32 ](((((($I_s)->$I_bl_tree)[(($I_bl_order)[($I_rank)])]).$I_dl).$I_len)));
((($I_s)->$I_bi_buf)|=(([u16  ](($I_val)))<<(($I_s)->$I_bi_valid)));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((($I_s)->$I_bi_buf)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ]((($I_s)->$I_bi_buf)))>>(8)))))));
((($I_s)->$I_bi_buf)=(([u16  ](($I_val)))>>((16)-(($I_s)->$I_bi_valid))));
((($I_s)->$I_bi_valid)+=(($I_len)-(16)));
}
else {
((($I_s)->$I_bi_buf)|=(([u16  ](((((($I_s)->$I_bl_tree)[(($I_bl_order)[($I_rank)])]).$I_dl).$I_len)))<<(($I_s)->$I_bi_valid)));
((($I_s)->$I_bi_valid)+=($I_len));
}
}
}
($I_send_tree(($I_s), ([$T_ct_data_s *]((($I_s)->$I_dyn_ltree))), (($I_lcodes)-(1))));
($I_send_tree(($I_s), ([$T_ct_data_s *]((($I_s)->$I_dyn_dtree))), (($I_dcodes)-(1))));
}

v0 $I__tr_stored_block($T_internal_state *$I_s, i8  *$I_buf, u32  $I_stored_len, i32 $I_last)
{
if ((1)) {
i32  $I_len = (3);
if (((($I_s)->$I_bi_valid)>(([i32 ]((16)))-($I_len)))) {
i32  $I_val = (([i32 ](((0)<<(1))))+($I_last));
((($I_s)->$I_bi_buf)|=(([u16  ](($I_val)))<<(($I_s)->$I_bi_valid)));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((($I_s)->$I_bi_buf)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ]((($I_s)->$I_bi_buf)))>>(8)))))));
((($I_s)->$I_bi_buf)=(([u16  ](($I_val)))>>((16)-(($I_s)->$I_bi_valid))));
((($I_s)->$I_bi_valid)+=(($I_len)-(16)));
}
else {
((($I_s)->$I_bi_buf)|=(([u16  ]((((0)<<(1))+($I_last))))<<(($I_s)->$I_bi_valid)));
((($I_s)->$I_bi_valid)+=($I_len));
}
}
($I_bi_windup(($I_s)));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ](($I_stored_len)))&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ](([u16  ](($I_stored_len)))))>>(8)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ]((~($I_stored_len))))&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ](([u16  ]((~($I_stored_len))))))>>(8)))))));
if (($I_stored_len)) {
($I___builtin___memcpy_chk(((($I_s)->$I_pending_buf)+(($I_s)->$I_pending)), ([u8   *](($I_buf))), ($I_stored_len), ($I___builtin_object_size(((($I_s)->$I_pending_buf)+(($I_s)->$I_pending)), (0)))));
}
((($I_s)->$I_pending)+=($I_stored_len));
}

v0 $I__tr_flush_bits($T_internal_state *$I_s)
{
($I_bi_flush(($I_s)));
}

v0 $I__tr_align($T_internal_state *$I_s)
{
if ((1)) {
i32  $I_len = (3);
if (((($I_s)->$I_bi_valid)>(([i32 ]((16)))-($I_len)))) {
i32  $I_val = (([i32 ]((1)))<<(1));
((($I_s)->$I_bi_buf)|=(([u16  ](($I_val)))<<(($I_s)->$I_bi_valid)));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((($I_s)->$I_bi_buf)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ]((($I_s)->$I_bi_buf)))>>(8)))))));
((($I_s)->$I_bi_buf)=(([u16  ](($I_val)))>>((16)-(($I_s)->$I_bi_valid))));
((($I_s)->$I_bi_valid)+=(($I_len)-(16)));
}
else {
((($I_s)->$I_bi_buf)|=(([u16  ](((1)<<(1))))<<(($I_s)->$I_bi_valid)));
((($I_s)->$I_bi_valid)+=($I_len));
}
}
if ((1)) {
i32  $I_len = (((($I_static_ltree)[(256)]).$I_dl).$I_len);
if (((($I_s)->$I_bi_valid)>(([i32 ]((16)))-($I_len)))) {
i32  $I_val = ([i32 ]((((($I_static_ltree)[(256)]).$I_fc).$I_code)));
((($I_s)->$I_bi_buf)|=(([u16  ](($I_val)))<<(($I_s)->$I_bi_valid)));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((($I_s)->$I_bi_buf)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ]((($I_s)->$I_bi_buf)))>>(8)))))));
((($I_s)->$I_bi_buf)=(([u16  ](($I_val)))>>((16)-(($I_s)->$I_bi_valid))));
((($I_s)->$I_bi_valid)+=(($I_len)-(16)));
}
else {
((($I_s)->$I_bi_buf)|=(([u16  ]((((($I_static_ltree)[(256)]).$I_fc).$I_code)))<<(($I_s)->$I_bi_valid)));
((($I_s)->$I_bi_valid)+=($I_len));
}
}
($I_bi_flush(($I_s)));
}

 v0 $I_compress_block($T_internal_state *$I_s,  $T_ct_data_s *$I_ltree,  $T_ct_data_s *$I_dtree)
{
u32  $I_dist;
i32  $I_lc;
u32  $I_sx = (0);
u32  $I_code;
i32  $I_extra;
if (((($I_s)->$I_sym_next)!=(0))) {
while ((($I_sx)<(($I_s)->$I_sym_next))) {
(($I_dist)=(((($I_s)->$I_sym_buf)[(($I_sx)++)])&(255)));
(($I_dist)+=(([u32 ]((((($I_s)->$I_sym_buf)[(($I_sx)++)])&(255))))<<(8)));
(($I_lc)=((($I_s)->$I_sym_buf)[(($I_sx)++)]));
if ((($I_dist)==(0))) {
if ((1)) {
i32  $I_len = (((($I_ltree)[($I_lc)]).$I_dl).$I_len);
if (((($I_s)->$I_bi_valid)>(([i32 ]((16)))-($I_len)))) {
i32  $I_val = ([i32 ]((((($I_ltree)[($I_lc)]).$I_fc).$I_code)));
((($I_s)->$I_bi_buf)|=(([u16  ](($I_val)))<<(($I_s)->$I_bi_valid)));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((($I_s)->$I_bi_buf)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ]((($I_s)->$I_bi_buf)))>>(8)))))));
((($I_s)->$I_bi_buf)=(([u16  ](($I_val)))>>((16)-(($I_s)->$I_bi_valid))));
((($I_s)->$I_bi_valid)+=(($I_len)-(16)));
}
else {
((($I_s)->$I_bi_buf)|=(([u16  ]((((($I_ltree)[($I_lc)]).$I_fc).$I_code)))<<(($I_s)->$I_bi_valid)));
((($I_s)->$I_bi_valid)+=($I_len));
}
}
}
else {
(($I_code)=(($I__length_code)[($I_lc)]));
if ((1)) {
i32  $I_len = (((($I_ltree)[((($I_code)+(256))+(1))]).$I_dl).$I_len);
if (((($I_s)->$I_bi_valid)>(([i32 ]((16)))-($I_len)))) {
i32  $I_val = ([i32 ]((((($I_ltree)[((($I_code)+(256))+(1))]).$I_fc).$I_code)));
((($I_s)->$I_bi_buf)|=(([u16  ](($I_val)))<<(($I_s)->$I_bi_valid)));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((($I_s)->$I_bi_buf)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ]((($I_s)->$I_bi_buf)))>>(8)))))));
((($I_s)->$I_bi_buf)=(([u16  ](($I_val)))>>((16)-(($I_s)->$I_bi_valid))));
((($I_s)->$I_bi_valid)+=(($I_len)-(16)));
}
else {
((($I_s)->$I_bi_buf)|=(([u16  ]((((($I_ltree)[((($I_code)+(256))+(1))]).$I_fc).$I_code)))<<(($I_s)->$I_bi_valid)));
((($I_s)->$I_bi_valid)+=($I_len));
}
}
(($I_extra)=(($I_extra_lbits)[($I_code)]));
if ((($I_extra)!=(0))) {
(($I_lc)-=(($I_base_length)[($I_code)]));
if ((1)) {
i32  $I_len = ($I_extra);
if (((($I_s)->$I_bi_valid)>(([i32 ]((16)))-($I_len)))) {
i32  $I_val = ([i32 ](($I_lc)));
((($I_s)->$I_bi_buf)|=(([u16  ](($I_val)))<<(($I_s)->$I_bi_valid)));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((($I_s)->$I_bi_buf)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ]((($I_s)->$I_bi_buf)))>>(8)))))));
((($I_s)->$I_bi_buf)=(([u16  ](($I_val)))>>((16)-(($I_s)->$I_bi_valid))));
((($I_s)->$I_bi_valid)+=(($I_len)-(16)));
}
else {
((($I_s)->$I_bi_buf)|=(([u16  ](($I_lc)))<<(($I_s)->$I_bi_valid)));
((($I_s)->$I_bi_valid)+=($I_len));
}
}
}
(($I_dist)--);
if ((1)) {
i32  $I_len = (((($I_dtree)[($I_code)]).$I_dl).$I_len);
if (((($I_s)->$I_bi_valid)>(([i32 ]((16)))-($I_len)))) {
i32  $I_val = ([i32 ]((((($I_dtree)[($I_code)]).$I_fc).$I_code)));
((($I_s)->$I_bi_buf)|=(([u16  ](($I_val)))<<(($I_s)->$I_bi_valid)));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((($I_s)->$I_bi_buf)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ]((($I_s)->$I_bi_buf)))>>(8)))))));
((($I_s)->$I_bi_buf)=(([u16  ](($I_val)))>>((16)-(($I_s)->$I_bi_valid))));
((($I_s)->$I_bi_valid)+=(($I_len)-(16)));
}
else {
((($I_s)->$I_bi_buf)|=(([u16  ]((((($I_dtree)[($I_code)]).$I_fc).$I_code)))<<(($I_s)->$I_bi_valid)));
((($I_s)->$I_bi_valid)+=($I_len));
}
}
(($I_extra)=(($I_extra_dbits)[($I_code)]));
if ((($I_extra)!=(0))) {
(($I_dist)-=([u32 ]((($I_base_dist)[($I_code)]))));
if ((1)) {
i32  $I_len = ($I_extra);
if (((($I_s)->$I_bi_valid)>(([i32 ]((16)))-($I_len)))) {
i32  $I_val = ([i32 ](($I_dist)));
((($I_s)->$I_bi_buf)|=(([u16  ](($I_val)))<<(($I_s)->$I_bi_valid)));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((($I_s)->$I_bi_buf)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ]((($I_s)->$I_bi_buf)))>>(8)))))));
((($I_s)->$I_bi_buf)=(([u16  ](($I_val)))>>((16)-(($I_s)->$I_bi_valid))));
((($I_s)->$I_bi_valid)+=(($I_len)-(16)));
}
else {
((($I_s)->$I_bi_buf)|=(([u16  ](($I_dist)))<<(($I_s)->$I_bi_valid)));
((($I_s)->$I_bi_valid)+=($I_len));
}
}
}
}
}
}
if ((1)) {
i32  $I_len = (((($I_ltree)[(256)]).$I_dl).$I_len);
if (((($I_s)->$I_bi_valid)>(([i32 ]((16)))-($I_len)))) {
i32  $I_val = ([i32 ]((((($I_ltree)[(256)]).$I_fc).$I_code)));
((($I_s)->$I_bi_buf)|=(([u16  ](($I_val)))<<(($I_s)->$I_bi_valid)));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((($I_s)->$I_bi_buf)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ]((($I_s)->$I_bi_buf)))>>(8)))))));
((($I_s)->$I_bi_buf)=(([u16  ](($I_val)))>>((16)-(($I_s)->$I_bi_valid))));
((($I_s)->$I_bi_valid)+=(($I_len)-(16)));
}
else {
((($I_s)->$I_bi_buf)|=(([u16  ]((((($I_ltree)[(256)]).$I_fc).$I_code)))<<(($I_s)->$I_bi_valid)));
((($I_s)->$I_bi_valid)+=($I_len));
}
}
}

 i32 $I_detect_data_type($T_internal_state *$I_s)
{
u32  $I_block_mask = (4093624447);
i32  $I_n;
if ((((((((($I_s)->$I_dyn_ltree)[(9)]).$I_fc).$I_freq)!=(0))|(((((($I_s)->$I_dyn_ltree)[(10)]).$I_fc).$I_freq)!=(0)))|(((((($I_s)->$I_dyn_ltree)[(13)]).$I_fc).$I_freq)!=(0)))) {
return (1);
}
for ((($I_n)=(32));(($I_n)<(256)); (($I_n)++)) {
if ((((((($I_s)->$I_dyn_ltree)[($I_n)]).$I_fc).$I_freq)!=(0))) {
return (1);
}
}
return (0);
}

v0 $I__tr_flush_block($T_internal_state *$I_s, i8  *$I_buf, u32  $I_stored_len, i32 $I_last)
{
u32   $I_opt_lenb;
u32   $I_static_lenb;
i32  $I_max_blindex = (0);
if (((($I_s)->$I_level)>(0))) {
if ((((($I_s)->$I_strm)->$I_data_type)==(2))) {
(((($I_s)->$I_strm)->$I_data_type)=($I_detect_data_type(($I_s))));
}
($I_build_tree(($I_s), ([$T_tree_desc_s *]((&(($I_s)->$I_l_desc))))));
($I_build_tree(($I_s), ([$T_tree_desc_s *]((&(($I_s)->$I_d_desc))))));
(($I_max_blindex)=($I_build_bl_tree(($I_s))));
(($I_opt_lenb)=((((($I_s)->$I_opt_len)+(3))+(7))>>(3)));
(($I_static_lenb)=((((($I_s)->$I_static_len)+(3))+(7))>>(3)));
if (((($I_static_lenb)<=($I_opt_lenb))|((($I_s)->$I_strategy)==(4)))) {
(($I_opt_lenb)=($I_static_lenb));
}
}
else {
(($I_opt_lenb)=(($I_static_lenb)=(($I_stored_len)+(5))));
}
if ((((($I_stored_len)+(4))<=($I_opt_lenb))&(($I_buf)!=([i8 *]((0)))))) {
($I__tr_stored_block(($I_s), ($I_buf), ($I_stored_len), ($I_last)));
}
else {
if ((($I_static_lenb)==($I_opt_lenb))) {
i32  $I_len = (3);
if (((($I_s)->$I_bi_valid)>(([i32 ]((16)))-($I_len)))) {
i32  $I_val = (([i32 ](((1)<<(1))))+($I_last));
((($I_s)->$I_bi_buf)|=(([u16  ](($I_val)))<<(($I_s)->$I_bi_valid)));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((($I_s)->$I_bi_buf)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ]((($I_s)->$I_bi_buf)))>>(8)))))));
((($I_s)->$I_bi_buf)=(([u16  ](($I_val)))>>((16)-(($I_s)->$I_bi_valid))));
((($I_s)->$I_bi_valid)+=(($I_len)-(16)));
}
else {
((($I_s)->$I_bi_buf)|=(([u16  ]((((1)<<(1))+($I_last))))<<(($I_s)->$I_bi_valid)));
((($I_s)->$I_bi_valid)+=($I_len));
}
($I_compress_block(($I_s), ([ $T_ct_data_s *](($I_static_ltree))), ([ $T_ct_data_s *](($I_static_dtree)))));
}
else {
i32  $I_len = (3);
if (((($I_s)->$I_bi_valid)>(([i32 ]((16)))-($I_len)))) {
i32  $I_val = (([i32 ](((2)<<(1))))+($I_last));
((($I_s)->$I_bi_buf)|=(([u16  ](($I_val)))<<(($I_s)->$I_bi_valid)));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ](((($I_s)->$I_bi_buf)&(255)))))));
(((($I_s)->$I_pending_buf)[((($I_s)->$I_pending)++)])=([u8   ](([u8  ]((([u16  ]((($I_s)->$I_bi_buf)))>>(8)))))));
((($I_s)->$I_bi_buf)=(([u16  ](($I_val)))>>((16)-(($I_s)->$I_bi_valid))));
((($I_s)->$I_bi_valid)+=(($I_len)-(16)));
}
else {
((($I_s)->$I_bi_buf)|=(([u16  ]((((2)<<(1))+($I_last))))<<(($I_s)->$I_bi_valid)));
((($I_s)->$I_bi_valid)+=($I_len));
}
($I_send_all_trees(($I_s), (((($I_s)->$I_l_desc).$I_max_code)+(1)), (((($I_s)->$I_d_desc).$I_max_code)+(1)), (($I_max_blindex)+(1))));
($I_compress_block(($I_s), ([ $T_ct_data_s *]((($I_s)->$I_dyn_ltree))), ([ $T_ct_data_s *]((($I_s)->$I_dyn_dtree)))));
}
}
($I_init_block(($I_s)));
if (($I_last)) {
($I_bi_windup(($I_s)));
}
}

i32 $I__tr_tally($T_internal_state *$I_s, u32 $I_dist, u32 $I_lc)
{
(((($I_s)->$I_sym_buf)[((($I_s)->$I_sym_next)++)])=([u8  ](($I_dist))));
(((($I_s)->$I_sym_buf)[((($I_s)->$I_sym_next)++)])=([u8  ]((($I_dist)>>(8)))));
(((($I_s)->$I_sym_buf)[((($I_s)->$I_sym_next)++)])=([u8  ](($I_lc))));
if ((($I_dist)==(0))) {
(((((($I_s)->$I_dyn_ltree)[($I_lc)]).$I_fc).$I_freq)++);
}
else {
((($I_s)->$I_matches)++);
(($I_dist)--);
(((((($I_s)->$I_dyn_ltree)[(((($I__length_code)[($I_lc)])+(256))+(1))]).$I_fc).$I_freq)++);
}
return ((($I_s)->$I_sym_next)==(($I_s)->$I_sym_end));
}

i32 $I_uncompress2(u8   *$I_dest, u32   *$I_destLen,  u8   *$I_source, u32  *$I_sourceLen)
{
$T_z_stream_s   $I_stream;
i32  $I_err;
 u32   $I_max = ([u32  ]((-(1))));
u32   $I_len;
u32   $I_left;
u8   [1]$I_buf;
(($I_len)=(*($I_sourceLen)));
if ((*($I_destLen))) {
(($I_left)=(*($I_destLen)));
((*($I_destLen))=(0));
}
else {
(($I_left)=(1));
(($I_dest)=($I_buf));
}
((($I_stream).$I_next_in)=([u8   *](($I_source))));
((($I_stream).$I_avail_in)=(0));
((($I_stream).$I_zalloc)=([v0  ]((0))));
((($I_stream).$I_zfree)=([v0  ]((0))));
((($I_stream).$I_opaque)=([v0  ]((0))));
(($I_err)=($I_inflateInit_((&($I_stream)), ("1.3.1.1-motley"), ([i32 ]((0))))));
if ((($I_err)!=(0))) {
return ($I_err);
}
((($I_stream).$I_next_out)=($I_dest));
((($I_stream).$I_avail_out)=(0));
while ((($I_err)==(0))) {
if (((($I_stream).$I_avail_out)==(0))) {
(($I_left)-=(($I_stream).$I_avail_out));
}
if (((($I_stream).$I_avail_in)==(0))) {
(($I_len)-=(($I_stream).$I_avail_in));
}
(($I_err)=($I_inflate((&($I_stream)), (0))));
}
((*($I_sourceLen))-=(($I_len)+(($I_stream).$I_avail_in)));
if ((($I_dest)!=($I_buf))) {
((*($I_destLen))=(($I_stream).$I_total_out));
}
else {
if (((($I_stream).$I_total_out)&(($I_err)==(-(5))))) {
(($I_left)=(1));
}
}
($I_inflateEnd((&($I_stream))));
}

i32 $I_uncompress(u8   *$I_dest, u32   *$I_destLen,  u8   *$I_source, u32  $I_sourceLen)
{
return ($I_uncompress2(($I_dest), ($I_destLen), ($I_source), (&($I_sourceLen))));
}

 i8 *$I_zlibVersion(v0 $A_0)
{
return ("1.3.1.1-motley");
}

u32  $I_zlibCompileFlags(v0 $A_0)
{
u32   $I_flags;
(($I_flags)=(0));
for (u8 $_7NneiH = 0; $_7NneiH == 0; $_7NneiH = 1) {
if (([i32 ]((0))) == (2)) {
break;
}
else if (([i32 ]((0))) == (4)) {
(($I_flags)+=(1));
break;
}
else if (([i32 ]((0))) == (8)) {
(($I_flags)+=(2));
break;
}
else {
(($I_flags)+=(3));
}
}
for (u8 $_n2Ie4b = 0; $_n2Ie4b == 0; $_n2Ie4b = 1) {
if (([i32 ]((0))) == (2)) {
break;
}
else if (([i32 ]((0))) == (4)) {
(($I_flags)+=((1)<<(2)));
break;
}
else if (([i32 ]((0))) == (8)) {
(($I_flags)+=((2)<<(2)));
break;
}
else {
(($I_flags)+=((3)<<(2)));
}
}
for (u8 $_4E7VOu = 0; $_4E7VOu == 0; $_4E7VOu = 1) {
if (([i32 ]((0))) == (2)) {
break;
}
else if (([i32 ]((0))) == (4)) {
(($I_flags)+=((1)<<(4)));
break;
}
else if (([i32 ]((0))) == (8)) {
(($I_flags)+=((2)<<(4)));
break;
}
else {
(($I_flags)+=((3)<<(4)));
}
}
for (u8 $_876BVz = 0; $_876BVz == 0; $_876BVz = 1) {
if (([i32 ]((0))) == (2)) {
break;
}
else if (([i32 ]((0))) == (4)) {
(($I_flags)+=((1)<<(6)));
break;
}
else if (([i32 ]((0))) == (8)) {
(($I_flags)+=((2)<<(6)));
break;
}
else {
(($I_flags)+=((3)<<(6)));
}
}
return ($I_flags);
}

 i8 *$I_zError(i32 $I_err)
{
}

v0  $I_zcalloc(v0  $I_opaque, u32 $I_items, u32 $I_size)
{
([v0 ](($I_opaque)));
}

v0 $I_zcfree(v0  $I_opaque, v0  $I_ptr)
{
([v0 ](($I_opaque)));
($I_free(($I_ptr)));
}

v0 main()
{
}


